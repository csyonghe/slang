#include <cstdio>

#include "source/core/slang-io.h"
#include "source/compiler-core/slang-diagnostic-sink.h"
#include "source/compiler-core/slang-perfect-hash.h"
#include "source/core/slang-writer.h"
#include "source/compiler-core/slang-spirv-core-grammar.h"
#include "source/compiler-core/slang-lexer.h"

using namespace Slang;

void writeInfo(
    const char* const outCppPath,
    const SPIRVCoreGrammarInfo& info)
{
    StringBuilder sb;
    StringWriter writer(&sb, WriterFlags(0));
    WriterHelper w(&writer);
    const auto line = [&](const auto& l){
        w.put(l);
        w.put("\n");
    };

    //
    line("// Source embedding for SPIR-V core grammar");
    line("//");
    line("// This file was carefully generated by a machine,");
    line("// don't even think about modifying it yourself!");
    line("//");
    line("");
    line("#include \"../core/slang-smart-pointer.h\"");
    line("#include \"../compiler-core/slang-spirv-core-grammar.h\"");

    //
    line("namespace Slang");
    line("{");

    HashParams hashParams;
    List<String> opnames;
    for(const auto& [opname, opcode] : info.spvOps.dict)
        opnames.add(opname);
    auto r = minimalPerfectHash(opnames, hashParams);
    SLANG_ASSERT(r == HashFindResult::Success);
    w.put(perfectHashToEmbeddableCpp(
        hashParams,
        UnownedStringSlice("SpvOp"),
        UnownedStringSlice("Spv")
    ).getBuffer());

    line("RefPtr<SPIRVCoreGrammarInfo> getEmbeddedSPIRVCoreGrammarInfo()");
    line("{");
    line("    static SPIRVCoreGrammarInfo info = [](){");
    line("        SPIRVCoreGrammarInfo info;");
    line("        info.spvOps.embedded = &lookupSpvOp;");

    //
    line("        info.addReference();");
    line("        return info;");
    line("    }();");
    line("    return &info;");
    line("}");
    line("}");

    File::writeAllTextIfChanged(outCppPath, sb.getUnownedSlice());
}

int main(int argc, const char* const* argv)
{
    using namespace Slang;

    if (argc != 3)
    {
        fprintf(
            stderr,
            "Usage: %s spirv.core.grammar.json output.cpp\n",
            argc >= 1 ? argv[0] : "slang-spirv-embed-generator");
        return 1;
    }

    const char* const inPath = argv[1];
    const char* const outCppPath = argv[2];

    RefPtr<FileWriter> writer(new FileWriter(stderr, WriterFlag::AutoFlush));
    SourceManager      sourceManager;
    sourceManager.initialize(nullptr, nullptr);
    DiagnosticSink sink(&sourceManager, Lexer::sourceLocationLexer);
    sink.writer = writer;

    String contents;
    SLANG_RETURN_ON_FAIL(File::readAllText(inPath, contents));
    PathInfo    pathInfo = PathInfo::makeFromString(inPath);
    SourceFile* sourceFile = sourceManager.createSourceFileWithString(pathInfo, contents);
    SourceView* sourceView = sourceManager.createSourceView(sourceFile, nullptr, SourceLoc());

    RefPtr<SPIRVCoreGrammarInfo> info = loadSPIRVCoreGrammarInfo(*sourceView, sink);

    writeInfo(outCppPath, *info);

    return 0;
}

result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
layout(row_major) uniform;
layout(row_major) buffer;
layout(binding = 0)
uniform accelerationStructureEXT scene_0;

layout(std430, binding = 1) buffer StructuredBuffer_uint_t_0 {
    uint _data[];
} outputBuffer_0;
struct MyAttributes_0
{
    uint value_0;
};

layout(location = 0)
hitObjectAttributeNV
MyAttributes_0 t_0;

struct MyRayPayload_0
{
    uint value_1;
};

layout(location = 0)
rayPayloadEXT
MyRayPayload_0 p_0;

struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

RayDesc_0 makeRay_0(uint idx_0, uint variation_0)
{
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(float(idx_0), 0.0, float(variation_0));
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.0, 1.0, 0.0);
    ray_0.TMax_0 = 10000.0;
    return ray_0;
}

hitObjectNV myTraceRay_0(uint idx_1)
{
    RayDesc_0 ray_1 = makeRay_0(idx_1, 0U);
    hitObjectNV hitObj_0;
    p_0.value_1 = idx_1;
    hitObjectTraceRayNV(hitObj_0, scene_0, 20U, 255U, 0U, 4U, 0U, ray_1.Origin_0, ray_1.TMin_0, ray_1.Direction_0, ray_1.TMax_0, (0));
    return hitObj_0;
}

void main()
{
    uvec3 _S1 = ((gl_LaunchIDEXT));
    uint idx_2 = _S1.x;
    bool _S2 = (hitObjectIsHitNV((myTraceRay_0(idx_2))));
    uint r_0;
    if(_S2)
    {
        hitObjectGetAttributesNV((myTraceRay_0(idx_2)), ((0)));
        r_0 = 16U + t_0.value_0;
    }
    else
    {
        r_0 = 0U;
    }
    uint r_1 = r_0 * 256U;
    bool _S3 = (hitObjectIsHitNV((myTraceRay_0(idx_2))));
    if(_S3)
    {
        hitObjectGetAttributesNV((myTraceRay_0(idx_2)), ((0)));
        r_0 = r_1 + (16U + t_0.value_0);
    }
    else
    {
        r_0 = r_1;
    }
    RayDesc_0 ray_2 = makeRay_0(idx_2, 1U);
    hitObjectNV hitObj_1;
    hitObjectRecordMissNV(hitObj_1, idx_2, ray_2.Origin_0, ray_2.TMin_0, ray_2.Direction_0, ray_2.TMax_0);
    uint r_2 = r_0 * 256U;
    bool _S4 = (hitObjectIsHitNV((hitObj_1)));
    if(_S4)
    {
        hitObjectGetAttributesNV((hitObj_1), ((0)));
        r_0 = r_2 + (16U + t_0.value_0);
    }
    else
    {
        r_0 = r_2;
    }
    uint r_3 = r_0 * 256U;
    bool _S5 = (hitObjectIsHitNV((myTraceRay_0(idx_2))));
    if(_S5)
    {
        hitObjectGetAttributesNV((myTraceRay_0(idx_2)), ((0)));
        r_0 = r_3 + (16U + t_0.value_0);
    }
    else
    {
        r_0 = r_3;
    }
    outputBuffer_0._data[idx_2] = r_0;
    return;
}

}

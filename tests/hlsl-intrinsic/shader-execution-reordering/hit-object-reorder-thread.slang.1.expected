result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
layout(row_major) uniform;
layout(row_major) buffer;
layout(binding = 0)
uniform accelerationStructureEXT scene_0;

layout(std430, binding = 1) buffer StructuredBuffer_uint_t_0 {
    uint _data[];
} outputBuffer_0;
struct SomeValues_0
{
    int a_0;
    float b_0;
};

layout(location = 0)
rayPayloadEXT
SomeValues_0 p_0;

layout(location = 0)
hitObjectAttributeNV
SomeValues_0 t_0;

layout(location = 1)
rayPayloadEXT
SomeValues_0 p_1;

struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

void main()
{
    uvec3 _S1 = ((gl_LaunchIDEXT));
    ivec2 launchID_0 = ivec2(_S1.xy);
    uvec3 _S2 = ((gl_LaunchSizeEXT));
    int idx_0 = launchID_0.x;
    float _S3 = float(idx_0);
    float _S4 = _S3 * 2.0;
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(_S3, 0.0, 0.0);
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.0, 1.0, 0.0);
    ray_0.TMax_0 = 10000.0;
    RayDesc_0 _S5 = ray_0;
    hitObjectNV hitObj_0;
    p_1.a_0 = idx_0;
    p_1.b_0 = _S4;
    hitObjectTraceRayNV(hitObj_0, scene_0, 20U, 255U, 0U, 4U, 0U, _S5.Origin_0, _S5.TMin_0, _S5.Direction_0, _S5.TMax_0, (1));
    int _S6 = idx_0 * -1;
    float _S7 = _S3 * 4.0;
    uint _S8 = uint(idx_0 & 3);
    int _S9 = idx_0 * -2;
    float _S10 = _S3 * 8.0;
    uint _S11 = uint(idx_0 & 1);
    int _S12 = idx_0 * -4;
    float _S13 = _S3 * 16.0;
    uint _S14 = uint(idx_0);
    bool _S15 = (hitObjectIsHitNV((hitObj_0)));
    uint r_0;
    if(_S15)
    {
        uint instanceIndex_0 = (hitObjectGetInstanceCustomIndexNV((hitObj_0)));
        uint instanceID_0 = (hitObjectGetInstanceIdNV((hitObj_0)));
        uint geometryIndex_0 = (hitObjectGetGeometryIndexNV((hitObj_0)));
        uint primitiveIndex_0 = (hitObjectGetPrimitiveIndexNV((hitObj_0)));
        hitObjectGetAttributesNV((hitObj_0), ((0)));
        r_0 = uint(int(instanceIndex_0 + instanceID_0 + geometryIndex_0 + primitiveIndex_0) + t_0.a_0);
    }
    else
    {
        r_0 = 0U;
    }
    reorderThreadNV(hitObj_0);
    p_0.a_0 = _S6;
    p_0.b_0 = _S7;
    hitObjectExecuteShaderNV(hitObj_0, (0));
    bool _S16 = (hitObjectIsHitNV((hitObj_0)));
    uint r_1;
    if(_S16)
    {
        uint instanceIndex_1 = (hitObjectGetInstanceCustomIndexNV((hitObj_0)));
        uint instanceID_1 = (hitObjectGetInstanceIdNV((hitObj_0)));
        uint geometryIndex_1 = (hitObjectGetGeometryIndexNV((hitObj_0)));
        uint primitiveIndex_1 = (hitObjectGetPrimitiveIndexNV((hitObj_0)));
        hitObjectGetAttributesNV((hitObj_0), ((0)));
        r_1 = uint(int(instanceIndex_1 + instanceID_1 + geometryIndex_1 + primitiveIndex_1) + t_0.a_0);
    }
    else
    {
        r_1 = 0U;
    }
    uint r_2 = r_0 + r_1;
    reorderThreadNV(hitObj_0, _S8, 2U);
    p_0.a_0 = _S9;
    p_0.b_0 = _S10;
    hitObjectExecuteShaderNV(hitObj_0, (0));
    bool _S17 = (hitObjectIsHitNV((hitObj_0)));
    if(_S17)
    {
        uint instanceIndex_2 = (hitObjectGetInstanceCustomIndexNV((hitObj_0)));
        uint instanceID_2 = (hitObjectGetInstanceIdNV((hitObj_0)));
        uint geometryIndex_2 = (hitObjectGetGeometryIndexNV((hitObj_0)));
        uint primitiveIndex_2 = (hitObjectGetPrimitiveIndexNV((hitObj_0)));
        hitObjectGetAttributesNV((hitObj_0), ((0)));
        r_0 = uint(int(instanceIndex_2 + instanceID_2 + geometryIndex_2 + primitiveIndex_2) + t_0.a_0);
    }
    else
    {
        r_0 = 0U;
    }
    uint r_3 = r_2 + r_0;
    reorderThreadNV(_S11, 1U);
    p_0.a_0 = _S12;
    p_0.b_0 = _S13;
    hitObjectExecuteShaderNV(hitObj_0, (0));
    bool _S18 = (hitObjectIsHitNV((hitObj_0)));
    if(_S18)
    {
        uint instanceIndex_3 = (hitObjectGetInstanceCustomIndexNV((hitObj_0)));
        uint instanceID_3 = (hitObjectGetInstanceIdNV((hitObj_0)));
        uint geometryIndex_3 = (hitObjectGetGeometryIndexNV((hitObj_0)));
        uint primitiveIndex_3 = (hitObjectGetPrimitiveIndexNV((hitObj_0)));
        hitObjectGetAttributesNV((hitObj_0), ((0)));
        r_0 = uint(int(instanceIndex_3 + instanceID_3 + geometryIndex_3 + primitiveIndex_3) + t_0.a_0);
    }
    else
    {
        r_0 = 0U;
    }
    outputBuffer_0._data[_S14] = r_3 + r_0;
    return;
}

}

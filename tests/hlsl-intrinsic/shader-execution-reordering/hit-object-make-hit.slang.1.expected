result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
layout(row_major) uniform;
layout(row_major) buffer;
layout(binding = 0)
uniform accelerationStructureEXT scene_0;

layout(std430, binding = 1) buffer StructuredBuffer_uint_t_0 {
    uint _data[];
} outputBuffer_0;
struct SomeValues_0
{
    int a_0;
    float b_0;
};

layout(location = 0)
hitObjectAttributeNV
SomeValues_0 t_0;

struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

void main()
{
    uvec3 _S1 = ((gl_LaunchIDEXT));
    ivec2 launchID_0 = ivec2(_S1.xy);
    uvec3 _S2 = ((gl_LaunchSizeEXT));
    int idx_0 = launchID_0.x;
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(float(idx_0), 0.0, 0.0);
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.0, 1.0, 0.0);
    ray_0.TMax_0 = 10000.0;
    uint _S3 = uint(idx_0);
    uint _S4 = uint(idx_0 * 2);
    uint _S5 = uint(idx_0 * 3);
    RayDesc_0 _S6 = ray_0;
    hitObjectNV hitObj_0;
    int _S7 = int(_S3);
    int _S8 = int(_S4);
    int _S9 = int(_S5);
    hitObjectRecordHitWithIndexNV(hitObj_0, scene_0, _S7, _S8, _S9, 0U, 0U, _S6.Origin_0, _S6.TMin_0, _S6.Direction_0, _S6.TMax_0, (0));
    bool _S10 = (hitObjectIsHitNV((hitObj_0)));
    uint r_0;
    if(_S10)
    {
        uint instanceIndex_0 = (hitObjectGetInstanceCustomIndexNV((hitObj_0)));
        uint instanceID_0 = (hitObjectGetInstanceIdNV((hitObj_0)));
        uint geometryIndex_0 = (hitObjectGetGeometryIndexNV((hitObj_0)));
        uint primitiveIndex_0 = (hitObjectGetPrimitiveIndexNV((hitObj_0)));
        uint hitKind_0 = (hitObjectGetHitKindNV((hitObj_0)));
        uint r_1 = hitKind_0 + instanceIndex_0 + instanceID_0 + geometryIndex_0 + primitiveIndex_0;
        vec3 _S11 = (hitObjectGetWorldRayOriginNV((hitObj_0)));
        float _S12 = (hitObjectGetRayTMinNV((hitObj_0)));
        vec3 _S13 = (hitObjectGetObjectRayDirectionNV((hitObj_0)));
        float _S14 = (hitObjectGetRayTMaxNV((hitObj_0)));
        uint r_2 = r_1 + uint(_S12 > 0.0) + uint(_S14 < _S12);
        hitObjectGetAttributesNV((hitObj_0), ((0)));
        r_0 = uint(int(r_2) + t_0.a_0);
    }
    else
    {
        bool _S15 = (hitObjectIsMissNV((hitObj_0)));
        if(_S15)
        {
            r_0 = 1U;
        }
        else
        {
            r_0 = 0U;
        }
    }
    RayDesc_0 _S16 = ray_0;
    hitObjectNV hitObj_1;
    hitObjectRecordHitNV(hitObj_1, scene_0, _S7, _S9, _S8, 0U, 0U, 4U, _S16.Origin_0, _S16.TMin_0, _S16.Direction_0, _S16.TMax_0, (0));
    bool _S17 = (hitObjectIsHitNV((hitObj_1)));
    uint r_3;
    if(_S17)
    {
        uint instanceIndex_1 = (hitObjectGetInstanceCustomIndexNV((hitObj_1)));
        uint instanceID_1 = (hitObjectGetInstanceIdNV((hitObj_1)));
        uint geometryIndex_1 = (hitObjectGetGeometryIndexNV((hitObj_1)));
        uint primitiveIndex_1 = (hitObjectGetPrimitiveIndexNV((hitObj_1)));
        uint hitKind_1 = (hitObjectGetHitKindNV((hitObj_1)));
        uint r_4 = hitKind_1 + instanceIndex_1 + instanceID_1 + geometryIndex_1 + primitiveIndex_1;
        vec3 _S18 = (hitObjectGetWorldRayOriginNV((hitObj_1)));
        float _S19 = (hitObjectGetRayTMinNV((hitObj_1)));
        vec3 _S20 = (hitObjectGetObjectRayDirectionNV((hitObj_1)));
        float _S21 = (hitObjectGetRayTMaxNV((hitObj_1)));
        uint r_5 = r_4 + uint(_S19 > 0.0) + uint(_S21 < _S19);
        hitObjectGetAttributesNV((hitObj_1), ((0)));
        r_3 = uint(int(r_5) + t_0.a_0);
    }
    else
    {
        bool _S22 = (hitObjectIsMissNV((hitObj_1)));
        if(_S22)
        {
            r_3 = 1U;
        }
        else
        {
            r_3 = 0U;
        }
    }
    outputBuffer_0._data[_S3] = r_0 + r_3;
    return;
}

}

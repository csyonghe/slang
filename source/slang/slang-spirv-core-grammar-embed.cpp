// Source embedding for SPIR-V core grammar
//
// This file was carefully generated by a machine,
// don't even think about modifying it yourself!
//

#include "../core/slang-smart-pointer.h"
#include "../compiler-core/slang-spirv-core-grammar.h"
namespace Slang
{
static bool lookupSpvOp(const UnownedStringSlice& str, SpvOp& value)
{
    static const unsigned tableSalt[718] = {
        2, 1, 7, 1, 0, 0, 1, 1, 3, 0, 3, 1, 2, 1, 2, 2,
        3, 6, 1, 0, 1, 3, 2, 0, 1, 0, 1, 1, 1, 1, 0, 0,
        1, 0, 1, 0, 0, 2, 1, 1, 1, 2, 5, 0, 2, 0, 1, 0,
        1, 1, 0, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 0, 2, 0,
        3, 2, 1, 3, 1, 2, 0, 0, 3, 5, 0, 1, 0, 0, 0, 3,
        0, 2, 0, 0, 0, 8, 3, 2, 1, 3, 1, 0, 0, 1, 1, 0,
        0, 0, 0, 2, 1, 0, 2, 1, 0, 0, 4, 5, 1, 5, 0, 0,
        0, 5, 0, 0, 0, 0, 1, 1, 0, 5, 0, 2, 12, 0, 0, 2,
        0, 0, 2, 1, 0, 1, 2, 5, 0, 1, 4, 7, 1, 2, 1, 0,
        2, 3, 0, 0, 4, 9, 0, 0, 3, 1, 4, 0, 0, 2, 2, 1,
        2, 0, 6, 2, 1, 0, 1, 0, 0, 3, 3, 2, 2, 1, 1, 7,
        2, 2, 2, 0, 0, 0, 3, 0, 4, 0, 1, 2, 1, 0, 0, 1,
        1, 3, 6, 1, 0, 1, 3, 2, 1, 1, 0, 2, 5, 0, 1, 0,
        1, 0, 7, 0, 4, 0, 1, 1, 2, 0, 0, 1, 2, 1, 1, 5,
        0, 2, 0, 4, 0, 0, 8, 0, 0, 7, 3, 3, 10, 0, 0, 1,
        1, 1, 0, 3, 4, 6, 0, 2, 2, 1, 12, 2, 0, 1, 3, 6,
        2, 2, 3, 0, 0, 2, 0, 0, 1, 4, 4, 4, 1, 1, 1, 2,
        7, 7, 4, 4, 3, 1, 0, 1, 10, 3, 1, 0, 6, 0, 1, 2,
        0, 0, 1, 2, 3, 2, 2, 1, 10, 1, 0, 4, 1, 0, 1, 0,
        2, 5, 3, 0, 1, 4, 0, 5, 3, 0, 0, 0, 17, 0, 1, 0,
        0, 3, 1, 4, 0, 0, 3, 0, 1, 3, 1, 2, 2, 20, 0, 4,
        0, 1, 0, 1, 6, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1,
        5, 15, 2, 0, 0, 2, 1, 0, 2, 4, 0, 8, 0, 0, 0, 4,
        0, 0, 0, 15, 0, 0, 0, 0, 2, 0, 2, 3, 2, 6, 9, 6,
        0, 3, 0, 0, 0, 6, 2, 0, 1, 0, 5, 8, 14, 2, 4, 9,
        1, 2, 0, 11, 7, 0, 3, 2, 3, 2, 0, 0, 3, 2, 8, 4,
        0, 0, 4, 1, 8, 1, 0, 3, 5, 0, 2, 4, 0, 1, 2, 0,
        6, 0, 5, 2, 28, 1, 1, 4, 12, 30, 10, 1, 0, 3, 18, 0,
        1, 4, 1, 0, 1, 2, 0, 6, 6, 9, 1, 0, 0, 1, 1, 0,
        14, 3, 4, 0, 14, 2, 3, 0, 0, 1, 1, 0, 14, 1, 5, 1,
        15, 2, 0, 20, 3, 20, 5, 0, 10, 6, 0, 9, 4, 0, 0, 11,
        1, 0, 2, 0, 0, 0, 0, 0, 29, 5, 1, 2, 0, 4, 0, 10,
        10, 2, 9, 0, 1, 0, 5, 20, 0, 6, 0, 11, 2, 2, 8, 0,
        1, 0, 4, 0, 0, 1, 0, 9, 3, 0, 2, 11, 2, 4, 0, 0,
        28, 0, 10, 0, 0, 11, 0, 18, 7, 13, 2, 31, 2, 3, 5, 5,
        0, 18, 1, 0, 1, 25, 1, 17, 6, 35, 2, 1, 62, 4, 0, 25,
        48, 36, 11, 7, 2, 22, 0, 2, 1, 2, 48, 2, 0, 0, 0, 0,
        0, 1, 5, 22, 0, 1, 2, 10, 0, 11, 0, 19, 2, 0, 0, 4,
        5, 0, 3, 0, 1, 0, 0, 8, 3, 0, 9, 0, 0, 28, 9, 3,
        51, 38, 2, 11, 0, 1, 0, 0, 5, 0, 1, 0, 0, 13, 27, 8,
        11, 17, 0, 0, 64, 20, 126, 0, 1, 0, 62, 18, 0, 0, 0, 0,
        2, 0, 0, 53, 119, 17, 81, 6, 20, 0, 0, 0, 48, 109, 5, 0,
        0, 0, 46, 3, 22, 2, 160, 1, 49, 0, 0, 0, 0, 4, 124, 0,
        0, 12, 4, 1, 0, 1, 1, 141, 3, 2, 7, 0, 0, 0, 0, 10,
        40, 226, 445, 0, 6, 2, 0, 1, 2, 5, 0, 591, 0, 0
    };

    using KV = std::pair<const char*, SpvOp>;

    static const KV words[718] =
    {
        {"OpReservedWritePipe", static_cast<SpvOp>(277)},
        {"OpSubgroupAvcMceGetInterMinorShapeINTEL", static_cast<SpvOp>(5742)},
        {"OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL", static_cast<SpvOp>(5725)},
        {"OpGroupNonUniformUMin", static_cast<SpvOp>(354)},
        {"OpUGreaterThan", static_cast<SpvOp>(172)},
        {"OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL", static_cast<SpvOp>(5802)},
        {"OpBranch", static_cast<SpvOp>(249)},
        {"OpSubgroupAvcImeSetDualReferenceINTEL", static_cast<SpvOp>(5749)},
        {"OpExpectKHR", static_cast<SpvOp>(5631)},
        {"OpCompositeInsert", static_cast<SpvOp>(82)},
        {"OpSource", static_cast<SpvOp>(3)},
        {"OpSubgroupShuffleDownINTEL", static_cast<SpvOp>(5572)},
        {"OpSubgroupAvcSicConvertToMcePayloadINTEL", static_cast<SpvOp>(5796)},
        {"OpULessThan", static_cast<SpvOp>(176)},
        {"OpTypeRuntimeArray", static_cast<SpvOp>(29)},
        {"OpGroupNonUniformAll", static_cast<SpvOp>(334)},
        {"OpSubgroupAvcSicEvaluateWithDualReferenceINTEL", static_cast<SpvOp>(5805)},
        {"OpSubgroupAvcSicGetIpeLumaShapeINTEL", static_cast<SpvOp>(5809)},
        {"OpSubgroupAvcMceGetInterMotionVectorCountINTEL", static_cast<SpvOp>(5744)},
        {"OpArbitraryFloatLTINTEL", static_cast<SpvOp>(5852)},
        {"OpSourceExtension", static_cast<SpvOp>(4)},
        {"OpLifetimeStop", static_cast<SpvOp>(257)},
        {"OpVectorTimesMatrix", static_cast<SpvOp>(144)},
        {"OpTypeInt", static_cast<SpvOp>(21)},
        {"OpGroupNonUniformBallotBitCount", static_cast<SpvOp>(342)},
        {"OpGroupNonUniformAny", static_cast<SpvOp>(335)},
        {"OpCooperativeMatrixLoadKHR", static_cast<SpvOp>(4457)},
        {"OpISubBorrow", static_cast<SpvOp>(150)},
        {"OpGroupNonUniformShuffle", static_cast<SpvOp>(345)},
        {"OpArbitraryFloatCosPiINTEL", static_cast<SpvOp>(5872)},
        {"OpHitObjectTraceRayNV", static_cast<SpvOp>(5260)},
        {"OpHitObjectGetWorldRayDirectionNV", static_cast<SpvOp>(5272)},
        {"OpRayQueryGetWorldRayDirectionKHR", static_cast<SpvOp>(6029)},
        {"OpImageSampleProjImplicitLod", static_cast<SpvOp>(91)},
        {"OpSDotAccSat", static_cast<SpvOp>(4453)},
        {"OpFNegate", static_cast<SpvOp>(127)},
        {"OpImageSparseSampleImplicitLod", static_cast<SpvOp>(305)},
        {"OpSatConvertUToS", static_cast<SpvOp>(119)},
        {"OpArbitraryFloatLogINTEL", static_cast<SpvOp>(5860)},
        {"OpPtrNotEqual", static_cast<SpvOp>(402)},
        {"OpGroupNonUniformPartitionNV", static_cast<SpvOp>(5296)},
        {"OpFunctionCall", static_cast<SpvOp>(57)},
        {"OpSpecConstantCompositeContinuedINTEL", static_cast<SpvOp>(6092)},
        {"OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL", static_cast<SpvOp>(5713)},
        {"OpIAverageINTEL", static_cast<SpvOp>(5591)},
        {"OpStore", static_cast<SpvOp>(62)},
        {"OpFUnordNotEqual", static_cast<SpvOp>(183)},
        {"OpEntryPoint", static_cast<SpvOp>(15)},
        {"OpAtomicSMin", static_cast<SpvOp>(236)},
        {"OpRayQueryGetIntersectionInstanceCustomIndexKHR", static_cast<SpvOp>(6019)},
        {"OpDecorateId", static_cast<SpvOp>(332)},
        {"OpExecutionModeId", static_cast<SpvOp>(331)},
        {"OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL", static_cast<SpvOp>(5731)},
        {"OpArbitraryFloatExpINTEL", static_cast<SpvOp>(5864)},
        {"OpEndInvocationInterlockEXT", static_cast<SpvOp>(5365)},
        {"OpTypeCooperativeMatrixKHR", static_cast<SpvOp>(4456)},
        {"OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL", static_cast<SpvOp>(5757)},
        {"OpGroupNonUniformBallotBitExtract", static_cast<SpvOp>(341)},
        {"OpImageSampleExplicitLod", static_cast<SpvOp>(88)},
        {"OpImageBlockMatchSADQCOM", static_cast<SpvOp>(4483)},
        {"OpFixedSinINTEL", static_cast<SpvOp>(5926)},
        {"OpBitCount", static_cast<SpvOp>(205)},
        {"OpArbitraryFloatSinINTEL", static_cast<SpvOp>(5868)},
        {"OpAsmCallINTEL", static_cast<SpvOp>(5611)},
        {"OpArbitraryFloatASinPiINTEL", static_cast<SpvOp>(5874)},
        {"OpConstantComposite", static_cast<SpvOp>(44)},
        {"OpExecutionMode", static_cast<SpvOp>(16)},
        {"OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL", static_cast<SpvOp>(5759)},
        {"OpGroupMemberDecorate", static_cast<SpvOp>(75)},
        {"OpUMod", static_cast<SpvOp>(137)},
        {"OpSubgroupAvcRefEvaluateWithDualReferenceINTEL", static_cast<SpvOp>(5787)},
        {"OpGroupNonUniformIAdd", static_cast<SpvOp>(349)},
        {"OpSubgroupAvcRefConvertToMceResultINTEL", static_cast<SpvOp>(5790)},
        {"OpFMod", static_cast<SpvOp>(141)},
        {"OpGroupNonUniformFAdd", static_cast<SpvOp>(350)},
        {"OpFunctionPointerCallINTEL", static_cast<SpvOp>(5601)},
        {"OpVariableLengthArrayINTEL", static_cast<SpvOp>(5818)},
        {"OpHitObjectRecordMissMotionNV", static_cast<SpvOp>(5251)},
        {"OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL", static_cast<SpvOp>(5798)},
        {"OpVectorTimesScalar", static_cast<SpvOp>(142)},
        {"OpFUnordEqual", static_cast<SpvOp>(181)},
        {"OpIEqual", static_cast<SpvOp>(170)},
        {"OpSubgroupAvcMceGetBestInterDistortionsINTEL", static_cast<SpvOp>(5740)},
        {"OpTypeAvcMceResultINTEL", static_cast<SpvOp>(5705)},
        {"OpRayQueryConfirmIntersectionKHR", static_cast<SpvOp>(4476)},
        {"OpSelect", static_cast<SpvOp>(169)},
        {"OpWritePipe", static_cast<SpvOp>(275)},
        {"OpSubgroupAvcImeSetWeightedSadINTEL", static_cast<SpvOp>(5756)},
        {"OpTypeRayQueryKHR", static_cast<SpvOp>(4472)},
        {"OpArbitraryFloatGTINTEL", static_cast<SpvOp>(5850)},
        {"OpCopyMemory", static_cast<SpvOp>(63)},
        {"OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL", static_cast<SpvOp>(5729)},
        {"OpHitObjectGetAttributesNV", static_cast<SpvOp>(5266)},
        {"OpFAdd", static_cast<SpvOp>(129)},
        {"OpSetUserEventStatus", static_cast<SpvOp>(301)},
        {"OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL", static_cast<SpvOp>(5714)},
        {"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL", static_cast<SpvOp>(5771)},
        {"OpUSubSatINTEL", static_cast<SpvOp>(5596)},
        {"OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL", static_cast<SpvOp>(5780)},
        {"OpGetKernelWorkGroupSize", static_cast<SpvOp>(295)},
        {"OpGroupNonUniformBitwiseXor", static_cast<SpvOp>(361)},
        {"OpSUDotAccSat", static_cast<SpvOp>(4455)},
        {"OpFUnordLessThan", static_cast<SpvOp>(185)},
        {"OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL", static_cast<SpvOp>(5801)},
        {"OpConstantCompositeContinuedINTEL", static_cast<SpvOp>(6091)},
        {"OpGroupCommitWritePipe", static_cast<SpvOp>(288)},
        {"OpAssumeTrueKHR", static_cast<SpvOp>(5630)},
        {"OpConvertFToBF16INTEL", static_cast<SpvOp>(6116)},
        {"OpTraceRayKHR", static_cast<SpvOp>(4445)},
        {"OpArbitraryFloatRecipINTEL", static_cast<SpvOp>(5855)},
        {"OpGroupIAddNonUniformAMD", static_cast<SpvOp>(5000)},
        {"OpSubgroupAvcRefSetBidirectionalMixDisableINTEL", static_cast<SpvOp>(5784)},
        {"OpSubgroupAvcMceConvertToRefPayloadINTEL", static_cast<SpvOp>(5734)},
        {"OpTypeAvcSicResultINTEL", static_cast<SpvOp>(5712)},
        {"OpImageSampleWeightedQCOM", static_cast<SpvOp>(4480)},
        {"OpKill", static_cast<SpvOp>(252)},
        {"OpVmeImageINTEL", static_cast<SpvOp>(5699)},
        {"OpGroupNonUniformFMin", static_cast<SpvOp>(355)},
        {"OpSetMeshOutputsEXT", static_cast<SpvOp>(5295)},
        {"OpOuterProduct", static_cast<SpvOp>(147)},
        {"OpArbitraryFloatCastToIntINTEL", static_cast<SpvOp>(5843)},
        {"OpAtomicFAddEXT", static_cast<SpvOp>(6035)},
        {"OpFRem", static_cast<SpvOp>(140)},
        {"OpSubgroupImageBlockReadINTEL", static_cast<SpvOp>(5577)},
        {"OpGetKernelNDrangeSubGroupCount", static_cast<SpvOp>(293)},
        {"OpMemberDecorateString", static_cast<SpvOp>(5633)},
        {"OpSourceContinued", static_cast<SpvOp>(2)},
        {"OpTypeImage", static_cast<SpvOp>(25)},
        {"OpCommitReadPipe", static_cast<SpvOp>(280)},
        {"OpTypeDeviceEvent", static_cast<SpvOp>(35)},
        {"OpTypeAvcImePayloadINTEL", static_cast<SpvOp>(5701)},
        {"OpGroupNonUniformFMul", static_cast<SpvOp>(352)},
        {"OpImageQuerySize", static_cast<SpvOp>(104)},
        {"OpDecorateString", static_cast<SpvOp>(5632)},
        {"OpGroupUMax", static_cast<SpvOp>(270)},
        {"OpAliasScopeListDeclINTEL", static_cast<SpvOp>(5913)},
        {"OpArbitraryFloatPowINTEL", static_cast<SpvOp>(5880)},
        {"OpAtomicFlagClear", static_cast<SpvOp>(319)},
        {"OpSubgroupAvcSicConvertToMceResultINTEL", static_cast<SpvOp>(5808)},
        {"OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL", static_cast<SpvOp>(5763)},
        {"OpReorderThreadWithHitObjectNV", static_cast<SpvOp>(5279)},
        {"OpAtomicXor", static_cast<SpvOp>(242)},
        {"OpGroupAll", static_cast<SpvOp>(261)},
        {"OpImageSparseSampleProjExplicitLod", static_cast<SpvOp>(310)},
        {"OpSDotAccSatKHR", static_cast<SpvOp>(4453)},
        {"OpFUnordLessThanEqual", static_cast<SpvOp>(189)},
        {"OpIAddSatINTEL", static_cast<SpvOp>(5589)},
        {"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL", static_cast<SpvOp>(5770)},
        {"OpGroupNonUniformBitwiseAnd", static_cast<SpvOp>(359)},
        {"OpTypeAvcMcePayloadINTEL", static_cast<SpvOp>(5704)},
        {"OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL", static_cast<SpvOp>(5724)},
        {"OpDPdxCoarse", static_cast<SpvOp>(213)},
        {"OpPtrCastToCrossWorkgroupINTEL", static_cast<SpvOp>(5934)},
        {"OpSwitch", static_cast<SpvOp>(251)},
        {"OpGenericCastToPtrExplicit", static_cast<SpvOp>(123)},
        {"OpSubgroupAvcSicGetMotionVectorMaskINTEL", static_cast<SpvOp>(5795)},
        {"OpRayQueryGetIntersectionCandidateAABBOpaqueKHR", static_cast<SpvOp>(6026)},
        {"OpArbitraryFloatCastFromIntINTEL", static_cast<SpvOp>(5842)},
        {"OpImageSparseFetch", static_cast<SpvOp>(313)},
        {"OpControlBarrierArriveINTEL", static_cast<SpvOp>(6142)},
        {"OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL", static_cast<SpvOp>(5721)},
        {"OpFUnordGreaterThan", static_cast<SpvOp>(187)},
        {"OpArrayLength", static_cast<SpvOp>(68)},
        {"OpGroupFMinNonUniformAMD", static_cast<SpvOp>(5002)},
        {"OpCooperativeMatrixStoreNV", static_cast<SpvOp>(5360)},
        {"OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL", static_cast<SpvOp>(5730)},
        {"OpHitObjectTraceRayMotionNV", static_cast<SpvOp>(5256)},
        {"OpEnqueueKernel", static_cast<SpvOp>(292)},
        {"OpConvertFToS", static_cast<SpvOp>(110)},
        {"OpDecorate", static_cast<SpvOp>(71)},
        {"OpSUDotAccSatKHR", static_cast<SpvOp>(4455)},
        {"OpGenericPtrMemSemantics", static_cast<SpvOp>(69)},
        {"OpRayQueryGetIntersectionObjectRayOriginKHR", static_cast<SpvOp>(6028)},
        {"OpGetKernelMaxNumSubgroups", static_cast<SpvOp>(326)},
        {"OpGroupBitwiseXorKHR", static_cast<SpvOp>(6405)},
        {"OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL", static_cast<SpvOp>(5727)},
        {"OpCooperativeMatrixLoadNV", static_cast<SpvOp>(5359)},
        {"OpFunctionParameter", static_cast<SpvOp>(55)},
        {"OpInBoundsPtrAccessChain", static_cast<SpvOp>(70)},
        {"OpGroupNonUniformLogicalOr", static_cast<SpvOp>(363)},
        {"OpHitObjectGetInstanceCustomIndexNV", static_cast<SpvOp>(5271)},
        {"OpDecorationGroup", static_cast<SpvOp>(73)},
        {"OpRayQueryGetIntersectionInstanceIdKHR", static_cast<SpvOp>(6020)},
        {"OpBitFieldUExtract", static_cast<SpvOp>(203)},
        {"OpTypeArray", static_cast<SpvOp>(28)},
        {"OpFragmentMaskFetchAMD", static_cast<SpvOp>(5011)},
        {"OpHitObjectGetHitKindNV", static_cast<SpvOp>(5267)},
        {"OpUnreachable", static_cast<SpvOp>(255)},
        {"OpImageDrefGather", static_cast<SpvOp>(97)},
        {"OpControlBarrier", static_cast<SpvOp>(224)},
        {"OpGroupNonUniformBallotFindLSB", static_cast<SpvOp>(343)},
        {"OpSConvert", static_cast<SpvOp>(114)},
        {"OpImageSampleFootprintNV", static_cast<SpvOp>(5283)},
        {"OpTypeStructContinuedINTEL", static_cast<SpvOp>(6090)},
        {"OpUDotAccSat", static_cast<SpvOp>(4454)},
        {"OpAtomicFMaxEXT", static_cast<SpvOp>(5615)},
        {"OpImageQueryFormat", static_cast<SpvOp>(101)},
        {"OpSpecConstantOp", static_cast<SpvOp>(52)},
        {"OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL", static_cast<SpvOp>(5797)},
        {"OpGroupNonUniformBallotFindMSB", static_cast<SpvOp>(344)},
        {"OpHitObjectIsEmptyNV", static_cast<SpvOp>(5276)},
        {"OpTypeAvcRefResultINTEL", static_cast<SpvOp>(5711)},
        {"OpSpecConstantComposite", static_cast<SpvOp>(51)},
        {"OpFOrdNotEqual", static_cast<SpvOp>(182)},
        {"OpIsValidEvent", static_cast<SpvOp>(300)},
        {"OpUCountTrailingZerosINTEL", static_cast<SpvOp>(5586)},
        {"OpGroupDecorate", static_cast<SpvOp>(74)},
        {"OpINotEqual", static_cast<SpvOp>(171)},
        {"OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL", static_cast<SpvOp>(5760)},
        {"OpIgnoreIntersectionKHR", static_cast<SpvOp>(4448)},
        {"OpSubgroupBlockWriteINTEL", static_cast<SpvOp>(5576)},
        {"OpVectorShuffle", static_cast<SpvOp>(79)},
        {"OpImageQuerySizeLod", static_cast<SpvOp>(103)},
        {"OpUndef", static_cast<SpvOp>(1)},
        {"OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL", static_cast<SpvOp>(5811)},
        {"OpGroupNonUniformQuadBroadcast", static_cast<SpvOp>(365)},
        {"OpCompositeExtract", static_cast<SpvOp>(81)},
        {"OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL", static_cast<SpvOp>(5768)},
        {"OpAtomicCompareExchangeWeak", static_cast<SpvOp>(231)},
        {"OpIMul", static_cast<SpvOp>(132)},
        {"OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL", static_cast<SpvOp>(5717)},
        {"OpPtrDiff", static_cast<SpvOp>(403)},
        {"OpFixedLogINTEL", static_cast<SpvOp>(5932)},
        {"OpRayQueryGetIntersectionObjectToWorldKHR", static_cast<SpvOp>(6031)},
        {"OpAtomicOr", static_cast<SpvOp>(241)},
        {"OpSubgroupAvcMceConvertToImePayloadINTEL", static_cast<SpvOp>(5732)},
        {"OpAbsUSubINTEL", static_cast<SpvOp>(5588)},
        {"OpConvertUToF", static_cast<SpvOp>(112)},
        {"OpArbitraryFloatACosINTEL", static_cast<SpvOp>(5875)},
        {"OpGroupReserveWritePipePackets", static_cast<SpvOp>(286)},
        {"OpIsNormal", static_cast<SpvOp>(159)},
        {"OpFwidthCoarse", static_cast<SpvOp>(215)},
        {"OpSampledImage", static_cast<SpvOp>(86)},
        {"OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL", static_cast<SpvOp>(5778)},
        {"OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL", static_cast<SpvOp>(5777)},
        {"OpSpecConstantTrue", static_cast<SpvOp>(48)},
        {"OpIsHelperInvocationEXT", static_cast<SpvOp>(5381)},
        {"OpTypeAvcImeResultDualReferenceStreamoutINTEL", static_cast<SpvOp>(5708)},
        {"OpGroupSMaxNonUniformAMD", static_cast<SpvOp>(5007)},
        {"OpGroupAsyncCopy", static_cast<SpvOp>(259)},
        {"OpExecuteCallableKHR", static_cast<SpvOp>(4446)},
        {"OpSubgroupImageMediaBlockReadINTEL", static_cast<SpvOp>(5580)},
        {"OpEmitVertex", static_cast<SpvOp>(218)},
        {"OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL", static_cast<SpvOp>(5726)},
        {"OpSGreaterThan", static_cast<SpvOp>(173)},
        {"OpLine", static_cast<SpvOp>(8)},
        {"OpHitObjectGetShaderBindingTableRecordIndexNV", static_cast<SpvOp>(5258)},
        {"OpArbitraryFloatDivINTEL", static_cast<SpvOp>(5849)},
        {"OpGroupNonUniformRotateKHR", static_cast<SpvOp>(4431)},
        {"OpTypePipeStorage", static_cast<SpvOp>(322)},
        {"OpIsFinite", static_cast<SpvOp>(158)},
        {"OpUAverageINTEL", static_cast<SpvOp>(5592)},
        {"OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL", static_cast<SpvOp>(5754)},
        {"OpArbitraryFloatLog10INTEL", static_cast<SpvOp>(5862)},
        {"OpFDiv", static_cast<SpvOp>(136)},
        {"OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR", static_cast<SpvOp>(6021)},
        {"OpSubgroupAvcImeSetSingleReferenceINTEL", static_cast<SpvOp>(5748)},
        {"OpGroupNonUniformQuadSwap", static_cast<SpvOp>(366)},
        {"OpRayQueryGetIntersectionFrontFaceKHR", static_cast<SpvOp>(6025)},
        {"OpReadClockKHR", static_cast<SpvOp>(5056)},
        {"OpGroupNonUniformFMax", static_cast<SpvOp>(358)},
        {"OpGroupLogicalAndKHR", static_cast<SpvOp>(6406)},
        {"OpGroupFMin", static_cast<SpvOp>(266)},
        {"OpFMul", static_cast<SpvOp>(133)},
        {"OpNamedBarrierInitialize", static_cast<SpvOp>(328)},
        {"OpGroupUMinNonUniformAMD", static_cast<SpvOp>(5003)},
        {"OpMemoryNamedBarrier", static_cast<SpvOp>(329)},
        {"OpSubgroupAvcImeGetDualReferenceStreaminINTEL", static_cast<SpvOp>(5767)},
        {"OpGroupCommitReadPipe", static_cast<SpvOp>(287)},
        {"OpSubgroupImageMediaBlockWriteINTEL", static_cast<SpvOp>(5581)},
        {"OpConvertPtrToU", static_cast<SpvOp>(117)},
        {"OpGetKernelLocalSizeForSubgroupCount", static_cast<SpvOp>(325)},
        {"OpGroupFAdd", static_cast<SpvOp>(265)},
        {"OpLogicalNot", static_cast<SpvOp>(168)},
        {"OpULessThanEqual", static_cast<SpvOp>(178)},
        {"OpCooperativeMatrixLengthKHR", static_cast<SpvOp>(4460)},
        {"OpHitObjectExecuteShaderNV", static_cast<SpvOp>(5264)},
        {"OpSubgroupAvcMceSetInterDirectionPenaltyINTEL", static_cast<SpvOp>(5718)},
        {"OpTraceMotionNV", static_cast<SpvOp>(5338)},
        {"OpHitObjectGetWorldToObjectNV", static_cast<SpvOp>(5252)},
        {"OpRayQueryGetIntersectionTypeKHR", static_cast<SpvOp>(4479)},
        {"OpFOrdEqual", static_cast<SpvOp>(180)},
        {"OpSubgroupAvcSicGetPackedIpeLumaModesINTEL", static_cast<SpvOp>(5812)},
        {"OpConstant", static_cast<SpvOp>(43)},
        {"OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL", static_cast<SpvOp>(5720)},
        {"OpFixedRecipINTEL", static_cast<SpvOp>(5924)},
        {"OpArbitraryFloatSinCosINTEL", static_cast<SpvOp>(5870)},
        {"OpFConvert", static_cast<SpvOp>(115)},
        {"OpGroupNonUniformInverseBallot", static_cast<SpvOp>(340)},
        {"OpGetKernelNDrangeMaxSubGroupSize", static_cast<SpvOp>(294)},
        {"OpFixedRsqrtINTEL", static_cast<SpvOp>(5925)},
        {"OpRayQueryGetWorldRayOriginKHR", static_cast<SpvOp>(6030)},
        {"OpLifetimeStart", static_cast<SpvOp>(256)},
        {"OpUGreaterThanEqual", static_cast<SpvOp>(174)},
        {"OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL", static_cast<SpvOp>(5810)},
        {"OpImageFetch", static_cast<SpvOp>(95)},
        {"OpFwidth", static_cast<SpvOp>(209)},
        {"OpShiftLeftLogical", static_cast<SpvOp>(196)},
        {"OpString", static_cast<SpvOp>(7)},
        {"OpTypeAvcRefPayloadINTEL", static_cast<SpvOp>(5702)},
        {"OpArbitraryFloatRSqrtINTEL", static_cast<SpvOp>(5856)},
        {"OpHitObjectRecordHitWithIndexNV", static_cast<SpvOp>(5262)},
        {"OpBitFieldSExtract", static_cast<SpvOp>(202)},
        {"OpVectorInsertDynamic", static_cast<SpvOp>(78)},
        {"OpArbitraryFloatCosINTEL", static_cast<SpvOp>(5869)},
        {"OpArbitraryFloatLEINTEL", static_cast<SpvOp>(5853)},
        {"OpTypeAvcImeResultSingleReferenceStreamoutINTEL", static_cast<SpvOp>(5707)},
        {"OpSLessThan", static_cast<SpvOp>(177)},
        {"OpBitwiseAnd", static_cast<SpvOp>(199)},
        {"OpHitObjectGetObjectToWorldNV", static_cast<SpvOp>(5253)},
        {"OpNoLine", static_cast<SpvOp>(317)},
        {"OpHitObjectGetGeometryIndexNV", static_cast<SpvOp>(5269)},
        {"OpArbitraryFloatSinCosPiINTEL", static_cast<SpvOp>(5840)},
        {"OpConstantNull", static_cast<SpvOp>(46)},
        {"OpBuildNDRange", static_cast<SpvOp>(304)},
        {"OpArbitraryFloatCbrtINTEL", static_cast<SpvOp>(5857)},
        {"OpSNegate", static_cast<SpvOp>(126)},
        {"OpArbitraryFloatSqrtINTEL", static_cast<SpvOp>(5859)},
        {"OpEmitMeshTasksEXT", static_cast<SpvOp>(5294)},
        {"OpSUDot", static_cast<SpvOp>(4452)},
        {"OpArbitraryFloatPowNINTEL", static_cast<SpvOp>(5882)},
        {"OpAsmTargetINTEL", static_cast<SpvOp>(5609)},
        {"OpMatrixTimesScalar", static_cast<SpvOp>(143)},
        {"OpCopyMemorySized", static_cast<SpvOp>(64)},
        {"OpFunction", static_cast<SpvOp>(54)},
        {"OpRestoreMemoryINTEL", static_cast<SpvOp>(5820)},
        {"OpLoopMerge", static_cast<SpvOp>(246)},
        {"OpCompositeConstruct", static_cast<SpvOp>(80)},
        {"OpCommitWritePipe", static_cast<SpvOp>(281)},
        {"OpModuleProcessed", static_cast<SpvOp>(330)},
        {"OpGroupIMulKHR", static_cast<SpvOp>(6401)},
        {"OpHitObjectIsMissNV", static_cast<SpvOp>(5278)},
        {"OpInBoundsAccessChain", static_cast<SpvOp>(66)},
        {"OpFixedSinCosINTEL", static_cast<SpvOp>(5928)},
        {"OpVariable", static_cast<SpvOp>(59)},
        {"OpCooperativeMatrixMulAddKHR", static_cast<SpvOp>(4459)},
        {"OpUConvert", static_cast<SpvOp>(113)},
        {"OpIsNan", static_cast<SpvOp>(156)},
        {"OpGenericCastToPtr", static_cast<SpvOp>(122)},
        {"OpBitwiseXor", static_cast<SpvOp>(198)},
        {"OpGroupFAddNonUniformAMD", static_cast<SpvOp>(5001)},
        {"OpIAverageRoundedINTEL", static_cast<SpvOp>(5593)},
        {"OpSubgroupAvcMceConvertToImeResultINTEL", static_cast<SpvOp>(5733)},
        {"OpGroupIAdd", static_cast<SpvOp>(264)},
        {"OpSubgroupShuffleINTEL", static_cast<SpvOp>(5571)},
        {"OpHitObjectGetInstanceIdNV", static_cast<SpvOp>(5270)},
        {"OpIAddCarry", static_cast<SpvOp>(149)},
        {"OpSelectionMerge", static_cast<SpvOp>(247)},
        {"OpEmitStreamVertex", static_cast<SpvOp>(220)},
        {"OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL", static_cast<SpvOp>(5755)},
        {"OpGroupNonUniformUMax", static_cast<SpvOp>(357)},
        {"OpTypeVector", static_cast<SpvOp>(23)},
        {"OpGetNumPipePackets", static_cast<SpvOp>(283)},
        {"OpAbsISubINTEL", static_cast<SpvOp>(5587)},
        {"OpImageSparseGather", static_cast<SpvOp>(314)},
        {"OpImageWrite", static_cast<SpvOp>(99)},
        {"OpUnordered", static_cast<SpvOp>(163)},
        {"OpRayQueryGetIntersectionWorldToObjectKHR", static_cast<SpvOp>(6032)},
        {"OpImageQueryLevels", static_cast<SpvOp>(106)},
        {"OpReleaseEvent", static_cast<SpvOp>(298)},
        {"OpEndStreamPrimitive", static_cast<SpvOp>(221)},
        {"OpSubgroupAvcImeEvaluateWithDualReferenceINTEL", static_cast<SpvOp>(5758)},
        {"OpFragmentFetchAMD", static_cast<SpvOp>(5012)},
        {"OpImageSparseRead", static_cast<SpvOp>(320)},
        {"OpFixedSqrtINTEL", static_cast<SpvOp>(5923)},
        {"OpFixedSinCosPiINTEL", static_cast<SpvOp>(5931)},
        {"OpSubgroupAvcMceSetAcOnlyHaarINTEL", static_cast<SpvOp>(5728)},
        {"OpHitObjectGetRayTMaxNV", static_cast<SpvOp>(5274)},
        {"OpTypeVoid", static_cast<SpvOp>(19)},
        {"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL", static_cast<SpvOp>(5774)},
        {"OpAtomicExchange", static_cast<SpvOp>(229)},
        {"OpExtension", static_cast<SpvOp>(10)},
        {"OpQuantizeToF16", static_cast<SpvOp>(116)},
        {"OpHitObjectGetCurrentTimeNV", static_cast<SpvOp>(5265)},
        {"OpGroupNonUniformLogicalXor", static_cast<SpvOp>(364)},
        {"OpTypeCooperativeMatrixNV", static_cast<SpvOp>(5358)},
        {"OpRayQueryGetIntersectionBarycentricsKHR", static_cast<SpvOp>(6024)},
        {"OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL", static_cast<SpvOp>(5715)},
        {"OpAtomicUMax", static_cast<SpvOp>(239)},
        {"OpAtomicIIncrement", static_cast<SpvOp>(232)},
        {"OpFUnordGreaterThanEqual", static_cast<SpvOp>(191)},
        {"OpCopyLogical", static_cast<SpvOp>(400)},
        {"OpConstantPipeStorage", static_cast<SpvOp>(323)},
        {"OpConvertSamplerToUNV", static_cast<SpvOp>(5394)},
        {"OpAtomicUMin", static_cast<SpvOp>(237)},
        {"OpConvertImageToUNV", static_cast<SpvOp>(5393)},
        {"OpGroupNonUniformIMul", static_cast<SpvOp>(351)},
        {"OpSubgroupAvcSicGetInterRawSadsINTEL", static_cast<SpvOp>(5816)},
        {"OpLessOrGreater", static_cast<SpvOp>(161)},
        {"OpFixedCosINTEL", static_cast<SpvOp>(5927)},
        {"OpArbitraryFloatLog1pINTEL", static_cast<SpvOp>(5863)},
        {"OpRayQueryGetIntersectionPrimitiveIndexKHR", static_cast<SpvOp>(6023)},
        {"OpSubgroupAvcMceGetInterDirectionsINTEL", static_cast<SpvOp>(5743)},
        {"OpImageTexelPointer", static_cast<SpvOp>(60)},
        {"OpSubgroupAvcMceGetInterReferenceIdsINTEL", static_cast<SpvOp>(5745)},
        {"OpUMul32x16INTEL", static_cast<SpvOp>(5598)},
        {"OpReservedReadPipe", static_cast<SpvOp>(276)},
        {"OpLogicalEqual", static_cast<SpvOp>(164)},
        {"OpAtomicCompareExchange", static_cast<SpvOp>(230)},
        {"OpUCountLeadingZerosINTEL", static_cast<SpvOp>(5585)},
        {"OpSubgroupAvcSicInitializeINTEL", static_cast<SpvOp>(5791)},
        {"OpImageSparseTexelsResident", static_cast<SpvOp>(316)},
        {"OpLogicalAnd", static_cast<SpvOp>(167)},
        {"OpSLessThanEqual", static_cast<SpvOp>(179)},
        {"OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL", static_cast<SpvOp>(5761)},
        {"OpNot", static_cast<SpvOp>(200)},
        {"OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL", static_cast<SpvOp>(5806)},
        {"OpSubgroupAvcSicConfigureIpeLumaINTEL", static_cast<SpvOp>(5793)},
        {"OpSatConvertSToU", static_cast<SpvOp>(118)},
        {"OpSubgroupAvcImeConvertToMceResultINTEL", static_cast<SpvOp>(5765)},
        {"OpSignBitSet", static_cast<SpvOp>(160)},
        {"OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL", static_cast<SpvOp>(5746)},
        {"OpImageSparseSampleDrefImplicitLod", static_cast<SpvOp>(307)},
        {"OpArbitraryFloatExp2INTEL", static_cast<SpvOp>(5865)},
        {"OpIgnoreIntersectionNV", static_cast<SpvOp>(5335)},
        {"OpUDotKHR", static_cast<SpvOp>(4451)},
        {"OpHitObjectGetShaderRecordBufferHandleNV", static_cast<SpvOp>(5257)},
        {"OpSubgroupShuffleUpINTEL", static_cast<SpvOp>(5573)},
        {"OpTranspose", static_cast<SpvOp>(84)},
        {"OpSGreaterThanEqual", static_cast<SpvOp>(175)},
        {"OpCooperativeMatrixMulAddNV", static_cast<SpvOp>(5361)},
        {"OpSDotKHR", static_cast<SpvOp>(4450)},
        {"OpTypeAvcSicPayloadINTEL", static_cast<SpvOp>(5703)},
        {"OpSubgroupAllKHR", static_cast<SpvOp>(4428)},
        {"OpAliasScopeDeclINTEL", static_cast<SpvOp>(5912)},
        {"OpCaptureEventProfilingInfo", static_cast<SpvOp>(302)},
        {"OpGroupNonUniformSMax", static_cast<SpvOp>(356)},
        {"OpGroupBitwiseOrKHR", static_cast<SpvOp>(6404)},
        {"OpSubgroupAvcImeConvertToMcePayloadINTEL", static_cast<SpvOp>(5752)},
        {"OpUAverageRoundedINTEL", static_cast<SpvOp>(5594)},
        {"OpSubgroupAvcSicConfigureIpeLumaChromaINTEL", static_cast<SpvOp>(5794)},
        {"OpTypeVmeImageINTEL", static_cast<SpvOp>(5700)},
        {"OpCreateUserEvent", static_cast<SpvOp>(299)},
        {"OpSubgroupShuffleXorINTEL", static_cast<SpvOp>(5574)},
        {"OpTypeEvent", static_cast<SpvOp>(34)},
        {"OpConvertUToSampledImageNV", static_cast<SpvOp>(5395)},
        {"OpImageSparseSampleProjDrefExplicitLod", static_cast<SpvOp>(312)},
        {"OpRetainEvent", static_cast<SpvOp>(297)},
        {"OpMatrixTimesMatrix", static_cast<SpvOp>(146)},
        {"OpLabel", static_cast<SpvOp>(248)},
        {"OpLogicalOr", static_cast<SpvOp>(166)},
        {"OpImageSampleProjDrefExplicitLod", static_cast<SpvOp>(94)},
        {"OpTraceNV", static_cast<SpvOp>(5337)},
        {"OpAll", static_cast<SpvOp>(155)},
        {"OpEndPrimitive", static_cast<SpvOp>(219)},
        {"OpSubgroupReadInvocationKHR", static_cast<SpvOp>(4432)},
        {"OpPtrEqual", static_cast<SpvOp>(401)},
        {"OpControlBarrierWaitINTEL", static_cast<SpvOp>(6143)},
        {"OpFixedExpINTEL", static_cast<SpvOp>(5933)},
        {"OpArbitraryFloatGEINTEL", static_cast<SpvOp>(5851)},
        {"OpTraceRayMotionNV", static_cast<SpvOp>(5339)},
        {"OpImageQueryLod", static_cast<SpvOp>(105)},
        {"OpTypeBufferSurfaceINTEL", static_cast<SpvOp>(6086)},
        {"OpFwidthFine", static_cast<SpvOp>(212)},
        {"OpWritePackedPrimitiveIndices4x8NV", static_cast<SpvOp>(5299)},
        {"OpArbitraryFloatMulINTEL", static_cast<SpvOp>(5848)},
        {"OpTypeStruct", static_cast<SpvOp>(30)},
        {"OpTypeReserveId", static_cast<SpvOp>(36)},
        {"OpISub", static_cast<SpvOp>(130)},
        {"OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL", static_cast<SpvOp>(5723)},
        {"OpRayQueryGenerateIntersectionKHR", static_cast<SpvOp>(4475)},
        {"OpISubSatINTEL", static_cast<SpvOp>(5595)},
        {"OpMemoryBarrier", static_cast<SpvOp>(225)},
        {"OpCopyObject", static_cast<SpvOp>(83)},
        {"OpSubgroupImageBlockWriteINTEL", static_cast<SpvOp>(5578)},
        {"OpTypeAvcImeSingleReferenceStreaminINTEL", static_cast<SpvOp>(5709)},
        {"OpArbitraryFloatACosPiINTEL", static_cast<SpvOp>(5876)},
        {"OpEnqueueMarker", static_cast<SpvOp>(291)},
        {"OpDemoteToHelperInvocationEXT", static_cast<SpvOp>(5380)},
        {"OpAtomicStore", static_cast<SpvOp>(228)},
        {"OpTerminateRayKHR", static_cast<SpvOp>(4449)},
        {"OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL", static_cast<SpvOp>(5789)},
        {"OpArbitraryFloatASinINTEL", static_cast<SpvOp>(5873)},
        {"OpArbitraryFloatATanPiINTEL", static_cast<SpvOp>(5878)},
        {"OpCooperativeMatrixLengthNV", static_cast<SpvOp>(5362)},
        {"OpDPdxFine", static_cast<SpvOp>(210)},
        {"OpHitObjectGetObjectRayOriginNV", static_cast<SpvOp>(5255)},
        {"OpGroupUMin", static_cast<SpvOp>(267)},
        {"OpHitObjectRecordEmptyNV", static_cast<SpvOp>(5259)},
        {"OpGroupAny", static_cast<SpvOp>(262)},
        {"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL", static_cast<SpvOp>(5772)},
        {"OpConvertSampledImageToUNV", static_cast<SpvOp>(5396)},
        {"OpImageSampleImplicitLod", static_cast<SpvOp>(87)},
        {"OpHitObjectGetObjectRayDirectionNV", static_cast<SpvOp>(5254)},
        {"OpImageQueryOrder", static_cast<SpvOp>(102)},
        {"OpImageSparseSampleExplicitLod", static_cast<SpvOp>(306)},
        {"OpSDot", static_cast<SpvOp>(4450)},
        {"OpSubgroupAvcMceConvertToSicPayloadINTEL", static_cast<SpvOp>(5736)},
        {"OpMemberName", static_cast<SpvOp>(6)},
        {"OpGroupNonUniformSMin", static_cast<SpvOp>(353)},
        {"OpReportIntersectionKHR", static_cast<SpvOp>(5334)},
        {"OpSubgroupAvcSicEvaluateIpeINTEL", static_cast<SpvOp>(5803)},
        {"OpSizeOf", static_cast<SpvOp>(321)},
        {"OpImageGather", static_cast<SpvOp>(96)},
        {"OpRayQueryGetIntersectionGeometryIndexKHR", static_cast<SpvOp>(6022)},
        {"OpHitObjectGetPrimitiveIndexNV", static_cast<SpvOp>(5268)},
        {"OpIsValidReserveId", static_cast<SpvOp>(282)},
        {"OpReadPipe", static_cast<SpvOp>(274)},
        {"OpHitObjectGetRayTMinNV", static_cast<SpvOp>(5275)},
        {"OpRayQueryGetIntersectionTKHR", static_cast<SpvOp>(6018)},
        {"OpTypeQueue", static_cast<SpvOp>(37)},
        {"OpGroupSMax", static_cast<SpvOp>(271)},
        {"OpSubgroupAvcRefSetBilinearFilterEnableINTEL", static_cast<SpvOp>(5785)},
        {"OpSubgroupAvcImeSetMaxMotionVectorCountINTEL", static_cast<SpvOp>(5753)},
        {"OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL", static_cast<SpvOp>(5807)},
        {"OpImageSparseSampleDrefExplicitLod", static_cast<SpvOp>(308)},
        {"OpRayQueryTerminateKHR", static_cast<SpvOp>(4474)},
        {"OpBitcast", static_cast<SpvOp>(124)},
        {"OpTypeAvcImeDualReferenceStreaminINTEL", static_cast<SpvOp>(5710)},
        {"OpExecuteCallableNV", static_cast<SpvOp>(5344)},
        {"OpImageBoxFilterQCOM", static_cast<SpvOp>(4481)},
        {"OpGroupWaitEvents", static_cast<SpvOp>(260)},
        {"OpSubgroupBallotKHR", static_cast<SpvOp>(4421)},
        {"OpGroupNonUniformShuffleUp", static_cast<SpvOp>(347)},
        {"OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL", static_cast<SpvOp>(5762)},
        {"OpSubgroupAvcImeGetBorderReachedINTEL", static_cast<SpvOp>(5776)},
        {"OpBitFieldInsert", static_cast<SpvOp>(201)},
        {"OpRayQueryGetIntersectionObjectRayDirectionKHR", static_cast<SpvOp>(6027)},
        {"OpImageSparseDrefGather", static_cast<SpvOp>(315)},
        {"OpGroupFMaxNonUniformAMD", static_cast<SpvOp>(5005)},
        {"OpAtomicAnd", static_cast<SpvOp>(240)},
        {"OpTypeAvcImeResultINTEL", static_cast<SpvOp>(5706)},
        {"OpGroupNonUniformBitwiseOr", static_cast<SpvOp>(360)},
        {"OpBitwiseOr", static_cast<SpvOp>(197)},
        {"OpDemoteToHelperInvocation", static_cast<SpvOp>(5380)},
        {"OpSubgroupAvcBmeInitializeINTEL", static_cast<SpvOp>(5782)},
        {"OpFunctionEnd", static_cast<SpvOp>(56)},
        {"OpFOrdGreaterThan", static_cast<SpvOp>(186)},
        {"OpImage", static_cast<SpvOp>(100)},
        {"OpHitObjectRecordHitWithIndexMotionNV", static_cast<SpvOp>(5250)},
        {"OpArbitraryFloatLog2INTEL", static_cast<SpvOp>(5861)},
        {"OpUMulExtended", static_cast<SpvOp>(151)},
        {"OpGroupReserveReadPipePackets", static_cast<SpvOp>(285)},
        {"OpHitObjectIsHitNV", static_cast<SpvOp>(5277)},
        {"OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL", static_cast<SpvOp>(5815)},
        {"OpSMod", static_cast<SpvOp>(139)},
        {"OpRayQueryGetRayFlagsKHR", static_cast<SpvOp>(6017)},
        {"OpAtomicIDecrement", static_cast<SpvOp>(233)},
        {"OpSubgroupAvcFmeInitializeINTEL", static_cast<SpvOp>(5781)},
        {"OpGetMaxPipePackets", static_cast<SpvOp>(284)},
        {"OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL", static_cast<SpvOp>(5799)},
        {"OpReturn", static_cast<SpvOp>(253)},
        {"OpSamplerImageAddressingModeNV", static_cast<SpvOp>(5397)},
        {"OpUDot", static_cast<SpvOp>(4451)},
        {"OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL", static_cast<SpvOp>(5719)},
        {"OpExtInstImport", static_cast<SpvOp>(11)},
        {"OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL", static_cast<SpvOp>(5764)},
        {"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL", static_cast<SpvOp>(5773)},
        {"OpFSub", static_cast<SpvOp>(131)},
        {"OpAny", static_cast<SpvOp>(154)},
        {"OpSubgroupAvcImeRefWindowSizeINTEL", static_cast<SpvOp>(5750)},
        {"OpGroupLogicalXorKHR", static_cast<SpvOp>(6408)},
        {"OpDPdy", static_cast<SpvOp>(208)},
        {"OpGroupSMin", static_cast<SpvOp>(268)},
        {"OpCooperativeMatrixStoreKHR", static_cast<SpvOp>(4458)},
        {"OpRayQueryInitializeKHR", static_cast<SpvOp>(4473)},
        {"OpVectorExtractDynamic", static_cast<SpvOp>(77)},
        {"OpShiftRightLogical", static_cast<SpvOp>(194)},
        {"OpSubgroupAvcImeGetSingleReferenceStreaminINTEL", static_cast<SpvOp>(5766)},
        {"OpAtomicISub", static_cast<SpvOp>(235)},
        {"OpGroupFMulKHR", static_cast<SpvOp>(6402)},
        {"OpUDiv", static_cast<SpvOp>(134)},
        {"OpConstantFunctionPointerINTEL", static_cast<SpvOp>(5600)},
        {"OpGroupNonUniformBroadcastFirst", static_cast<SpvOp>(338)},
        {"OpGroupBroadcast", static_cast<SpvOp>(263)},
        {"OpSpecConstantFalse", static_cast<SpvOp>(49)},
        {"OpGroupNonUniformLogicalAnd", static_cast<SpvOp>(362)},
        {"OpSubgroupAvcMceGetMotionVectorsINTEL", static_cast<SpvOp>(5738)},
        {"OpGroupNonUniformBallot", static_cast<SpvOp>(339)},
        {"OpSubgroupAvcMceConvertToSicResultINTEL", static_cast<SpvOp>(5737)},
        {"OpArbitraryFloatSubINTEL", static_cast<SpvOp>(5847)},
        {"OpAtomicFMinEXT", static_cast<SpvOp>(5614)},
        {"OpBranchConditional", static_cast<SpvOp>(250)},
        {"OpTypeSampledImage", static_cast<SpvOp>(27)},
        {"OpFPGARegINTEL", static_cast<SpvOp>(5949)},
        {"OpBeginInvocationInterlockEXT", static_cast<SpvOp>(5364)},
        {"OpGroupNonUniformBroadcast", static_cast<SpvOp>(337)},
        {"OpAtomicFlagTestAndSet", static_cast<SpvOp>(318)},
        {"OpPtrAccessChain", static_cast<SpvOp>(67)},
        {"OpTypeSampler", static_cast<SpvOp>(26)},
        {"OpImageSampleDrefImplicitLod", static_cast<SpvOp>(89)},
        {"OpShiftRightArithmetic", static_cast<SpvOp>(195)},
        {"OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL", static_cast<SpvOp>(5788)},
        {"OpMemberDecorate", static_cast<SpvOp>(72)},
        {"OpMemoryModel", static_cast<SpvOp>(14)},
        {"OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL", static_cast<SpvOp>(5779)},
        {"OpSubgroupAvcMceGetInterDistortionsINTEL", static_cast<SpvOp>(5739)},
        {"OpNop", static_cast<SpvOp>(0)},
        {"OpDPdyCoarse", static_cast<SpvOp>(214)},
        {"OpArbitraryFloatEQINTEL", static_cast<SpvOp>(5854)},
        {"OpReturnValue", static_cast<SpvOp>(254)},
        {"OpGroupNonUniformElect", static_cast<SpvOp>(333)},
        {"OpSubgroupAvcImeStripDualReferenceStreamoutINTEL", static_cast<SpvOp>(5769)},
        {"OpTypeFloat", static_cast<SpvOp>(22)},
        {"OpGroupBitwiseAndKHR", static_cast<SpvOp>(6403)},
        {"OpTypePointer", static_cast<SpvOp>(32)},
        {"OpMatrixTimesVector", static_cast<SpvOp>(145)},
        {"OpAccessChain", static_cast<SpvOp>(65)},
        {"OpCapability", static_cast<SpvOp>(17)},
        {"OpTypeNamedBarrier", static_cast<SpvOp>(327)},
        {"OpConvertBF16ToFINTEL", static_cast<SpvOp>(6117)},
        {"OpAtomicSMax", static_cast<SpvOp>(238)},
        {"OpImageSparseSampleProjDrefImplicitLod", static_cast<SpvOp>(311)},
        {"OpStencilAttachmentReadEXT", static_cast<SpvOp>(4162)},
        {"OpConvertFToU", static_cast<SpvOp>(109)},
        {"OpSubgroupAvcRefConvertToMcePayloadINTEL", static_cast<SpvOp>(5783)},
        {"OpReserveWritePipePackets", static_cast<SpvOp>(279)},
        {"OpRayQueryGetRayTMinKHR", static_cast<SpvOp>(6016)},
        {"OpIMul32x16INTEL", static_cast<SpvOp>(5597)},
        {"OpGetDefaultQueue", static_cast<SpvOp>(303)},
        {"OpReserveReadPipePackets", static_cast<SpvOp>(278)},
        {"OpGetKernelPreferredWorkGroupSizeMultiple", static_cast<SpvOp>(296)},
        {"OpSpecConstant", static_cast<SpvOp>(50)},
        {"OpAtomicIAdd", static_cast<SpvOp>(234)},
        {"OpSubgroupAvcSicConfigureSkcINTEL", static_cast<SpvOp>(5792)},
        {"OpSaveMemoryINTEL", static_cast<SpvOp>(5819)},
        {"OpSubgroupAvcImeInitializeINTEL", static_cast<SpvOp>(5747)},
        {"OpFixedCosPiINTEL", static_cast<SpvOp>(5930)},
        {"OpAtomicLoad", static_cast<SpvOp>(227)},
        {"OpTypeForwardPointer", static_cast<SpvOp>(39)},
        {"OpTypeAccelerationStructureNV", static_cast<SpvOp>(5341)},
        {"OpUDotAccSatKHR", static_cast<SpvOp>(4454)},
        {"OpSubgroupFirstInvocationKHR", static_cast<SpvOp>(4422)},
        {"OpDPdyFine", static_cast<SpvOp>(211)},
        {"OpConvertUToSamplerNV", static_cast<SpvOp>(5392)},
        {"OpArbitraryFloatATanINTEL", static_cast<SpvOp>(5877)},
        {"OpTerminateInvocation", static_cast<SpvOp>(4416)},
        {"OpUAddSatINTEL", static_cast<SpvOp>(5590)},
        {"OpLoopControlINTEL", static_cast<SpvOp>(5887)},
        {"OpGroupLogicalOrKHR", static_cast<SpvOp>(6407)},
        {"OpArbitraryFloatPowRINTEL", static_cast<SpvOp>(5881)},
        {"OpRayQueryGetIntersectionTriangleVertexPositionsKHR", static_cast<SpvOp>(5340)},
        {"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL", static_cast<SpvOp>(5775)},
        {"OpSubgroupAllEqualKHR", static_cast<SpvOp>(4430)},
        {"OpSubgroupBlockReadINTEL", static_cast<SpvOp>(5575)},
        {"OpImageSampleProjExplicitLod", static_cast<SpvOp>(92)},
        {"OpPhi", static_cast<SpvOp>(245)},
        {"OpReadPipeBlockingINTEL", static_cast<SpvOp>(5946)},
        {"OpDPdx", static_cast<SpvOp>(207)},
        {"OpSubgroupAvcMceSetInterShapePenaltyINTEL", static_cast<SpvOp>(5716)},
        {"OpGroupUMaxNonUniformAMD", static_cast<SpvOp>(5006)},
        {"OpTypeMatrix", static_cast<SpvOp>(24)},
        {"OpMemberDecorateStringGOOGLE", static_cast<SpvOp>(5633)},
        {"OpGroupNonUniformShuffleDown", static_cast<SpvOp>(348)},
        {"OpConvertUToAccelerationStructureKHR", static_cast<SpvOp>(4447)},
        {"OpName", static_cast<SpvOp>(5)},
        {"OpSDiv", static_cast<SpvOp>(135)},
        {"OpSubgroupAvcMceGetInterMajorShapeINTEL", static_cast<SpvOp>(5741)},
        {"OpReorderThreadWithHintNV", static_cast<SpvOp>(5280)},
        {"OpArbitraryFloatHypotINTEL", static_cast<SpvOp>(5858)},
        {"OpTypeAccelerationStructureKHR", static_cast<SpvOp>(5341)},
        {"OpImageRead", static_cast<SpvOp>(98)},
        {"OpGroupSMinNonUniformAMD", static_cast<SpvOp>(5004)},
        {"OpPtrCastToGeneric", static_cast<SpvOp>(121)},
        {"OpTypeHitObjectNV", static_cast<SpvOp>(5281)},
        {"OpLogicalNotEqual", static_cast<SpvOp>(165)},
        {"OpConvertUToImageNV", static_cast<SpvOp>(5391)},
        {"OpBitReverse", static_cast<SpvOp>(204)},
        {"OpAsmINTEL", static_cast<SpvOp>(5610)},
        {"OpHitObjectRecordMissNV", static_cast<SpvOp>(5263)},
        {"OpIAdd", static_cast<SpvOp>(128)},
        {"OpSubgroupAvcSicSetBilinearFilterEnableINTEL", static_cast<SpvOp>(5800)},
        {"OpImageBlockMatchSSDQCOM", static_cast<SpvOp>(4482)},
        {"OpTypeFunction", static_cast<SpvOp>(33)},
        {"OpSMulExtended", static_cast<SpvOp>(152)},
        {"OpConstantTrue", static_cast<SpvOp>(41)},
        {"OpSubgroupAvcSicGetIpeChromaModeINTEL", static_cast<SpvOp>(5813)},
        {"OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL", static_cast<SpvOp>(5814)},
        {"OpCreatePipeFromPipeStorage", static_cast<SpvOp>(324)},
        {"OpImageSparseSampleProjImplicitLod", static_cast<SpvOp>(309)},
        {"OpExtInst", static_cast<SpvOp>(12)},
        {"OpHitObjectRecordHitMotionNV", static_cast<SpvOp>(5249)},
        {"OpReportIntersectionNV", static_cast<SpvOp>(5334)},
        {"OpArbitraryFloatCastINTEL", static_cast<SpvOp>(5841)},
        {"OpGroupFMax", static_cast<SpvOp>(269)},
        {"OpSubgroupAvcMceConvertToRefResultINTEL", static_cast<SpvOp>(5735)},
        {"OpCrossWorkgroupCastToPtrINTEL", static_cast<SpvOp>(5938)},
        {"OpConstantSampler", static_cast<SpvOp>(45)},
        {"OpTypeOpaque", static_cast<SpvOp>(31)},
        {"OpDepthAttachmentReadEXT", static_cast<SpvOp>(4161)},
        {"OpHitObjectRecordHitNV", static_cast<SpvOp>(5261)},
        {"OpSRem", static_cast<SpvOp>(138)},
        {"OpAliasDomainDeclINTEL", static_cast<SpvOp>(5911)},
        {"OpTerminateRayNV", static_cast<SpvOp>(5336)},
        {"OpRayQueryProceedKHR", static_cast<SpvOp>(4477)},
        {"OpFOrdLessThan", static_cast<SpvOp>(184)},
        {"OpIsInf", static_cast<SpvOp>(157)},
        {"OpDecorateStringGOOGLE", static_cast<SpvOp>(5632)},
        {"OpHitObjectGetWorldRayOriginNV", static_cast<SpvOp>(5273)},
        {"OpImageSampleProjDrefImplicitLod", static_cast<SpvOp>(93)},
        {"OpArbitraryFloatExp10INTEL", static_cast<SpvOp>(5866)},
        {"OpColorAttachmentReadEXT", static_cast<SpvOp>(4160)},
        {"OpLoad", static_cast<SpvOp>(61)},
        {"OpArbitraryFloatSinPiINTEL", static_cast<SpvOp>(5871)},
        {"OpOrdered", static_cast<SpvOp>(162)},
        {"OpSubgroupAnyKHR", static_cast<SpvOp>(4429)},
        {"OpConvertUToPtr", static_cast<SpvOp>(120)},
        {"OpFixedSinPiINTEL", static_cast<SpvOp>(5929)},
        {"OpTypePipe", static_cast<SpvOp>(38)},
        {"OpImageQuerySamples", static_cast<SpvOp>(107)},
        {"OpTypeBool", static_cast<SpvOp>(20)},
        {"OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL", static_cast<SpvOp>(5722)},
        {"OpGroupNonUniformShuffleXor", static_cast<SpvOp>(346)},
        {"OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL", static_cast<SpvOp>(5786)},
        {"OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL", static_cast<SpvOp>(5804)},
        {"OpFOrdGreaterThanEqual", static_cast<SpvOp>(190)},
        {"OpConstantFalse", static_cast<SpvOp>(42)},
        {"OpSubgroupAvcImeAdjustRefOffsetINTEL", static_cast<SpvOp>(5751)},
        {"OpFOrdLessThanEqual", static_cast<SpvOp>(188)},
        {"OpConvertSToF", static_cast<SpvOp>(111)},
        {"OpArbitraryFloatATan2INTEL", static_cast<SpvOp>(5879)},
        {"OpSUDotKHR", static_cast<SpvOp>(4452)},
        {"OpDot", static_cast<SpvOp>(148)},
        {"OpGroupNonUniformAllEqual", static_cast<SpvOp>(336)},
        {"OpArbitraryFloatExpm1INTEL", static_cast<SpvOp>(5867)},
        {"OpWritePipeBlockingINTEL", static_cast<SpvOp>(5947)},
        {"OpArbitraryFloatAddINTEL", static_cast<SpvOp>(5846)},
        {"OpImageSampleDrefExplicitLod", static_cast<SpvOp>(90)},
    };

    static const auto hash = [](const UnownedStringSlice& str, UInt32 salt){
        return combineHash(getHashCode(str), getHashCode(salt)) % 718;
    };

    const auto i = hash(str, tableSalt[hash(str, 0)]);
    if(str == words[i].first)
    {
        value = words[i].second;
        return true;
    }
    else
    {
        return false;
    }
}

static bool lookupSpvCapability(const UnownedStringSlice& str, SpvCapability& value)
{
    static const unsigned tableSalt[245] = {
        0, 4, 0, 0, 1, 0, 4, 0, 4, 7, 2, 0, 0, 0, 0, 1,
        2, 6, 0, 1, 4, 0, 0, 1, 1, 1, 0, 1, 0, 0, 4, 1,
        1, 1, 0, 0, 3, 0, 1, 1, 0, 0, 7, 1, 1, 2, 6, 7,
        3, 0, 4, 0, 0, 1, 0, 0, 6, 2, 0, 0, 3, 0, 0, 0,
        0, 3, 0, 0, 1, 12, 0, 1, 2, 0, 6, 2, 0, 1, 5, 1,
        5, 1, 0, 6, 12, 0, 5, 9, 2, 11, 0, 0, 3, 2, 1, 0,
        6, 0, 1, 1, 1, 3, 1, 0, 0, 0, 1, 5, 2, 1, 0, 9,
        3, 3, 0, 1, 1, 0, 6, 0, 0, 0, 1, 0, 2, 3, 0, 1,
        2, 2, 6, 4, 2, 0, 3, 2, 5, 7, 5, 3, 2, 2, 0, 1,
        1, 13, 13, 1, 0, 1, 0, 0, 0, 1, 0, 16, 2, 0, 4, 13,
        5, 1, 2, 3, 0, 10, 2, 8, 4, 0, 5, 1, 11, 6, 0, 7,
        18, 10, 0, 55, 4, 12, 0, 0, 0, 1, 5, 0, 13, 13, 0, 2,
        3, 0, 0, 0, 3, 1, 81, 1, 0, 0, 2, 23, 8, 0, 1, 11,
        0, 13, 5, 0, 52, 12, 0, 0, 2, 8, 0, 7, 0, 8, 15, 11,
        10, 72, 125, 0, 0, 36, 16, 1, 318, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 10, 10, 8
    };

    using KV = std::pair<const char*, SpvCapability>;

    static const KV words[245] =
    {
        {"UniformDecoration", static_cast<SpvCapability>(71)},
        {"ComputeDerivativeGroupLinearNV", static_cast<SpvCapability>(5350)},
        {"InputAttachmentArrayNonUniformIndexing", static_cast<SpvCapability>(5310)},
        {"DenormFlushToZero", static_cast<SpvCapability>(4465)},
        {"Shader", static_cast<SpvCapability>(1)},
        {"AsmINTEL", static_cast<SpvCapability>(5606)},
        {"ArbitraryPrecisionIntegersINTEL", static_cast<SpvCapability>(5844)},
        {"VulkanMemoryModel", static_cast<SpvCapability>(5345)},
        {"SampledCubeArray", static_cast<SpvCapability>(45)},
        {"SubgroupDispatch", static_cast<SpvCapability>(58)},
        {"ShaderClockKHR", static_cast<SpvCapability>(5055)},
        {"Image1D", static_cast<SpvCapability>(44)},
        {"UniformBufferArrayNonUniformIndexing", static_cast<SpvCapability>(5306)},
        {"UniformTexelBufferArrayDynamicIndexing", static_cast<SpvCapability>(5304)},
        {"VulkanMemoryModelDeviceScope", static_cast<SpvCapability>(5346)},
        {"FPFastMathModeINTEL", static_cast<SpvCapability>(5837)},
        {"GroupNonUniformRotateKHR", static_cast<SpvCapability>(6026)},
        {"DerivativeControl", static_cast<SpvCapability>(51)},
        {"AtomicStorageOps", static_cast<SpvCapability>(4445)},
        {"ImageRect", static_cast<SpvCapability>(36)},
        {"GroupNonUniformShuffle", static_cast<SpvCapability>(65)},
        {"Linkage", static_cast<SpvCapability>(5)},
        {"SplitBarrierINTEL", static_cast<SpvCapability>(6141)},
        {"StorageBufferArrayNonUniformIndexing", static_cast<SpvCapability>(5308)},
        {"FPGALoopControlsINTEL", static_cast<SpvCapability>(5888)},
        {"InputAttachment", static_cast<SpvCapability>(40)},
        {"SignedZeroInfNanPreserve", static_cast<SpvCapability>(4466)},
        {"WorkgroupMemoryExplicitLayout8BitAccessKHR", static_cast<SpvCapability>(4429)},
        {"StorageBuffer8BitAccess", static_cast<SpvCapability>(4448)},
        {"RayTracingOpacityMicromapEXT", static_cast<SpvCapability>(5381)},
        {"ShaderStereoViewNV", static_cast<SpvCapability>(5259)},
        {"Sampled1D", static_cast<SpvCapability>(43)},
        {"Float16Buffer", static_cast<SpvCapability>(8)},
        {"FPGAClusterAttributesINTEL", static_cast<SpvCapability>(5904)},
        {"NamedBarrier", static_cast<SpvCapability>(59)},
        {"SubgroupAvcMotionEstimationIntraINTEL", static_cast<SpvCapability>(5697)},
        {"FPGALatencyControlINTEL", static_cast<SpvCapability>(6171)},
        {"ShadingRateNV", static_cast<SpvCapability>(5291)},
        {"StorageUniformBufferBlock16", static_cast<SpvCapability>(4433)},
        {"Float64", static_cast<SpvCapability>(10)},
        {"CooperativeMatrixNV", static_cast<SpvCapability>(5357)},
        {"ImageReadWriteLodAMD", static_cast<SpvCapability>(5015)},
        {"StorageBufferArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5308)},
        {"InterpolationFunction", static_cast<SpvCapability>(52)},
        {"FPMaxErrorINTEL", static_cast<SpvCapability>(6169)},
        {"PipeStorage", static_cast<SpvCapability>(60)},
        {"FragmentFullyCoveredEXT", static_cast<SpvCapability>(5265)},
        {"CoreBuiltinsARM", static_cast<SpvCapability>(4165)},
        {"DeviceEnqueue", static_cast<SpvCapability>(19)},
        {"AtomicFloat32AddEXT", static_cast<SpvCapability>(6033)},
        {"FPGAInvocationPipeliningAttributesINTEL", static_cast<SpvCapability>(5916)},
        {"StorageImageArrayNonUniformIndexing", static_cast<SpvCapability>(5309)},
        {"DotProduct", static_cast<SpvCapability>(6019)},
        {"RayTracingPositionFetchKHR", static_cast<SpvCapability>(5336)},
        {"ImageFootprintNV", static_cast<SpvCapability>(5282)},
        {"TileImageColorReadAccessEXT", static_cast<SpvCapability>(4166)},
        {"BindlessTextureNV", static_cast<SpvCapability>(5390)},
        {"DotProductInputAllKHR", static_cast<SpvCapability>(6016)},
        {"GroupNonUniformVote", static_cast<SpvCapability>(62)},
        {"FragmentBarycentricNV", static_cast<SpvCapability>(5284)},
        {"SampleMaskOverrideCoverageNV", static_cast<SpvCapability>(5249)},
        {"DemoteToHelperInvocationEXT", static_cast<SpvCapability>(5379)},
        {"SubgroupBufferBlockIOINTEL", static_cast<SpvCapability>(5569)},
        {"TextureSampleWeightedQCOM", static_cast<SpvCapability>(4484)},
        {"SampledImageArrayDynamicIndexing", static_cast<SpvCapability>(29)},
        {"StorageImageArrayDynamicIndexing", static_cast<SpvCapability>(31)},
        {"InputAttachmentArrayDynamicIndexing", static_cast<SpvCapability>(5303)},
        {"StorageTexelBufferArrayDynamicIndexingEXT", static_cast<SpvCapability>(5305)},
        {"GroupUniformArithmeticKHR", static_cast<SpvCapability>(6400)},
        {"FragmentShaderSampleInterlockEXT", static_cast<SpvCapability>(5363)},
        {"MinLod", static_cast<SpvCapability>(42)},
        {"GroupNonUniform", static_cast<SpvCapability>(61)},
        {"Matrix", static_cast<SpvCapability>(0)},
        {"VariablePointersStorageBuffer", static_cast<SpvCapability>(4441)},
        {"SampledImageArrayNonUniformIndexing", static_cast<SpvCapability>(5307)},
        {"StorageImageExtendedFormats", static_cast<SpvCapability>(49)},
        {"VariablePointers", static_cast<SpvCapability>(4442)},
        {"RayTracingProvisionalKHR", static_cast<SpvCapability>(5353)},
        {"GeometryShaderPassthroughNV", static_cast<SpvCapability>(5251)},
        {"DrawParameters", static_cast<SpvCapability>(4427)},
        {"TessellationPointSize", static_cast<SpvCapability>(23)},
        {"TextureBlockMatchQCOM", static_cast<SpvCapability>(4486)},
        {"WorkgroupMemoryExplicitLayout16BitAccessKHR", static_cast<SpvCapability>(4430)},
        {"SubgroupImageMediaBlockIOINTEL", static_cast<SpvCapability>(5579)},
        {"GroupNonUniformArithmetic", static_cast<SpvCapability>(63)},
        {"AtomicStorage", static_cast<SpvCapability>(21)},
        {"FPGAKernelAttributesINTEL", static_cast<SpvCapability>(5897)},
        {"RuntimeDescriptorArray", static_cast<SpvCapability>(5302)},
        {"CooperativeMatrixKHR", static_cast<SpvCapability>(6022)},
        {"Int64", static_cast<SpvCapability>(11)},
        {"UniformTexelBufferArrayDynamicIndexingEXT", static_cast<SpvCapability>(5304)},
        {"FragmentShadingRateKHR", static_cast<SpvCapability>(4422)},
        {"UniformAndStorageBuffer8BitAccess", static_cast<SpvCapability>(4449)},
        {"UniformTexelBufferArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5311)},
        {"RoundingModeRTE", static_cast<SpvCapability>(4467)},
        {"UniformBufferArrayDynamicIndexing", static_cast<SpvCapability>(28)},
        {"Int8", static_cast<SpvCapability>(39)},
        {"VulkanMemoryModelDeviceScopeKHR", static_cast<SpvCapability>(5346)},
        {"LiteralSampler", static_cast<SpvCapability>(20)},
        {"IndirectReferencesINTEL", static_cast<SpvCapability>(5604)},
        {"USMStorageClassesINTEL", static_cast<SpvCapability>(5935)},
        {"Vector16", static_cast<SpvCapability>(7)},
        {"IOPipesINTEL", static_cast<SpvCapability>(5943)},
        {"VectorComputeINTEL", static_cast<SpvCapability>(5617)},
        {"StoragePushConstant16", static_cast<SpvCapability>(4435)},
        {"GroupNonUniformShuffleRelative", static_cast<SpvCapability>(66)},
        {"ShaderNonUniform", static_cast<SpvCapability>(5301)},
        {"CullDistance", static_cast<SpvCapability>(33)},
        {"ShaderViewportIndexLayerNV", static_cast<SpvCapability>(5254)},
        {"GeometryStreams", static_cast<SpvCapability>(54)},
        {"DotProductInputAll", static_cast<SpvCapability>(6016)},
        {"GenericPointer", static_cast<SpvCapability>(38)},
        {"DotProductInput4x8BitPackedKHR", static_cast<SpvCapability>(6018)},
        {"PhysicalStorageBufferAddresses", static_cast<SpvCapability>(5347)},
        {"FragmentMaskAMD", static_cast<SpvCapability>(5010)},
        {"SubgroupVoteKHR", static_cast<SpvCapability>(4431)},
        {"RuntimeAlignedAttributeINTEL", static_cast<SpvCapability>(5939)},
        {"TileImageStencilReadAccessEXT", static_cast<SpvCapability>(4168)},
        {"SubgroupAvcMotionEstimationChromaINTEL", static_cast<SpvCapability>(5698)},
        {"StorageBuffer16BitAccess", static_cast<SpvCapability>(4433)},
        {"RayTracingMotionBlurNV", static_cast<SpvCapability>(5341)},
        {"BFloat16ConversionINTEL", static_cast<SpvCapability>(6115)},
        {"FPGAArgumentInterfacesINTEL", static_cast<SpvCapability>(6174)},
        {"RayQueryProvisionalKHR", static_cast<SpvCapability>(4471)},
        {"FPGAKernelAttributesv2INTEL", static_cast<SpvCapability>(6161)},
        {"Addresses", static_cast<SpvCapability>(4)},
        {"UniformTexelBufferArrayNonUniformIndexing", static_cast<SpvCapability>(5311)},
        {"AtomicFloat64MinMaxEXT", static_cast<SpvCapability>(5613)},
        {"SampledBuffer", static_cast<SpvCapability>(46)},
        {"DebugInfoModuleINTEL", static_cast<SpvCapability>(6114)},
        {"Geometry", static_cast<SpvCapability>(2)},
        {"LongConstantCompositeINTEL", static_cast<SpvCapability>(6089)},
        {"FragmentShaderPixelInterlockEXT", static_cast<SpvCapability>(5378)},
        {"VulkanMemoryModelKHR", static_cast<SpvCapability>(5345)},
        {"ShaderViewportIndex", static_cast<SpvCapability>(70)},
        {"DotProductKHR", static_cast<SpvCapability>(6019)},
        {"Groups", static_cast<SpvCapability>(18)},
        {"UniformAndStorageBuffer16BitAccess", static_cast<SpvCapability>(4434)},
        {"VectorAnyINTEL", static_cast<SpvCapability>(5619)},
        {"InputAttachmentArrayDynamicIndexingEXT", static_cast<SpvCapability>(5303)},
        {"Float16ImageAMD", static_cast<SpvCapability>(5008)},
        {"ShaderViewportIndexLayerEXT", static_cast<SpvCapability>(5254)},
        {"ImageGatherExtended", static_cast<SpvCapability>(25)},
        {"SampleMaskPostDepthCoverage", static_cast<SpvCapability>(4447)},
        {"FragmentBarycentricKHR", static_cast<SpvCapability>(5284)},
        {"TextureBoxFilterQCOM", static_cast<SpvCapability>(4485)},
        {"ShaderSMBuiltinsNV", static_cast<SpvCapability>(5373)},
        {"ImageReadWrite", static_cast<SpvCapability>(14)},
        {"StorageImageMultisample", static_cast<SpvCapability>(27)},
        {"ArbitraryPrecisionFixedPointINTEL", static_cast<SpvCapability>(5922)},
        {"ComputeDerivativeGroupQuadsNV", static_cast<SpvCapability>(5288)},
        {"IntegerFunctions2INTEL", static_cast<SpvCapability>(5584)},
        {"AtomicFloat32MinMaxEXT", static_cast<SpvCapability>(5612)},
        {"BitInstructions", static_cast<SpvCapability>(6025)},
        {"AtomicFloat16MinMaxEXT", static_cast<SpvCapability>(5616)},
        {"SubgroupShuffleINTEL", static_cast<SpvCapability>(5568)},
        {"GroupNonUniformPartitionedNV", static_cast<SpvCapability>(5297)},
        {"SampledRect", static_cast<SpvCapability>(37)},
        {"GroupNonUniformClustered", static_cast<SpvCapability>(67)},
        {"StorageImageReadWithoutFormat", static_cast<SpvCapability>(55)},
        {"ImageBasic", static_cast<SpvCapability>(13)},
        {"FPGARegINTEL", static_cast<SpvCapability>(5948)},
        {"SparseResidency", static_cast<SpvCapability>(41)},
        {"ImageGatherBiasLodAMD", static_cast<SpvCapability>(5009)},
        {"OptNoneINTEL", static_cast<SpvCapability>(6094)},
        {"ShaderLayer", static_cast<SpvCapability>(69)},
        {"StorageImageWriteWithoutFormat", static_cast<SpvCapability>(56)},
        {"Float16", static_cast<SpvCapability>(9)},
        {"FragmentShaderShadingRateInterlockEXT", static_cast<SpvCapability>(5372)},
        {"SubgroupImageBlockIOINTEL", static_cast<SpvCapability>(5570)},
        {"ShaderInvocationReorderNV", static_cast<SpvCapability>(5383)},
        {"PhysicalStorageBufferAddressesEXT", static_cast<SpvCapability>(5347)},
        {"UniformBufferArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5306)},
        {"ShaderViewportMaskNV", static_cast<SpvCapability>(5255)},
        {"DenormPreserve", static_cast<SpvCapability>(4464)},
        {"FPGADSPControlINTEL", static_cast<SpvCapability>(5908)},
        {"SampleRateShading", static_cast<SpvCapability>(35)},
        {"RoundingModeRTZ", static_cast<SpvCapability>(4468)},
        {"Kernel", static_cast<SpvCapability>(6)},
        {"FunctionPointersINTEL", static_cast<SpvCapability>(5603)},
        {"FloatingPointModeINTEL", static_cast<SpvCapability>(5583)},
        {"StorageInputOutput16", static_cast<SpvCapability>(4436)},
        {"AtomicFloat16AddEXT", static_cast<SpvCapability>(6095)},
        {"ImageCubeArray", static_cast<SpvCapability>(34)},
        {"DotProductInput4x8BitPacked", static_cast<SpvCapability>(6018)},
        {"ClipDistance", static_cast<SpvCapability>(32)},
        {"Int64Atomics", static_cast<SpvCapability>(12)},
        {"MultiViewport", static_cast<SpvCapability>(57)},
        {"RayQueryPositionFetchKHR", static_cast<SpvCapability>(5391)},
        {"StencilExportEXT", static_cast<SpvCapability>(5013)},
        {"RuntimeDescriptorArrayEXT", static_cast<SpvCapability>(5302)},
        {"RoundToInfinityINTEL", static_cast<SpvCapability>(5582)},
        {"StorageTexelBufferArrayDynamicIndexing", static_cast<SpvCapability>(5305)},
        {"DotProductInput4x8Bit", static_cast<SpvCapability>(6017)},
        {"UnstructuredLoopControlsINTEL", static_cast<SpvCapability>(5886)},
        {"WorkgroupMemoryExplicitLayoutKHR", static_cast<SpvCapability>(4428)},
        {"TransformFeedback", static_cast<SpvCapability>(53)},
        {"Tessellation", static_cast<SpvCapability>(3)},
        {"SubgroupBallotKHR", static_cast<SpvCapability>(4423)},
        {"ImageMipmap", static_cast<SpvCapability>(15)},
        {"DeviceGroup", static_cast<SpvCapability>(4437)},
        {"Pipes", static_cast<SpvCapability>(17)},
        {"FunctionFloatControlINTEL", static_cast<SpvCapability>(5821)},
        {"RayCullMaskKHR", static_cast<SpvCapability>(6020)},
        {"SampledImageArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5307)},
        {"DemoteToHelperInvocation", static_cast<SpvCapability>(5379)},
        {"MeshShadingEXT", static_cast<SpvCapability>(5283)},
        {"RayTraversalPrimitiveCullingKHR", static_cast<SpvCapability>(4478)},
        {"GroupNonUniformQuad", static_cast<SpvCapability>(68)},
        {"FPGAMemoryAttributesINTEL", static_cast<SpvCapability>(5824)},
        {"GeometryPointSize", static_cast<SpvCapability>(24)},
        {"FPGAMemoryAccessesINTEL", static_cast<SpvCapability>(5898)},
        {"Int16", static_cast<SpvCapability>(22)},
        {"GroupNonUniformBallot", static_cast<SpvCapability>(64)},
        {"Int64ImageEXT", static_cast<SpvCapability>(5016)},
        {"PerViewAttributesNV", static_cast<SpvCapability>(5260)},
        {"ArbitraryPrecisionFloatingPointINTEL", static_cast<SpvCapability>(5845)},
        {"KernelAttributesINTEL", static_cast<SpvCapability>(5892)},
        {"AtomicFloat64AddEXT", static_cast<SpvCapability>(6034)},
        {"FPGABufferLocationINTEL", static_cast<SpvCapability>(5920)},
        {"StorageTexelBufferArrayNonUniformIndexing", static_cast<SpvCapability>(5312)},
        {"ImageBuffer", static_cast<SpvCapability>(47)},
        {"TileImageDepthReadAccessEXT", static_cast<SpvCapability>(4167)},
        {"ImageMSArray", static_cast<SpvCapability>(48)},
        {"StorageTexelBufferArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5312)},
        {"MultiView", static_cast<SpvCapability>(4439)},
        {"InputAttachmentArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5310)},
        {"ExpectAssumeKHR", static_cast<SpvCapability>(5629)},
        {"RayQueryKHR", static_cast<SpvCapability>(4472)},
        {"BlockingPipesINTEL", static_cast<SpvCapability>(5945)},
        {"StorageBufferArrayDynamicIndexing", static_cast<SpvCapability>(30)},
        {"MemoryAccessAliasingINTEL", static_cast<SpvCapability>(5910)},
        {"MeshShadingNV", static_cast<SpvCapability>(5266)},
        {"RayTracingKHR", static_cast<SpvCapability>(4479)},
        {"RayTracingNV", static_cast<SpvCapability>(5340)},
        {"StorageUniform16", static_cast<SpvCapability>(4434)},
        {"DotProductInput4x8BitKHR", static_cast<SpvCapability>(6017)},
        {"StoragePushConstant8", static_cast<SpvCapability>(4450)},
        {"VariableLengthArrayINTEL", static_cast<SpvCapability>(5817)},
        {"ShaderNonUniformEXT", static_cast<SpvCapability>(5301)},
        {"SubgroupAvcMotionEstimationINTEL", static_cast<SpvCapability>(5696)},
        {"StorageImageArrayNonUniformIndexingEXT", static_cast<SpvCapability>(5309)},
        {"FragmentDensityEXT", static_cast<SpvCapability>(5291)},
        {"LoopFuseINTEL", static_cast<SpvCapability>(5906)},
        {"ImageQuery", static_cast<SpvCapability>(50)},
    };

    static const auto hash = [](const UnownedStringSlice& str, UInt32 salt){
        return combineHash(getHashCode(str), getHashCode(salt)) % 245;
    };

    const auto i = hash(str, tableSalt[hash(str, 0)]);
    if(str == words[i].first)
    {
        value = words[i].second;
        return true;
    }
    else
    {
        return false;
    }
}

static bool lookupSpvWord(const UnownedStringSlice& str, SpvWord& value)
{
    static const unsigned tableSalt[944] = {
        3, 4, 2, 0, 0, 1, 2, 1, 1, 1, 2, 3, 7, 1, 2, 1,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 2, 1, 0, 0, 0, 1,
        1, 1, 0, 9, 1, 0, 6, 3, 4, 4, 0, 1, 3, 3, 5, 3,
        4, 4, 2, 1, 0, 2, 17, 7, 1, 1, 4, 1, 2, 1, 0, 1,
        3, 6, 2, 1, 1, 0, 1, 1, 1, 0, 2, 3, 1, 1, 0, 1,
        0, 2, 0, 3, 0, 9, 0, 3, 0, 2, 2, 3, 0, 2, 0, 1,
        0, 0, 0, 0, 2, 1, 4, 1, 0, 1, 0, 0, 3, 0, 1, 4,
        4, 1, 0, 0, 0, 0, 1, 0, 2, 1, 0, 1, 5, 0, 1, 0,
        1, 0, 1, 6, 2, 1, 0, 6, 1, 0, 3, 0, 5, 2, 10, 0,
        1, 5, 1, 0, 2, 1, 0, 0, 2, 1, 0, 1, 0, 1, 0, 2,
        3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 1, 5,
        0, 0, 6, 3, 2, 0, 1, 1, 5, 4, 0, 0, 0, 0, 0, 0,
        0, 3, 5, 0, 1, 1, 3, 2, 0, 0, 3, 2, 0, 2, 0, 2,
        0, 2, 0, 3, 0, 0, 0, 6, 0, 0, 1, 1, 6, 4, 2, 2,
        0, 1, 1, 0, 1, 0, 3, 0, 2, 0, 1, 0, 0, 4, 1, 0,
        1, 7, 0, 5, 9, 0, 0, 0, 1, 5, 4, 0, 2, 5, 0, 0,
        7, 0, 6, 2, 2, 0, 5, 1, 5, 2, 1, 4, 4, 0, 2, 7,
        0, 5, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 2, 1,
        3, 0, 0, 0, 3, 0, 1, 8, 2, 0, 1, 2, 2, 2, 3, 0,
        1, 0, 6, 2, 8, 3, 4, 3, 0, 1, 0, 0, 1, 0, 1, 2,
        4, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 4, 1, 0, 1, 0,
        0, 4, 3, 2, 1, 0, 0, 1, 0, 3, 0, 6, 4, 0, 1, 1,
        8, 1, 6, 5, 0, 0, 0, 3, 0, 0, 1, 2, 0, 1, 1, 0,
        1, 0, 0, 1, 0, 2, 0, 3, 2, 0, 1, 4, 2, 21, 0, 6,
        3, 2, 8, 0, 3, 2, 0, 1, 4, 0, 2, 3, 2, 2, 1, 2,
        1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 4, 9, 4, 1, 2, 1,
        0, 4, 1, 3, 0, 0, 1, 6, 1, 9, 4, 11, 15, 0, 0, 0,
        1, 1, 0, 0, 1, 0, 2, 1, 0, 0, 5, 0, 1, 2, 3, 1,
        3, 0, 0, 1, 3, 9, 0, 3, 1, 0, 0, 0, 0, 3, 0, 1,
        0, 1, 0, 1, 0, 0, 2, 6, 9, 6, 3, 0, 3, 3, 5, 0,
        0, 1, 0, 0, 2, 0, 1, 4, 3, 0, 5, 1, 0, 0, 1, 8,
        1, 0, 0, 0, 2, 1, 0, 10, 1, 3, 16, 2, 1, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 3, 3, 7, 1, 0, 0,
        15, 1, 0, 2, 8, 3, 7, 0, 0, 0, 1, 3, 0, 4, 0, 1,
        7, 4, 2, 3, 0, 6, 2, 2, 7, 0, 3, 4, 1, 0, 4, 0,
        10, 6, 4, 19, 0, 10, 0, 2, 0, 0, 2, 1, 6, 2, 8, 0,
        0, 2, 9, 26, 0, 2, 5, 0, 28, 0, 0, 0, 10, 1, 0, 0,
        1, 1, 2, 0, 0, 1, 4, 2, 5, 2, 13, 12, 0, 0, 0, 8,
        0, 6, 1, 11, 1, 1, 0, 4, 3, 2, 0, 0, 17, 13, 1, 0,
        4, 2, 1, 10, 17, 9, 26, 2, 8, 1, 0, 25, 4, 5, 0, 0,
        1, 1, 3, 1, 19, 1, 0, 0, 4, 0, 0, 0, 2, 5, 2, 0,
        3, 0, 8, 0, 0, 5, 9, 4, 0, 0, 3, 0, 1, 10, 1, 0,
        2, 0, 0, 5, 1, 4, 0, 3, 0, 17, 4, 0, 1, 3, 3, 2,
        0, 3, 16, 0, 8, 3, 0, 0, 0, 1, 4, 2, 14, 1, 6, 0,
        0, 0, 0, 12, 3, 0, 0, 35, 1, 15, 2, 0, 0, 15, 0, 0,
        11, 5, 2, 0, 6, 20, 2, 0, 0, 2, 0, 2, 0, 17, 17, 0,
        0, 27, 8, 0, 2, 4, 8, 1, 9, 2, 1, 13, 1, 47, 16, 2,
        0, 1, 1, 0, 7, 8, 18, 5, 8, 6, 0, 3, 1, 6, 24, 0,
        1, 7, 14, 0, 1, 19, 0, 3, 0, 33, 0, 10, 21, 8, 4, 8,
        3, 9, 18, 2, 0, 3, 0, 0, 0, 2, 0, 5, 3, 8, 1, 0,
        46, 14, 7, 10, 26, 33, 0, 26, 3, 1, 33, 0, 17, 8, 86, 11,
        7, 16, 0, 38, 9, 10, 1, 0, 31, 10, 5, 16, 67, 8, 1, 17,
        4, 9, 0, 0, 0, 29, 2, 13, 0, 0, 0, 1, 6, 54, 26, 0,
        6, 0, 11, 3, 0, 9, 0, 0, 60, 18, 92, 4, 5, 2, 3, 5,
        0, 12, 0, 80, 25, 0, 0, 3, 1, 1, 0, 1, 0, 9, 19, 8,
        0, 8, 0, 46, 0, 1, 36, 32, 40, 1, 134, 0, 3, 68, 24, 0,
        0, 0, 8, 116, 7, 50, 58, 0, 0, 254, 7, 0, 0, 96, 0, 0,
        22, 0, 0, 45, 0, 35, 0, 0, 78, 0, 5, 3, 32, 120, 66, 5,
        1, 0, 262, 0, 8, 0, 421, 0, 0, 0, 21, 0, 4, 682, 0, 571
    };

    using KV = std::pair<const char*, SpvWord>;

    static const KV words[944] =
    {
        {"ExecutionModeDepthReplacing", SpvWord{12}},
        {"CapabilityImageMipmap", SpvWord{15}},
        {"MemorySemanticsOutputMemory", SpvWord{4096}},
        {"BuiltInWorldToObjectNV", SpvWord{5331}},
        {"DecorationMediaBlockIOINTEL", SpvWord{6140}},
        {"CapabilityStorageUniformBufferBlock16", SpvWord{4433}},
        {"DecorationPerPrimitiveEXT", SpvWord{5271}},
        {"StorageClassIncomingRayPayloadKHR", SpvWord{5342}},
        {"QuantizationModesRND", SpvWord{2}},
        {"ImageChannelOrderR", SpvWord{0}},
        {"LoopControlMaxInterleavingINTEL", SpvWord{2097152}},
        {"CapabilityStorageImageReadWithoutFormat", SpvWord{55}},
        {"StorageClassRayPayloadKHR", SpvWord{5338}},
        {"ImageChannelOrderBGRA", SpvWord{6}},
        {"LoopControlMinIterations", SpvWord{16}},
        {"CapabilityTileImageColorReadAccessEXT", SpvWord{4166}},
        {"CapabilityStorageInputOutput16", SpvWord{4436}},
        {"MemorySemanticsWorkgroupMemory", SpvWord{256}},
        {"RayFlagsSkipClosestHitShaderKHR", SpvWord{8}},
        {"CapabilityLiteralSampler", SpvWord{20}},
        {"CapabilityUniformBufferArrayDynamicIndexing", SpvWord{28}},
        {"BuiltInRayTminNV", SpvWord{5325}},
        {"FPDenormModeFlushToZero", SpvWord{1}},
        {"StorageClassTaskPayloadWorkgroupEXT", SpvWord{5402}},
        {"ExecutionModeNonCoherentDepthAttachmentReadEXT", SpvWord{4170}},
        {"BuiltInSubgroupGeMask", SpvWord{4417}},
        {"ExecutionModeInputTrianglesAdjacency", SpvWord{23}},
        {"CapabilityFloat64", SpvWord{10}},
        {"ImageChannelDataTypeSnormInt16", SpvWord{1}},
        {"BuiltInBaryCoordNoPerspKHR", SpvWord{5287}},
        {"DecorationAliasedPointer", SpvWord{5356}},
        {"ImageFormatRgba16f", SpvWord{2}},
        {"BuiltInMeshViewCountNV", SpvWord{5280}},
        {"RayFlagsCullNoOpaqueKHR", SpvWord{128}},
        {"StorageClassRayPayloadNV", SpvWord{5338}},
        {"SourceLanguageESSL", SpvWord{1}},
        {"StorageClassHitAttributeNV", SpvWord{5339}},
        {"ExecutionModelIntersectionNV", SpvWord{5314}},
        {"DecorationArrayStride", SpvWord{6}},
        {"CapabilityFPFastMathModeINTEL", SpvWord{5837}},
        {"RayFlagsCullBackFacingTrianglesKHR", SpvWord{16}},
        {"BuiltInViewIndex", SpvWord{4440}},
        {"BuiltInPointSize", SpvWord{1}},
        {"DecorationCPacked", SpvWord{10}},
        {"OverflowModesWRAP", SpvWord{0}},
        {"CapabilitySubgroupBallotKHR", SpvWord{4423}},
        {"CapabilityVulkanMemoryModel", SpvWord{5345}},
        {"RayFlagsNoOpaqueKHR", SpvWord{2}},
        {"CapabilityGroupNonUniformShuffle", SpvWord{65}},
        {"BuiltInLayer", SpvWord{9}},
        {"ImageFormatRgba32ui", SpvWord{30}},
        {"PackedVectorFormatPackedVectorFormat4x8Bit", SpvWord{0}},
        {"StorageClassShaderRecordBufferKHR", SpvWord{5343}},
        {"FunctionParameterAttributeNoReadWrite", SpvWord{7}},
        {"ImageFormatR8", SpvWord{15}},
        {"DecorationUserTypeGOOGLE", SpvWord{5636}},
        {"BuiltInMeshViewIndicesNV", SpvWord{5281}},
        {"FPOperationModeIEEE", SpvWord{0}},
        {"CapabilityUniformAndStorageBuffer8BitAccess", SpvWord{4449}},
        {"RayFlagsOpaqueKHR", SpvWord{1}},
        {"CapabilityInt64", SpvWord{11}},
        {"CapabilityFPGAKernelAttributesINTEL", SpvWord{5897}},
        {"StorageClassOutput", SpvWord{3}},
        {"BuiltInSubgroupLocalInvocationId", SpvWord{41}},
        {"CapabilityUniformTexelBufferArrayNonUniformIndexingEXT", SpvWord{5311}},
        {"BuiltInSampleMask", SpvWord{20}},
        {"BuiltInObjectToWorldNV", SpvWord{5330}},
        {"ImageFormatRgba16Snorm", SpvWord{16}},
        {"BuiltInCullDistancePerViewNV", SpvWord{5278}},
        {"ExecutionModelClosestHitKHR", SpvWord{5316}},
        {"CapabilityImageReadWrite", SpvWord{14}},
        {"CapabilityDenormPreserve", SpvWord{4464}},
        {"CapabilitySampleMaskOverrideCoverageNV", SpvWord{5249}},
        {"RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR", SpvWord{2}},
        {"CapabilitySampledImageArrayDynamicIndexing", SpvWord{29}},
        {"CapabilitySampledRect", SpvWord{37}},
        {"FunctionParameterAttributeNoAlias", SpvWord{4}},
        {"CapabilityAtomicFloat16MinMaxEXT", SpvWord{5616}},
        {"SamplerAddressingModeRepeatMirrored", SpvWord{4}},
        {"StorageClassUniformConstant", SpvWord{0}},
        {"CapabilityLongConstantCompositeINTEL", SpvWord{6089}},
        {"DecorationXfbBuffer", SpvWord{36}},
        {"DecorationWeightTextureQCOM", SpvWord{4487}},
        {"ImageFormatR16", SpvWord{14}},
        {"AddressingModelPhysicalStorageBuffer64", SpvWord{5348}},
        {"BuiltInCullPrimitiveEXT", SpvWord{5299}},
        {"ImageFormatRg32i", SpvWord{25}},
        {"DecorationNonWritable", SpvWord{24}},
        {"DecorationRestrict", SpvWord{19}},
        {"BuiltInWorldRayOriginKHR", SpvWord{5321}},
        {"CapabilityGeometryShaderPassthroughNV", SpvWord{5251}},
        {"DecorationIndex", SpvWord{32}},
        {"CooperativeMatrixOperandsNoneKHR", SpvWord{0}},
        {"ExecutionModeSubgroupsPerWorkgroup", SpvWord{36}},
        {"ExecutionModeSubgroupsPerWorkgroupId", SpvWord{37}},
        {"DecorationSideEffectsINTEL", SpvWord{5608}},
        {"SourceLanguageOpenCL_C", SpvWord{3}},
        {"BuiltInObjectToWorldKHR", SpvWord{5330}},
        {"BuiltInInstanceCustomIndexNV", SpvWord{5327}},
        {"ImageOperandsVolatileTexelKHR", SpvWord{2048}},
        {"BuiltInGlobalOffset", SpvWord{33}},
        {"ExecutionModeLocalSize", SpvWord{17}},
        {"ImageChannelOrderRA", SpvWord{3}},
        {"ExecutionModeSampleInterlockOrderedEXT", SpvWord{5368}},
        {"BuiltInSubgroupLtMask", SpvWord{4420}},
        {"CapabilityDotProductInput4x8Bit", SpvWord{6017}},
        {"DecorationMMHostInterfaceAddressWidthINTEL", SpvWord{6177}},
        {"CapabilityMultiView", SpvWord{4439}},
        {"MemoryAccessMakePointerAvailable", SpvWord{8}},
        {"ExecutionModePointMode", SpvWord{10}},
        {"BuiltInWorldRayDirectionKHR", SpvWord{5322}},
        {"ExecutionModeSpacingEqual", SpvWord{1}},
        {"DecorationHlslCounterBufferGOOGLE", SpvWord{5634}},
        {"DecorationNoUnsignedWrap", SpvWord{4470}},
        {"SourceLanguageHERO_C", SpvWord{8}},
        {"FragmentShadingRateHorizontal4Pixels", SpvWord{8}},
        {"AddressingModelPhysicalStorageBuffer64EXT", SpvWord{5348}},
        {"CapabilityImageMSArray", SpvWord{48}},
        {"SourceLanguageHLSL", SpvWord{5}},
        {"BuiltInLaunchSizeNV", SpvWord{5320}},
        {"MemorySemanticsAcquire", SpvWord{2}},
        {"MemoryAccessNonPrivatePointer", SpvWord{32}},
        {"DecorationPerVertexNV", SpvWord{5285}},
        {"CapabilityIndirectReferencesINTEL", SpvWord{5604}},
        {"ImageOperandsNontemporal", SpvWord{16384}},
        {"ExecutionModelKernel", SpvWord{6}},
        {"QuantizationModesTRN", SpvWord{0}},
        {"DecorationStallEnableINTEL", SpvWord{5905}},
        {"MemoryModelOpenCL", SpvWord{2}},
        {"ImageOperandsMakeTexelAvailableKHR", SpvWord{256}},
        {"DecorationDoublepumpINTEL", SpvWord{5831}},
        {"SourceLanguageSYCL", SpvWord{7}},
        {"ImageChannelOrdersRGBA", SpvWord{17}},
        {"CapabilityShader", SpvWord{1}},
        {"ImageChannelOrderRGB", SpvWord{4}},
        {"DecorationRegisterINTEL", SpvWord{5825}},
        {"FPFastMathModeNotNaN", SpvWord{1}},
        {"FPFastMathModeAllowContractFastINTEL", SpvWord{65536}},
        {"FPRoundingModeRTE", SpvWord{0}},
        {"CapabilityShaderClockKHR", SpvWord{5055}},
        {"ImageOperandsMakeTexelAvailable", SpvWord{256}},
        {"DecorationAliased", SpvWord{20}},
        {"DecorationSimpleDualPortINTEL", SpvWord{5833}},
        {"CapabilityAtomicFloat32AddEXT", SpvWord{6033}},
        {"ExecutionModeLocalSizeHintId", SpvWord{39}},
        {"CapabilityGroupUniformArithmeticKHR", SpvWord{6400}},
        {"DecorationCounterBuffer", SpvWord{5634}},
        {"ImageOperandsVolatileTexel", SpvWord{2048}},
        {"CapabilityGroupNonUniformVote", SpvWord{62}},
        {"BuiltInPatchVertices", SpvWord{14}},
        {"CapabilityUniformBufferArrayNonUniformIndexingEXT", SpvWord{5306}},
        {"MemorySemanticsAcquireRelease", SpvWord{8}},
        {"CapabilityShaderViewportIndexLayerNV", SpvWord{5254}},
        {"ImageChannelOrderRGBA", SpvWord{5}},
        {"StorageClassDeviceOnlyINTEL", SpvWord{5936}},
        {"CapabilityGroupNonUniform", SpvWord{61}},
        {"BuiltInWorldToObjectKHR", SpvWord{5331}},
        {"BuiltInRayTminKHR", SpvWord{5325}},
        {"FPFastMathModeNotInf", SpvWord{2}},
        {"BuiltInSubgroupLtMaskKHR", SpvWord{4420}},
        {"ExecutionModeSpacingFractionalOdd", SpvWord{3}},
        {"ImageOperandsOffsets", SpvWord{65536}},
        {"DecorationHlslSemanticGOOGLE", SpvWord{5635}},
        {"CapabilityTransformFeedback", SpvWord{53}},
        {"CapabilityVariablePointers", SpvWord{4442}},
        {"ImageChannelDataTypeSignedInt8", SpvWord{7}},
        {"QuantizationModesRND_MIN_INF", SpvWord{5}},
        {"CapabilityAtomicStorage", SpvWord{21}},
        {"CapabilityStorageImageMultisample", SpvWord{27}},
        {"BuiltInSampleId", SpvWord{18}},
        {"CapabilitySubgroupAvcMotionEstimationChromaINTEL", SpvWord{5698}},
        {"ImageChannelOrderRGBx", SpvWord{12}},
        {"BuiltInCoreMaxIDARM", SpvWord{4162}},
        {"SamplerAddressingModeClamp", SpvWord{2}},
        {"DimSubpassData", SpvWord{6}},
        {"FunctionControlOptNoneINTEL", SpvWord{65536}},
        {"CapabilityImageGatherBiasLodAMD", SpvWord{5009}},
        {"DecorationBlockMatchTextureQCOM", SpvWord{4488}},
        {"BuiltInPrimitiveTriangleIndicesEXT", SpvWord{5296}},
        {"DecorationNoAliasINTEL", SpvWord{5915}},
        {"ExecutionModeRoundingModeRTNINTEL", SpvWord{5621}},
        {"DecorationMathOpDSPModeINTEL", SpvWord{5909}},
        {"StorageClassIncomingCallableDataNV", SpvWord{5329}},
        {"CapabilitySplitBarrierINTEL", SpvWord{6141}},
        {"DecorationComponent", SpvWord{31}},
        {"KernelEnqueueFlagsNoWait", SpvWord{0}},
        {"DecorationDescriptorSet", SpvWord{34}},
        {"CapabilityFragmentShaderPixelInterlockEXT", SpvWord{5378}},
        {"DecorationBuiltIn", SpvWord{11}},
        {"ImageChannelDataTypeUnormInt24", SpvWord{15}},
        {"ExecutionModeOutputLinesEXT", SpvWord{5269}},
        {"CapabilityVariableLengthArrayINTEL", SpvWord{5817}},
        {"ImageChannelDataTypeUnsignedIntRaw12EXT", SpvWord{20}},
        {"CapabilitySubgroupDispatch", SpvWord{58}},
        {"MemorySemanticsSequentiallyConsistent", SpvWord{16}},
        {"DecorationExplicitInterpAMD", SpvWord{4999}},
        {"DimCube", SpvWord{3}},
        {"BuiltInObjectRayOriginKHR", SpvWord{5323}},
        {"ImageFormatRg8Snorm", SpvWord{18}},
        {"ExecutionModeMaxWorkDimINTEL", SpvWord{5894}},
        {"DecorationPerViewNV", SpvWord{5272}},
        {"CapabilityFloatingPointModeINTEL", SpvWord{5583}},
        {"MemoryModelVulkanKHR", SpvWord{3}},
        {"DecorationNonReadable", SpvWord{25}},
        {"BuiltInSubgroupEqMask", SpvWord{4416}},
        {"BuiltInHitTNV", SpvWord{5332}},
        {"ExecutionModeInputLinesAdjacency", SpvWord{21}},
        {"ImageFormatR32f", SpvWord{3}},
        {"BuiltInTessLevelOuter", SpvWord{11}},
        {"StorageClassHitAttributeKHR", SpvWord{5339}},
        {"BuiltInPrimitiveId", SpvWord{7}},
        {"DecorationPassthroughNV", SpvWord{5250}},
        {"SelectionControlNone", SpvWord{0}},
        {"DecorationColMajor", SpvWord{5}},
        {"CapabilityImageBuffer", SpvWord{47}},
        {"ImageFormatR32i", SpvWord{24}},
        {"BuiltInRayGeometryIndexKHR", SpvWord{5352}},
        {"MemorySemanticsVolatile", SpvWord{32768}},
        {"CapabilityDotProductInput4x8BitKHR", SpvWord{6017}},
        {"LoopControlNoFusionINTEL", SpvWord{8388608}},
        {"CooperativeMatrixLayoutColumnMajorKHR", SpvWord{1}},
        {"LinkageTypeLinkOnceODR", SpvWord{2}},
        {"BuiltInPosition", SpvWord{0}},
        {"LoopControlUnroll", SpvWord{1}},
        {"CapabilityCooperativeMatrixNV", SpvWord{5357}},
        {"ExecutionModeContractionOff", SpvWord{31}},
        {"ExecutionModeInputLines", SpvWord{20}},
        {"ExecutionModeOutputPoints", SpvWord{27}},
        {"DecorationVectorComputeCallableFunctionINTEL", SpvWord{6087}},
        {"CapabilitySampleRateShading", SpvWord{35}},
        {"ImageOperandsSample", SpvWord{64}},
        {"CapabilityInputAttachment", SpvWord{40}},
        {"DecorationCoherent", SpvWord{23}},
        {"DecorationFlat", SpvWord{14}},
        {"DecorationVectorComputeFunctionINTEL", SpvWord{5626}},
        {"CapabilityAtomicFloat32MinMaxEXT", SpvWord{5612}},
        {"ImageOperandsOffset", SpvWord{16}},
        {"CapabilityArbitraryPrecisionFixedPointINTEL", SpvWord{5922}},
        {"BuiltInWorldRayOriginNV", SpvWord{5321}},
        {"CapabilityGroups", SpvWord{18}},
        {"CapabilityDotProduct", SpvWord{6019}},
        {"ImageChannelOrderARGB", SpvWord{7}},
        {"CapabilityCoreBuiltinsARM", SpvWord{4165}},
        {"ExecutionModeEarlyAndLateFragmentTestsAMD", SpvWord{5017}},
        {"MemoryAccessNontemporal", SpvWord{4}},
        {"CapabilityFragmentShaderShadingRateInterlockEXT", SpvWord{5372}},
        {"DecorationStream", SpvWord{29}},
        {"CapabilityDebugInfoModuleINTEL", SpvWord{6114}},
        {"CapabilityFragmentShadingRateKHR", SpvWord{4422}},
        {"FunctionControlInline", SpvWord{1}},
        {"ImageChannelOrderA", SpvWord{1}},
        {"CapabilityFunctionFloatControlINTEL", SpvWord{5821}},
        {"BuiltInSubgroupGtMaskKHR", SpvWord{4418}},
        {"DecorationBankwidthINTEL", SpvWord{5828}},
        {"DecorationGLSLShared", SpvWord{8}},
        {"GroupOperationReduce", SpvWord{0}},
        {"CapabilityClipDistance", SpvWord{32}},
        {"ExecutionModeSchedulerTargetFmaxMhzINTEL", SpvWord{5903}},
        {"DecorationMergeINTEL", SpvWord{5834}},
        {"BuiltInFragStencilRefEXT", SpvWord{5014}},
        {"RayFlagsSkipTrianglesKHR", SpvWord{256}},
        {"DecorationVolatile", SpvWord{21}},
        {"CapabilityWorkgroupMemoryExplicitLayoutKHR", SpvWord{4428}},
        {"CapabilityAtomicFloat64AddEXT", SpvWord{6034}},
        {"CapabilityStoragePushConstant16", SpvWord{4435}},
        {"ExecutionModeStencilRefLessBackAMD", SpvWord{5084}},
        {"BuiltInWarpsPerSMNV", SpvWord{5374}},
        {"ExecutionModeOutputVertices", SpvWord{26}},
        {"SourceLanguageGLSL", SpvWord{2}},
        {"CapabilityDotProductInput4x8BitPacked", SpvWord{6018}},
        {"DecorationAliasedPointerEXT", SpvWord{5356}},
        {"CapabilityMatrix", SpvWord{0}},
        {"DecorationFPRoundingMode", SpvWord{39}},
        {"CapabilityMemoryAccessAliasingINTEL", SpvWord{5910}},
        {"RayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR", SpvWord{0}},
        {"CapabilityLinkage", SpvWord{5}},
        {"ExecutionModeIsolines", SpvWord{25}},
        {"ScopeInvocation", SpvWord{4}},
        {"StorageClassHitObjectAttributeNV", SpvWord{5385}},
        {"CapabilityRayTracingNV", SpvWord{5340}},
        {"MemorySemanticsMakeVisible", SpvWord{16384}},
        {"FunctionParameterAttributeNoWrite", SpvWord{6}},
        {"ImageOperandsConstOffsets", SpvWord{32}},
        {"FunctionControlDontInline", SpvWord{2}},
        {"QuantizationModesRND_CONV", SpvWord{6}},
        {"ExecutionModeRoundingModeRTZ", SpvWord{4463}},
        {"ExecutionModeVertexOrderCcw", SpvWord{5}},
        {"CapabilityFPGAMemoryAttributesINTEL", SpvWord{5824}},
        {"CapabilityStorageTexelBufferArrayDynamicIndexingEXT", SpvWord{5305}},
        {"ExecutionModelMissKHR", SpvWord{5317}},
        {"CapabilityMeshShadingNV", SpvWord{5266}},
        {"CapabilityVariablePointersStorageBuffer", SpvWord{4441}},
        {"CapabilityRayTracingMotionBlurNV", SpvWord{5341}},
        {"DecorationMaxByteOffset", SpvWord{45}},
        {"StorageClassImage", SpvWord{11}},
        {"DecorationMMHostInterfaceMaxBurstINTEL", SpvWord{6181}},
        {"ImageChannelOrderABGR", SpvWord{19}},
        {"CooperativeMatrixUseMatrixAKHR", SpvWord{0}},
        {"ImageChannelDataTypeSignedInt16", SpvWord{8}},
        {"StorageClassFunction", SpvWord{7}},
        {"CapabilityRuntimeDescriptorArrayEXT", SpvWord{5302}},
        {"RayQueryIntersectionRayQueryCommittedIntersectionKHR", SpvWord{1}},
        {"DecorationUserSemantic", SpvWord{5635}},
        {"ImageChannelDataTypeHalfFloat", SpvWord{13}},
        {"DecorationMMHostInterfaceDataWidthINTEL", SpvWord{6178}},
        {"ImageFormatR16i", SpvWord{28}},
        {"ImageChannelOrderDepthStencil", SpvWord{14}},
        {"DecorationRestrictPointer", SpvWord{5355}},
        {"ImageFormatR64i", SpvWord{41}},
        {"CooperativeMatrixOperandsMatrixCSignedComponentsKHR", SpvWord{4}},
        {"CapabilityShaderInvocationReorderNV", SpvWord{5383}},
        {"DecorationFunctionRoundingModeINTEL", SpvWord{5822}},
        {"CapabilityTextureSampleWeightedQCOM", SpvWord{4484}},
        {"ExecutionModeOutputTriangleStrip", SpvWord{29}},
        {"BuiltInFragSizeEXT", SpvWord{5292}},
        {"DecorationNonUniform", SpvWord{5300}},
        {"DecorationClobberINTEL", SpvWord{5607}},
        {"DecorationLatencyControlLabelINTEL", SpvWord{6172}},
        {"CapabilityBFloat16ConversionINTEL", SpvWord{6115}},
        {"MemoryAccessVolatile", SpvWord{1}},
        {"DecorationBufferBlock", SpvWord{3}},
        {"DecorationLocation", SpvWord{30}},
        {"DecorationUniform", SpvWord{26}},
        {"CapabilityUniformTexelBufferArrayDynamicIndexing", SpvWord{5304}},
        {"CapabilityStorageBuffer16BitAccess", SpvWord{4433}},
        {"ImageChannelDataTypeUnsignedInt8", SpvWord{10}},
        {"DecorationNonUniformEXT", SpvWord{5300}},
        {"ExecutionModeVertexOrderCw", SpvWord{4}},
        {"SourceLanguageNZSL", SpvWord{9}},
        {"ImageChannelDataTypeUnormShort565", SpvWord{4}},
        {"CooperativeMatrixOperandsMatrixASignedComponentsKHR", SpvWord{1}},
        {"BuiltInLayerPerViewNV", SpvWord{5279}},
        {"BuiltInSMIDNV", SpvWord{5377}},
        {"ImageChannelDataTypeUnormInt8", SpvWord{2}},
        {"BuiltInFragInvocationCountEXT", SpvWord{5293}},
        {"BuiltInHitTriangleVertexPositionsKHR", SpvWord{5335}},
        {"ImageFormatRgba8Snorm", SpvWord{5}},
        {"ImageOperandsZeroExtend", SpvWord{8192}},
        {"DecorationPerPrimitiveNV", SpvWord{5271}},
        {"DecorationFunctionDenormModeINTEL", SpvWord{5823}},
        {"BuiltInInstanceId", SpvWord{6}},
        {"BuiltInBaryCoordSmoothCentroidAMD", SpvWord{4996}},
        {"ExecutionModeOriginLowerLeft", SpvWord{8}},
        {"CapabilityMultiViewport", SpvWord{57}},
        {"DecorationSIMTCallINTEL", SpvWord{5599}},
        {"DecorationAlignmentId", SpvWord{46}},
        {"CapabilityStorageBufferArrayDynamicIndexing", SpvWord{30}},
        {"DecorationNoContraction", SpvWord{42}},
        {"ExecutionModeInputPoints", SpvWord{19}},
        {"CapabilityPerViewAttributesNV", SpvWord{5260}},
        {"DecorationPrefetchINTEL", SpvWord{5902}},
        {"CapabilityStorageImageWriteWithoutFormat", SpvWord{56}},
        {"BuiltInBaryCoordNoPerspSampleAMD", SpvWord{4994}},
        {"LoopControlLoopCoalesceINTEL", SpvWord{1048576}},
        {"DecorationRegisterMapKernelArgumentINTEL", SpvWord{6176}},
        {"CapabilityFragmentDensityEXT", SpvWord{5291}},
        {"DecorationMMHostInterfaceLatencyINTEL", SpvWord{6179}},
        {"CapabilityUniformBufferArrayNonUniformIndexing", SpvWord{5306}},
        {"QuantizationModesTRN_ZERO", SpvWord{1}},
        {"ImageChannelOrderDepth", SpvWord{13}},
        {"CapabilityPhysicalStorageBufferAddresses", SpvWord{5347}},
        {"DecorationSpecId", SpvWord{1}},
        {"SourceLanguageUnknown", SpvWord{0}},
        {"CapabilityRayQueryKHR", SpvWord{4472}},
        {"CapabilityFragmentFullyCoveredEXT", SpvWord{5265}},
        {"DecorationDontStaticallyCoalesceINTEL", SpvWord{5901}},
        {"ImageFormatRgba16i", SpvWord{22}},
        {"BuiltInLaunchSizeKHR", SpvWord{5320}},
        {"BuiltInInvocationsPerPixelNV", SpvWord{5293}},
        {"BuiltInViewportIndex", SpvWord{10}},
        {"CapabilityVectorAnyINTEL", SpvWord{5619}},
        {"Dim3D", SpvWord{2}},
        {"DecorationHitObjectShaderRecordBufferNV", SpvWord{5386}},
        {"CapabilityRoundingModeRTE", SpvWord{4467}},
        {"DecorationFunctionFloatingPointModeINTEL", SpvWord{6080}},
        {"CapabilityImageCubeArray", SpvWord{34}},
        {"FPFastMathModeNone", SpvWord{0}},
        {"BuiltInVertexIndex", SpvWord{42}},
        {"CapabilityDotProductKHR", SpvWord{6019}},
        {"ImageFormatRgba32i", SpvWord{21}},
        {"CapabilityShaderViewportIndexLayerEXT", SpvWord{5254}},
        {"MemorySemanticsNone", SpvWord{0}},
        {"DecorationBinding", SpvWord{33}},
        {"CapabilityFragmentMaskAMD", SpvWord{5010}},
        {"ScopeDevice", SpvWord{1}},
        {"CapabilityDemoteToHelperInvocationEXT", SpvWord{5379}},
        {"MemoryAccessNoAliasINTELMask", SpvWord{131072}},
        {"ExecutionModelRayGenerationKHR", SpvWord{5313}},
        {"CooperativeMatrixOperandsMatrixBSignedComponentsKHR", SpvWord{2}},
        {"CapabilityVulkanMemoryModelKHR", SpvWord{5345}},
        {"ExecutionModeShadingRateInterlockUnorderedEXT", SpvWord{5371}},
        {"ImageChannelDataTypeFloat", SpvWord{14}},
        {"BuiltInShadingRateKHR", SpvWord{4444}},
        {"ImageOperandsBias", SpvWord{1}},
        {"FunctionControlNone", SpvWord{0}},
        {"ExecutionModeNonCoherentColorAttachmentReadEXT", SpvWord{4169}},
        {"ExecutionModeStencilRefGreaterBackAMD", SpvWord{5083}},
        {"MemoryAccessNonPrivatePointerKHR", SpvWord{32}},
        {"ImageChannelDataTypeUnsignedInt32", SpvWord{12}},
        {"DecorationMaxConcurrencyINTEL", SpvWord{5918}},
        {"LoopControlDependencyLength", SpvWord{8}},
        {"BuiltInHelperInvocation", SpvWord{23}},
        {"CapabilityFPGALoopControlsINTEL", SpvWord{5888}},
        {"BuiltInSubgroupLeMask", SpvWord{4419}},
        {"CapabilityStorageBufferArrayNonUniformIndexingEXT", SpvWord{5308}},
        {"ImageFormatRg32ui", SpvWord{35}},
        {"CapabilitySampledImageArrayNonUniformIndexingEXT", SpvWord{5307}},
        {"BuiltInSubgroupId", SpvWord{40}},
        {"ImageFormatR11fG11fB10f", SpvWord{8}},
        {"LoopControlPeelCount", SpvWord{128}},
        {"BuiltInSubgroupLeMaskKHR", SpvWord{4419}},
        {"CapabilityNamedBarrier", SpvWord{59}},
        {"DecorationSingleElementVectorINTEL", SpvWord{6085}},
        {"DecorationForcePow2DepthINTEL", SpvWord{5836}},
        {"DimTileImageDataEXT", SpvWord{4173}},
        {"BuiltInBaseVertex", SpvWord{4424}},
        {"DecorationUniformId", SpvWord{27}},
        {"BuiltInBaryCoordPullModelAMD", SpvWord{4998}},
        {"ExecutionModeDerivativeGroupQuadsNV", SpvWord{5289}},
        {"AccessQualifierReadOnly", SpvWord{0}},
        {"StorageClassPrivate", SpvWord{6}},
        {"CapabilityArbitraryPrecisionIntegersINTEL", SpvWord{5844}},
        {"CapabilityRayTracingProvisionalKHR", SpvWord{5353}},
        {"MemorySemanticsMakeAvailable", SpvWord{8192}},
        {"CapabilityShaderNonUniform", SpvWord{5301}},
        {"CapabilitySampled1D", SpvWord{43}},
        {"ImageFormatRgba8", SpvWord{4}},
        {"CapabilityImageGatherExtended", SpvWord{25}},
        {"CapabilitySubgroupBufferBlockIOINTEL", SpvWord{5569}},
        {"CapabilityStorageUniform16", SpvWord{4434}},
        {"BuiltInCullMaskKHR", SpvWord{6021}},
        {"DecorationCentroid", SpvWord{16}},
        {"CapabilityRayCullMaskKHR", SpvWord{6020}},
        {"CapabilityTileImageStencilReadAccessEXT", SpvWord{4168}},
        {"ImageFormatR8i", SpvWord{29}},
        {"CapabilityShaderStereoViewNV", SpvWord{5259}},
        {"Dim1D", SpvWord{0}},
        {"CapabilityStorageImageArrayNonUniformIndexing", SpvWord{5309}},
        {"ExecutionModeOutputPrimitivesNV", SpvWord{5270}},
        {"DecorationAlignment", SpvWord{44}},
        {"BuiltInVertexId", SpvWord{5}},
        {"ImageFormatRg8ui", SpvWord{37}},
        {"FunctionParameterAttributeZext", SpvWord{0}},
        {"CapabilityRayTracingPositionFetchKHR", SpvWord{5336}},
        {"CapabilityVulkanMemoryModelDeviceScope", SpvWord{5346}},
        {"MemorySemanticsImageMemory", SpvWord{2048}},
        {"StorageClassCrossWorkgroup", SpvWord{5}},
        {"StorageClassInput", SpvWord{1}},
        {"MemoryModelSimple", SpvWord{0}},
        {"MemorySemanticsSubgroupMemory", SpvWord{128}},
        {"StorageClassHostOnlyINTEL", SpvWord{5937}},
        {"CapabilityImageQuery", SpvWord{50}},
        {"ExecutionModeLocalSizeHint", SpvWord{18}},
        {"ImageOperandsSignExtend", SpvWord{4096}},
        {"ExecutionModelCallableKHR", SpvWord{5318}},
        {"CapabilityIOPipesINTEL", SpvWord{5943}},
        {"KernelEnqueueFlagsWaitKernel", SpvWord{1}},
        {"CapabilityImageReadWriteLodAMD", SpvWord{5015}},
        {"ImageFormatR8ui", SpvWord{39}},
        {"ExecutionModeInvocations", SpvWord{0}},
        {"ExecutionModeNoGlobalOffsetINTEL", SpvWord{5895}},
        {"QuantizationModesRND_INF", SpvWord{4}},
        {"RayFlagsTerminateOnFirstHitKHR", SpvWord{4}},
        {"CapabilityAtomicStorageOps", SpvWord{4445}},
        {"CapabilityFPGARegINTEL", SpvWord{5948}},
        {"LoopControlMaxIterations", SpvWord{32}},
        {"ExecutionModelIntersectionKHR", SpvWord{5314}},
        {"BuiltInPrimitiveCountNV", SpvWord{5275}},
        {"CapabilityFloat16ImageAMD", SpvWord{5008}},
        {"ScopeShaderCallKHR", SpvWord{6}},
        {"BuiltInHitKindNV", SpvWord{5333}},
        {"ExecutionModeDepthUnchanged", SpvWord{16}},
        {"BuiltInSubgroupMaxSize", SpvWord{37}},
        {"CapabilityGroupNonUniformArithmetic", SpvWord{63}},
        {"LoopControlPipelineEnableINTEL", SpvWord{524288}},
        {"CapabilitySignedZeroInfNanPreserve", SpvWord{4466}},
        {"MemorySemanticsMakeVisibleKHR", SpvWord{16384}},
        {"ExecutionModeOutputTrianglesEXT", SpvWord{5298}},
        {"BuiltInClipDistance", SpvWord{3}},
        {"ExecutionModelMeshEXT", SpvWord{5365}},
        {"ImageChannelOrderRx", SpvWord{10}},
        {"DecorationConstant", SpvWord{22}},
        {"ExecutionModeStencilRefUnchangedBackAMD", SpvWord{5082}},
        {"DecorationSample", SpvWord{17}},
        {"BuiltInEnqueuedWorkgroupSize", SpvWord{32}},
        {"CapabilityFloat16", SpvWord{9}},
        {"CapabilityBitInstructions", SpvWord{6025}},
        {"CooperativeMatrixOperandsSaturatingAccumulationKHR", SpvWord{16}},
        {"BuiltInCoreIDARM", SpvWord{4160}},
        {"CapabilityFPMaxErrorINTEL", SpvWord{6169}},
        {"CapabilityTextureBlockMatchQCOM", SpvWord{4486}},
        {"CapabilityInt64ImageEXT", SpvWord{5016}},
        {"BuiltInInstanceIndex", SpvWord{43}},
        {"ExecutionModePostDepthCoverage", SpvWord{4446}},
        {"ScopeSubgroup", SpvWord{3}},
        {"CapabilityStencilExportEXT", SpvWord{5013}},
        {"MemorySemanticsRelease", SpvWord{4}},
        {"StorageClassCodeSectionINTEL", SpvWord{5605}},
        {"MemoryAccessAliasScopeINTELMask", SpvWord{65536}},
        {"FragmentShadingRateVertical4Pixels", SpvWord{2}},
        {"FunctionControlPure", SpvWord{4}},
        {"DecorationVectorComputeVariableINTEL", SpvWord{5624}},
        {"StorageClassIncomingRayPayloadNV", SpvWord{5342}},
        {"FunctionParameterAttributeNoCapture", SpvWord{5}},
        {"CapabilityUniformAndStorageBuffer16BitAccess", SpvWord{4434}},
        {"CapabilityCullDistance", SpvWord{33}},
        {"DecorationBlock", SpvWord{2}},
        {"ExecutionModelTaskEXT", SpvWord{5364}},
        {"MemoryAccessMakePointerVisible", SpvWord{16}},
        {"DecorationGLSLPacked", SpvWord{9}},
        {"CapabilityShadingRateNV", SpvWord{5291}},
        {"CapabilityUSMStorageClassesINTEL", SpvWord{5935}},
        {"ExecutionModeSpacingFractionalEven", SpvWord{2}},
        {"BuiltInNumWorkgroups", SpvWord{24}},
        {"BuiltInCullDistance", SpvWord{4}},
        {"ExecutionModeOutputPrimitivesEXT", SpvWord{5270}},
        {"LoopControlDependencyArrayINTEL", SpvWord{262144}},
        {"DecorationFPMaxErrorDecorationINTEL", SpvWord{6170}},
        {"ImageChannelOrderIntensity", SpvWord{8}},
        {"DecorationRestrictPointerEXT", SpvWord{5355}},
        {"Dim2D", SpvWord{1}},
        {"ImageOperandsMakeTexelVisible", SpvWord{512}},
        {"CapabilityStorageTexelBufferArrayDynamicIndexing", SpvWord{5305}},
        {"ImageFormatR16ui", SpvWord{38}},
        {"CapabilityGroupNonUniformPartitionedNV", SpvWord{5297}},
        {"FunctionParameterAttributeRuntimeAlignedINTEL", SpvWord{5940}},
        {"BuiltInWarpMaxIDARM", SpvWord{4164}},
        {"CapabilityGroupNonUniformRotateKHR", SpvWord{6026}},
        {"CapabilityFPGAMemoryAccessesINTEL", SpvWord{5898}},
        {"MemorySemanticsOutputMemoryKHR", SpvWord{4096}},
        {"CapabilityKernelAttributesINTEL", SpvWord{5892}},
        {"RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR", SpvWord{0}},
        {"CapabilityShaderViewportMaskNV", SpvWord{5255}},
        {"ImageFormatRgba16", SpvWord{10}},
        {"CapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR", SpvWord{4429}},
        {"ExecutionModeEarlyFragmentTests", SpvWord{9}},
        {"ImageFormatRg8i", SpvWord{27}},
        {"CapabilityShaderViewportIndex", SpvWord{70}},
        {"BuiltInFragDepth", SpvWord{22}},
        {"MemoryAccessMakePointerAvailableKHR", SpvWord{8}},
        {"ImageFormatRg16Snorm", SpvWord{17}},
        {"MemorySemanticsAtomicCounterMemory", SpvWord{1024}},
        {"CapabilityShaderSMBuiltinsNV", SpvWord{5373}},
        {"LoopControlNone", SpvWord{0}},
        {"ImageChannelOrderRGx", SpvWord{11}},
        {"LoopControlMaxConcurrencyINTEL", SpvWord{131072}},
        {"CapabilityCooperativeMatrixKHR", SpvWord{6022}},
        {"CapabilityInt16", SpvWord{22}},
        {"CapabilityInt64Atomics", SpvWord{12}},
        {"DecorationLinkageAttributes", SpvWord{41}},
        {"CapabilityFPGADSPControlINTEL", SpvWord{5908}},
        {"CapabilityStorageImageArrayNonUniformIndexingEXT", SpvWord{5309}},
        {"BuiltInWorkgroupId", SpvWord{26}},
        {"CapabilityFPGALatencyControlINTEL", SpvWord{6171}},
        {"BuiltInPrimitiveIndicesNV", SpvWord{5276}},
        {"BuiltInRayTmaxKHR", SpvWord{5326}},
        {"CapabilityDerivativeControl", SpvWord{51}},
        {"DecorationBurstCoalesceINTEL", SpvWord{5899}},
        {"ExecutionModelTessellationControl", SpvWord{1}},
        {"CapabilityBindlessTextureNV", SpvWord{5390}},
        {"BuiltInHitKindKHR", SpvWord{5333}},
        {"CapabilityTessellationPointSize", SpvWord{23}},
        {"CapabilityInputAttachmentArrayDynamicIndexingEXT", SpvWord{5303}},
        {"RayFlagsForceOpacityMicromap2StateEXT", SpvWord{1024}},
        {"ExecutionModeSubgroupUniformControlFlowKHR", SpvWord{4421}},
        {"CapabilityDotProductInput4x8BitPackedKHR", SpvWord{6018}},
        {"ExecutionModelMeshNV", SpvWord{5268}},
        {"ImageChannelOrderRG", SpvWord{2}},
        {"GroupOperationClusteredReduce", SpvWord{3}},
        {"CapabilityRayQueryProvisionalKHR", SpvWord{4471}},
        {"ExecutionModelFragment", SpvWord{4}},
        {"BuiltInPrimitiveShadingRateKHR", SpvWord{4432}},
        {"ExecutionModelAnyHitKHR", SpvWord{5315}},
        {"DecorationBoundSamplerNV", SpvWord{5400}},
        {"DecorationNoSignedWrap", SpvWord{4469}},
        {"CapabilityInputAttachmentArrayNonUniformIndexingEXT", SpvWord{5310}},
        {"ExecutionModeStreamingInterfaceINTEL", SpvWord{6154}},
        {"StorageClassTileImageEXT", SpvWord{4172}},
        {"FPFastMathModeAllowReassocINTEL", SpvWord{131072}},
        {"CapabilityAtomicFloat64MinMaxEXT", SpvWord{5613}},
        {"AddressingModelPhysical32", SpvWord{1}},
        {"DecorationFuncParamAttr", SpvWord{38}},
        {"BuiltInSubgroupSize", SpvWord{36}},
        {"FPFastMathModeNSZ", SpvWord{4}},
        {"CapabilityUniformDecoration", SpvWord{71}},
        {"StorageClassGeneric", SpvWord{8}},
        {"ExecutionModeOutputLineStrip", SpvWord{28}},
        {"SamplerAddressingModeRepeat", SpvWord{3}},
        {"ExecutionModelTessellationEvaluation", SpvWord{2}},
        {"ExecutionModeSubgroupSize", SpvWord{35}},
        {"LoopControlIterationMultiple", SpvWord{64}},
        {"ExecutionModeDenormPreserve", SpvWord{4459}},
        {"ExecutionModeStencilRefGreaterFrontAMD", SpvWord{5080}},
        {"ExecutionModeOutputTrianglesNV", SpvWord{5298}},
        {"BuiltInCoreCountARM", SpvWord{4161}},
        {"DecorationPerVertexKHR", SpvWord{5285}},
        {"ExecutionModeDepthGreater", SpvWord{14}},
        {"AccessQualifierReadWrite", SpvWord{2}},
        {"ExecutionModeNumSIMDWorkitemsINTEL", SpvWord{5896}},
        {"BuiltInPrimitiveLineIndicesEXT", SpvWord{5295}},
        {"CapabilityRayTracingKHR", SpvWord{4479}},
        {"MemoryAccessMakePointerVisibleKHR", SpvWord{16}},
        {"DecorationMemoryINTEL", SpvWord{5826}},
        {"CapabilityFragmentBarycentricNV", SpvWord{5284}},
        {"FunctionParameterAttributeSret", SpvWord{3}},
        {"CapabilityGeometryPointSize", SpvWord{24}},
        {"BuiltInNumEnqueuedSubgroups", SpvWord{39}},
        {"LoopControlDontUnroll", SpvWord{2}},
        {"StorageClassWorkgroup", SpvWord{4}},
        {"SamplerFilterModeNearest", SpvWord{0}},
        {"DecorationStackCallINTEL", SpvWord{5627}},
        {"RayQueryIntersectionRayQueryCandidateIntersectionKHR", SpvWord{0}},
        {"BuiltInFragmentSizeNV", SpvWord{5292}},
        {"BuiltInBaryCoordNV", SpvWord{5286}},
        {"LoopControlInitiationIntervalINTEL", SpvWord{65536}},
        {"CapabilityMeshShadingEXT", SpvWord{5283}},
        {"SamplerAddressingModeNone", SpvWord{0}},
        {"BuiltInFragCoord", SpvWord{15}},
        {"ExecutionModelTaskNV", SpvWord{5267}},
        {"ImageFormatRg16ui", SpvWord{36}},
        {"CapabilityPipes", SpvWord{17}},
        {"ImageFormatRgba32f", SpvWord{1}},
        {"ExecutionModeDerivativeGroupLinearNV", SpvWord{5290}},
        {"ImageOperandsConstOffset", SpvWord{8}},
        {"CapabilityAddresses", SpvWord{4}},
        {"CapabilityInputAttachmentArrayNonUniformIndexing", SpvWord{5310}},
        {"FragmentShadingRateVertical2Pixels", SpvWord{1}},
        {"FPFastMathModeAllowRecip", SpvWord{8}},
        {"ImageFormatR64ui", SpvWord{40}},
        {"CapabilitySubgroupImageMediaBlockIOINTEL", SpvWord{5579}},
        {"DecorationMaxPrivateCopiesINTEL", SpvWord{5829}},
        {"DecorationStableKernelArgumentINTEL", SpvWord{6183}},
        {"BuiltInBaseInstance", SpvWord{4425}},
        {"BuiltInWorkDim", SpvWord{30}},
        {"CapabilityDeviceGroup", SpvWord{4437}},
        {"CapabilityStorageTexelBufferArrayNonUniformIndexing", SpvWord{5312}},
        {"BuiltInPositionPerViewNV", SpvWord{5261}},
        {"CapabilityMinLod", SpvWord{42}},
        {"CapabilityFragmentShaderSampleInterlockEXT", SpvWord{5363}},
        {"BuiltInWorkgroupSize", SpvWord{25}},
        {"StorageClassCallableDataNV", SpvWord{5328}},
        {"ExecutionModelRayGenerationNV", SpvWord{5313}},
        {"ExecutionModeDepthLess", SpvWord{15}},
        {"SamplerFilterModeLinear", SpvWord{1}},
        {"BuiltInObjectRayDirectionNV", SpvWord{5324}},
        {"CapabilityFloat16Buffer", SpvWord{8}},
        {"CapabilityIntegerFunctions2INTEL", SpvWord{5584}},
        {"LoopControlSpeculatedIterationsINTEL", SpvWord{4194304}},
        {"DecorationIOPipeStorageINTEL", SpvWord{5944}},
        {"BuiltInDeviceIndex", SpvWord{4438}},
        {"CapabilityVectorComputeINTEL", SpvWord{5617}},
        {"CapabilityUnstructuredLoopControlsINTEL", SpvWord{5886}},
        {"DecorationMatrixStride", SpvWord{7}},
        {"DecorationPatch", SpvWord{15}},
        {"BuiltInInstanceCustomIndexKHR", SpvWord{5327}},
        {"CapabilityFPGAKernelAttributesv2INTEL", SpvWord{6161}},
        {"BuiltInSecondaryPositionNV", SpvWord{5257}},
        {"ImageFormatRgb10A2", SpvWord{11}},
        {"CapabilitySubgroupShuffleINTEL", SpvWord{5568}},
        {"CapabilityRayTraversalPrimitiveCullingKHR", SpvWord{4478}},
        {"CapabilityAsmINTEL", SpvWord{5606}},
        {"ExecutionModeQuads", SpvWord{24}},
        {"DecorationRelaxedPrecision", SpvWord{0}},
        {"StorageClassShaderRecordBufferNV", SpvWord{5343}},
        {"ExecutionModeOriginUpperLeft", SpvWord{7}},
        {"CapabilityInt8", SpvWord{39}},
        {"CapabilityDotProductInputAll", SpvWord{6016}},
        {"CapabilityInterpolationFunction", SpvWord{52}},
        {"CapabilityGroupNonUniformBallot", SpvWord{64}},
        {"ExecutionModeRoundingModeRTPINTEL", SpvWord{5620}},
        {"CapabilityRoundToInfinityINTEL", SpvWord{5582}},
        {"CapabilityOptNoneINTEL", SpvWord{6094}},
        {"OverflowModesSAT_SYM", SpvWord{3}},
        {"CapabilityExpectAssumeKHR", SpvWord{5629}},
        {"DecorationSaturatedConversion", SpvWord{28}},
        {"CapabilityRuntimeAlignedAttributeINTEL", SpvWord{5939}},
        {"ImageFormatR32ui", SpvWord{33}},
        {"BuiltInGlobalLinearId", SpvWord{34}},
        {"ExecutionModeTriangles", SpvWord{22}},
        {"ImageOperandsNonPrivateTexel", SpvWord{1024}},
        {"SelectionControlDontFlatten", SpvWord{2}},
        {"BuiltInIncomingRayFlagsNV", SpvWord{5351}},
        {"BuiltInSMCountNV", SpvWord{5375}},
        {"CapabilitySubgroupImageBlockIOINTEL", SpvWord{5570}},
        {"DecorationSecondaryViewportRelativeNV", SpvWord{5256}},
        {"MemoryAccessAligned", SpvWord{2}},
        {"ExecutionModelCallableNV", SpvWord{5318}},
        {"CapabilityDenormFlushToZero", SpvWord{4465}},
        {"CapabilityComputeDerivativeGroupLinearNV", SpvWord{5350}},
        {"StorageClassCallableDataKHR", SpvWord{5328}},
        {"CapabilityFragmentBarycentricKHR", SpvWord{5284}},
        {"SourceLanguageOpenCL_CPP", SpvWord{4}},
        {"LinkageTypeExport", SpvWord{0}},
        {"DimBuffer", SpvWord{5}},
        {"DimRect", SpvWord{4}},
        {"ImageChannelDataTypeUnsignedIntRaw10EXT", SpvWord{19}},
        {"ExecutionModePixelInterlockOrderedEXT", SpvWord{5366}},
        {"CapabilityRoundingModeRTZ", SpvWord{4468}},
        {"ImageChannelDataTypeUnsignedInt16", SpvWord{11}},
        {"ImageChannelDataTypeSnormInt8", SpvWord{0}},
        {"CapabilityLoopFuseINTEL", SpvWord{5906}},
        {"GroupOperationExclusiveScan", SpvWord{2}},
        {"ImageChannelOrdersRGB", SpvWord{15}},
        {"DecorationNoPerspective", SpvWord{13}},
        {"BuiltInGlobalInvocationId", SpvWord{28}},
        {"CapabilityComputeDerivativeGroupQuadsNV", SpvWord{5288}},
        {"BuiltInPointCoord", SpvWord{16}},
        {"CapabilityFPGAClusterAttributesINTEL", SpvWord{5904}},
        {"ScopeQueueFamilyKHR", SpvWord{5}},
        {"GroupOperationPartitionedExclusiveScanNV", SpvWord{8}},
        {"BuiltInPrimitivePointIndicesEXT", SpvWord{5294}},
        {"DecorationPerTaskNV", SpvWord{5273}},
        {"CapabilityStoragePushConstant8", SpvWord{4450}},
        {"ImageChannelDataTypeSignedInt32", SpvWord{9}},
        {"ImageChannelOrderLuminance", SpvWord{9}},
        {"FPDenormModePreserve", SpvWord{0}},
        {"BuiltInLocalInvocationId", SpvWord{27}},
        {"ExecutionModelMissNV", SpvWord{5317}},
        {"CapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR", SpvWord{4430}},
        {"ImageChannelOrdersRGBx", SpvWord{16}},
        {"BuiltInSubgroupGtMask", SpvWord{4418}},
        {"FragmentShadingRateHorizontal2Pixels", SpvWord{4}},
        {"CapabilityAtomicFloat16AddEXT", SpvWord{6095}},
        {"ImageChannelOrdersBGRA", SpvWord{18}},
        {"DecorationConduitKernelArgumentINTEL", SpvWord{6175}},
        {"BuiltInTessLevelInner", SpvWord{12}},
        {"DecorationMaxByteOffsetId", SpvWord{47}},
        {"ExecutionModelAnyHitNV", SpvWord{5315}},
        {"CapabilityGroupNonUniformQuad", SpvWord{68}},
        {"CapabilityDotProductInputAllKHR", SpvWord{6016}},
        {"SourceLanguageWGSL", SpvWord{10}},
        {"ExecutionModeLocalSizeId", SpvWord{38}},
        {"StorageClassAtomicCounter", SpvWord{10}},
        {"CapabilityKernel", SpvWord{6}},
        {"DecorationAliasScopeINTEL", SpvWord{5914}},
        {"ImageOperandsMakeTexelVisibleKHR", SpvWord{512}},
        {"CapabilityInputAttachmentArrayDynamicIndexing", SpvWord{5303}},
        {"ExecutionModeInitializer", SpvWord{33}},
        {"BuiltInTessCoord", SpvWord{13}},
        {"RayFlagsSkipAABBsKHR", SpvWord{512}},
        {"MemorySemanticsRelaxed", SpvWord{0}},
        {"DecorationLatencyControlConstraintINTEL", SpvWord{6173}},
        {"CapabilityTessellation", SpvWord{3}},
        {"ExecutionModeSharedLocalMemorySizeINTEL", SpvWord{5618}},
        {"CooperativeMatrixOperandsMatrixResultSignedComponentsKHR", SpvWord{8}},
        {"BuiltInBaryCoordSmoothAMD", SpvWord{4995}},
        {"BuiltInRayTmaxNV", SpvWord{5326}},
        {"ExecutionModelGeometry", SpvWord{3}},
        {"ImageFormatRgb10a2ui", SpvWord{34}},
        {"ExecutionModelClosestHitNV", SpvWord{5316}},
        {"RayFlagsCullOpaqueKHR", SpvWord{64}},
        {"BuiltInCurrentRayTimeNV", SpvWord{5334}},
        {"CooperativeMatrixUseMatrixAccumulatorKHR", SpvWord{2}},
        {"BuiltInInvocationId", SpvWord{8}},
        {"DecorationMMHostInterfaceReadWriteModeINTEL", SpvWord{6180}},
        {"ExecutionModelGLCompute", SpvWord{5}},
        {"CapabilityGroupNonUniformShuffleRelative", SpvWord{66}},
        {"CapabilitySampledImageArrayNonUniformIndexing", SpvWord{5307}},
        {"CapabilityStorageBuffer8BitAccess", SpvWord{4448}},
        {"StorageClassPhysicalStorageBuffer", SpvWord{5349}},
        {"DecorationRowMajor", SpvWord{4}},
        {"CapabilitySubgroupVoteKHR", SpvWord{4431}},
        {"ExecutionModeShadingRateInterlockOrderedEXT", SpvWord{5370}},
        {"ImageChannelDataTypeUnormInt16", SpvWord{3}},
        {"FunctionParameterAttributeSext", SpvWord{1}},
        {"FPOperationModeALT", SpvWord{1}},
        {"RayFlagsCullFrontFacingTrianglesKHR", SpvWord{32}},
        {"RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR", SpvWord{1}},
        {"CapabilitySubgroupAvcMotionEstimationIntraINTEL", SpvWord{5697}},
        {"CapabilityFunctionPointersINTEL", SpvWord{5603}},
        {"ExecutionModeSampleInterlockUnorderedEXT", SpvWord{5369}},
        {"CapabilityUniformTexelBufferArrayNonUniformIndexing", SpvWord{5311}},
        {"BuiltInWarpIDARM", SpvWord{4163}},
        {"CapabilityStorageImageExtendedFormats", SpvWord{49}},
        {"CapabilityBlockingPipesINTEL", SpvWord{5945}},
        {"ExecutionModeXfb", SpvWord{11}},
        {"BuiltInSubgroupEqMaskKHR", SpvWord{4416}},
        {"BuiltInDrawIndex", SpvWord{4426}},
        {"ImageChannelDataTypeUnormInt101010_2", SpvWord{16}},
        {"CapabilityVulkanMemoryModelDeviceScopeKHR", SpvWord{5346}},
        {"ExecutionModeDenormFlushToZero", SpvWord{4460}},
        {"CapabilityStorageTexelBufferArrayNonUniformIndexingEXT", SpvWord{5312}},
        {"BuiltInGlobalSize", SpvWord{31}},
        {"BuiltInWarpIDNV", SpvWord{5376}},
        {"CapabilitySparseResidency", SpvWord{41}},
        {"CapabilityImage1D", SpvWord{44}},
        {"ImageFormatR16Snorm", SpvWord{19}},
        {"ImageFormatR16f", SpvWord{9}},
        {"DecorationNumbanksINTEL", SpvWord{5827}},
        {"SamplerAddressingModeClampToEdge", SpvWord{1}},
        {"DecorationBindlessImageNV", SpvWord{5399}},
        {"DecorationGlobalVariableOffsetINTEL", SpvWord{5628}},
        {"StorageClassPushConstant", SpvWord{9}},
        {"BuiltInSamplePosition", SpvWord{19}},
        {"BuiltInWorldRayDirectionNV", SpvWord{5322}},
        {"ScopeWorkgroup", SpvWord{2}},
        {"DecorationBufferLocationINTEL", SpvWord{5921}},
        {"BuiltInIncomingRayFlagsKHR", SpvWord{5351}},
        {"CapabilityGroupNonUniformClustered", SpvWord{67}},
        {"DecorationOffset", SpvWord{35}},
        {"StorageClassPhysicalStorageBufferEXT", SpvWord{5349}},
        {"BuiltInViewportMaskNV", SpvWord{5253}},
        {"MemoryModelGLSL450", SpvWord{1}},
        {"BuiltInBaryCoordSmoothSampleAMD", SpvWord{4997}},
        {"CapabilityGeometry", SpvWord{2}},
        {"BuiltInViewportMaskPerViewNV", SpvWord{5262}},
        {"ExecutionModeFloatingPointModeALTINTEL", SpvWord{5622}},
        {"ExecutionModeFinalizer", SpvWord{34}},
        {"CapabilityTileImageDepthReadAccessEXT", SpvWord{4167}},
        {"BuiltInBaryCoordNoPerspCentroidAMD", SpvWord{4993}},
        {"BuiltInBaryCoordKHR", SpvWord{5286}},
        {"CapabilitySubgroupAvcMotionEstimationINTEL", SpvWord{5696}},
        {"RayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR", SpvWord{1}},
        {"CapabilityTextureBoxFilterQCOM", SpvWord{4485}},
        {"KernelProfilingInfoCmdExecTime", SpvWord{1}},
        {"BuiltInFrontFacing", SpvWord{17}},
        {"CapabilityDrawParameters", SpvWord{4427}},
        {"ImageChannelDataTypeUnormShort555", SpvWord{5}},
        {"KernelProfilingInfoNone", SpvWord{0}},
        {"ImageFormatUnknown", SpvWord{0}},
        {"GroupOperationPartitionedReduceNV", SpvWord{6}},
        {"BuiltInLaunchIdKHR", SpvWord{5319}},
        {"ImageFormatR8Snorm", SpvWord{20}},
        {"CapabilityFPGABufferLocationINTEL", SpvWord{5920}},
        {"BuiltInObjectRayDirectionKHR", SpvWord{5324}},
        {"ExecutionModelVertex", SpvWord{0}},
        {"BuiltInSecondaryViewportMaskNV", SpvWord{5258}},
        {"DecorationInputAttachmentIndex", SpvWord{43}},
        {"CapabilityRuntimeDescriptorArray", SpvWord{5302}},
        {"LoopControlDependencyInfinite", SpvWord{4}},
        {"GroupOperationPartitionedInclusiveScanNV", SpvWord{7}},
        {"ImageFormatRgba8i", SpvWord{23}},
        {"CapabilityShaderNonUniformEXT", SpvWord{5301}},
        {"DecorationMaxReplicatesINTEL", SpvWord{5832}},
        {"CapabilityRayTracingOpacityMicromapEXT", SpvWord{5381}},
        {"ExecutionModeSignedZeroInfNanPreserve", SpvWord{4461}},
        {"ImageOperandsLod", SpvWord{2}},
        {"ExecutionModeMaxWorkgroupSizeINTEL", SpvWord{5893}},
        {"LinkageTypeImport", SpvWord{1}},
        {"RayFlagsNoneKHR", SpvWord{0}},
        {"BuiltInLocalInvocationIndex", SpvWord{29}},
        {"BuiltInBaryCoordNoPerspNV", SpvWord{5287}},
        {"DecorationViewportRelativeNV", SpvWord{5252}},
        {"ExecutionModeStencilRefUnchangedFrontAMD", SpvWord{5079}},
        {"ScopeCrossDevice", SpvWord{0}},
        {"CapabilityGenericPointer", SpvWord{38}},
        {"FPRoundingModeRTP", SpvWord{2}},
        {"KernelEnqueueFlagsWaitWorkGroup", SpvWord{2}},
        {"DecorationPipelineEnableINTEL", SpvWord{5919}},
        {"ImageFormatRgba16ui", SpvWord{31}},
        {"FunctionParameterAttributeByVal", SpvWord{2}},
        {"MemoryModelVulkan", SpvWord{3}},
        {"ImageFormatRg8", SpvWord{13}},
        {"QuantizationModesRND_ZERO", SpvWord{3}},
        {"MemorySemanticsUniformMemory", SpvWord{64}},
        {"CapabilityImageRect", SpvWord{36}},
        {"ExecutionModeRegisterMapInterfaceINTEL", SpvWord{6160}},
        {"BuiltInObjectRayOriginNV", SpvWord{5323}},
        {"CapabilityPhysicalStorageBufferAddressesEXT", SpvWord{5347}},
        {"StorageClassIncomingCallableDataKHR", SpvWord{5329}},
        {"AddressingModelPhysical64", SpvWord{2}},
        {"FPFastMathModeFast", SpvWord{16}},
        {"ExecutionModeFloatingPointModeIEEEINTEL", SpvWord{5623}},
        {"BuiltInClipDistancePerViewNV", SpvWord{5277}},
        {"FPRoundingModeRTN", SpvWord{3}},
        {"PackedVectorFormatPackedVectorFormat4x8BitKHR", SpvWord{0}},
        {"DecorationOverrideCoverageNV", SpvWord{5248}},
        {"FunctionControlConst", SpvWord{8}},
        {"ImageFormatRg16", SpvWord{12}},
        {"ExecutionModePixelInterlockUnorderedEXT", SpvWord{5367}},
        {"CapabilityPipeStorage", SpvWord{60}},
        {"SourceLanguageCPP_for_OpenCL", SpvWord{6}},
        {"ImageFormatRg16i", SpvWord{26}},
        {"ScopeQueueFamily", SpvWord{5}},
        {"DecorationFPFastMathMode", SpvWord{40}},
        {"CapabilityVector16", SpvWord{7}},
        {"AddressingModelLogical", SpvWord{0}},
        {"ImageFormatRg32f", SpvWord{6}},
        {"ExecutionModeNonCoherentStencilAttachmentReadEXT", SpvWord{4171}},
        {"ExecutionModeRoundingModeRTE", SpvWord{4462}},
        {"ImageOperandsNonPrivateTexelKHR", SpvWord{1024}},
        {"CapabilitySampledCubeArray", SpvWord{45}},
        {"ImageOperandsNone", SpvWord{0}},
        {"DecorationFuseLoopsInFunctionINTEL", SpvWord{5907}},
        {"FPRoundingModeRTZ", SpvWord{1}},
        {"CapabilityStorageBufferArrayNonUniformIndexing", SpvWord{5308}},
        {"CapabilityShaderLayer", SpvWord{69}},
        {"MemorySemanticsMakeAvailableKHR", SpvWord{8192}},
        {"BuiltInNumSubgroups", SpvWord{38}},
        {"ImageFormatRg16f", SpvWord{7}},
        {"SelectionControlFlatten", SpvWord{1}},
        {"DecorationReferencedIndirectlyINTEL", SpvWord{5602}},
        {"DecorationBankBitsINTEL", SpvWord{5835}},
        {"BuiltInFullyCoveredEXT", SpvWord{5264}},
        {"CooperativeMatrixLayoutRowMajorKHR", SpvWord{0}},
        {"DecorationBindlessSamplerNV", SpvWord{5398}},
        {"ExecutionModeOutputLinesNV", SpvWord{5269}},
        {"ImageOperandsMinLod", SpvWord{128}},
        {"QuantizationModesRND_CONV_ODD", SpvWord{7}},
        {"StorageClassUniform", SpvWord{2}},
        {"ImageChannelDataTypeUnormInt101010", SpvWord{6}},
        {"BuiltInSubgroupGeMaskKHR", SpvWord{4417}},
        {"ExecutionModeStencilRefLessFrontAMD", SpvWord{5081}},
        {"CooperativeMatrixUseMatrixBKHR", SpvWord{1}},
        {"CapabilitySampledBuffer", SpvWord{46}},
        {"MemorySemanticsCrossWorkgroupMemory", SpvWord{512}},
        {"LoopControlPartialCount", SpvWord{256}},
        {"CapabilityGeometryStreams", SpvWord{54}},
        {"BuiltInTaskCountNV", SpvWord{5274}},
        {"CapabilityDeviceEnqueue", SpvWord{19}},
        {"ExecutionModeStencilRefReplacingEXT", SpvWord{5027}},
        {"BuiltInBaryCoordNoPerspAMD", SpvWord{4992}},
        {"CapabilityImageBasic", SpvWord{13}},
        {"GroupOperationInclusiveScan", SpvWord{1}},
        {"AccessQualifierWriteOnly", SpvWord{1}},
        {"ExecutionModeVecTypeHint", SpvWord{30}},
        {"DecorationInitiationIntervalINTEL", SpvWord{5917}},
        {"ExecutionModePixelCenterInteger", SpvWord{6}},
        {"CapabilityArbitraryPrecisionFloatingPointINTEL", SpvWord{5845}},
        {"CapabilitySampleMaskPostDepthCoverage", SpvWord{4447}},
        {"CapabilityFPGAInvocationPipeliningAttributesINTEL", SpvWord{5916}},
        {"DecorationInvariant", SpvWord{18}},
        {"DecorationCacheSizeINTEL", SpvWord{5900}},
        {"DecorationBoundImageNV", SpvWord{5401}},
        {"LoopControlMaxReinvocationDelayINTEL", SpvWord{33554432}},
        {"CapabilityFPGAArgumentInterfacesINTEL", SpvWord{6174}},
        {"ImageFormatRgba8ui", SpvWord{32}},
        {"OverflowModesSAT_ZERO", SpvWord{2}},
        {"CapabilityDemoteToHelperInvocation", SpvWord{5379}},
        {"BuiltInLaunchIdNV", SpvWord{5319}},
        {"OverflowModesSAT", SpvWord{1}},
        {"LoopControlLoopCountINTEL", SpvWord{16777216}},
        {"DecorationFuncParamIOKindINTEL", SpvWord{5625}},
        {"CapabilityRayQueryPositionFetchKHR", SpvWord{5391}},
        {"DecorationSinglepumpINTEL", SpvWord{5830}},
        {"ImageOperandsGrad", SpvWord{4}},
        {"DecorationMMHostInterfaceWaitRequestINTEL", SpvWord{6182}},
        {"CapabilityImageFootprintNV", SpvWord{5282}},
        {"MemoryAccessNone", SpvWord{0}},
        {"StorageClassStorageBuffer", SpvWord{12}},
        {"ExecutionModeNamedBarrierCountINTEL", SpvWord{6417}},
        {"DecorationXfbStride", SpvWord{37}},
        {"CapabilityUniformTexelBufferArrayDynamicIndexingEXT", SpvWord{5304}},
        {"CapabilityStorageImageArrayDynamicIndexing", SpvWord{31}},
    };

    static const auto hash = [](const UnownedStringSlice& str, UInt32 salt){
        return combineHash(getHashCode(str), getHashCode(salt)) % 944;
    };

    const auto i = hash(str, tableSalt[hash(str, 0)]);
    if(str == words[i].first)
    {
        value = words[i].second;
        return true;
    }
    else
    {
        return false;
    }
}

static bool getOpInfo(const SpvOp& k, SPIRVCoreGrammarInfo::OpInfo& v)
{
    switch(k)
    {
        case SpvOpNop:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpUndef:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpSourceContinued:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpSource:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 5};
            return true;
        case SpvOpSourceExtension:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpName:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpMemberName:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpString:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 3, 3};
            return true;
        case SpvOpLine:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpExtension:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpExtInstImport:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 3, 3};
            return true;
        case SpvOpExtInst:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 0xffff};
            return true;
        case SpvOpMemoryModel:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpEntryPoint:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 0xffff};
            return true;
        case SpvOpExecutionMode:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpCapability:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpTypeVoid:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypeBool:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypeInt:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 4, 4};
            return true;
        case SpvOpTypeFloat:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 3};
            return true;
        case SpvOpTypeVector:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 4, 4};
            return true;
        case SpvOpTypeMatrix:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 4, 4};
            return true;
        case SpvOpTypeImage:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 9, 10};
            return true;
        case SpvOpTypeSampler:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypeSampledImage:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 3};
            return true;
        case SpvOpTypeArray:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 4, 4};
            return true;
        case SpvOpTypeRuntimeArray:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 3};
            return true;
        case SpvOpTypeStruct:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 0xffff};
            return true;
        case SpvOpTypeOpaque:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 3};
            return true;
        case SpvOpTypePointer:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 4, 4};
            return true;
        case SpvOpTypeFunction:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 0xffff};
            return true;
        case SpvOpTypeEvent:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypeDeviceEvent:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypeReserveId:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypeQueue:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpTypePipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 3};
            return true;
        case SpvOpTypeForwardPointer:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, -1, 3, 3};
            return true;
        case SpvOpConstantTrue:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 3};
            return true;
        case SpvOpConstantFalse:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 3};
            return true;
        case SpvOpConstant:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 4, 4};
            return true;
        case SpvOpConstantComposite:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 0xffff};
            return true;
        case SpvOpConstantSampler:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 6, 6};
            return true;
        case SpvOpConstantNull:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 3};
            return true;
        case SpvOpSpecConstantTrue:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 3};
            return true;
        case SpvOpSpecConstantFalse:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 3};
            return true;
        case SpvOpSpecConstant:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 4, 4};
            return true;
        case SpvOpSpecConstantComposite:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 3, 0xffff};
            return true;
        case SpvOpSpecConstantOp:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, 0, 1, 4, 4};
            return true;
        case SpvOpFunction:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFunctionParameter:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpFunctionEnd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpFunctionCall:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 0xffff};
            return true;
        case SpvOpVariable:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 5};
            return true;
        case SpvOpImageTexelPointer:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpLoad:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 5};
            return true;
        case SpvOpStore:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 4};
            return true;
        case SpvOpCopyMemory:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 5};
            return true;
        case SpvOpCopyMemorySized:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 6};
            return true;
        case SpvOpAccessChain:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 0xffff};
            return true;
        case SpvOpInBoundsAccessChain:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 0xffff};
            return true;
        case SpvOpPtrAccessChain:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 0xffff};
            return true;
        case SpvOpArrayLength:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGenericPtrMemSemantics:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpInBoundsPtrAccessChain:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 0xffff};
            return true;
        case SpvOpDecorate:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpMemberDecorate:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpDecorationGroup:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpGroupDecorate:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 0xffff};
            return true;
        case SpvOpGroupMemberDecorate:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 0xffff};
            return true;
        case SpvOpVectorExtractDynamic:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpVectorInsertDynamic:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpVectorShuffle:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 0xffff};
            return true;
        case SpvOpCompositeConstruct:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 0xffff};
            return true;
        case SpvOpCompositeExtract:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 0xffff};
            return true;
        case SpvOpCompositeInsert:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 0xffff};
            return true;
        case SpvOpCopyObject:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpTranspose:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSampledImage:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpImageSampleImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageSampleExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageSampleDrefImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageSampleDrefExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpImageSampleProjImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageSampleProjExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageSampleProjDrefImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageSampleProjDrefExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpImageFetch:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageGather:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageDrefGather:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageRead:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageWrite:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 5};
            return true;
        case SpvOpImage:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpImageQueryFormat:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpImageQueryOrder:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpImageQuerySizeLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpImageQuerySize:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpImageQueryLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpImageQueryLevels:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpImageQuerySamples:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertFToU:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertFToS:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertSToF:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertUToF:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpUConvert:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSConvert:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpFConvert:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpQuantizeToF16:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertPtrToU:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSatConvertSToU:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSatConvertUToS:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertUToPtr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpPtrCastToGeneric:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpGenericCastToPtr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpGenericCastToPtrExplicit:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpBitcast:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSNegate:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpFNegate:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpIAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpISub:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFSub:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIMul:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFMul:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUDiv:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSDiv:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFDiv:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUMod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSRem:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSMod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFRem:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFMod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpVectorTimesScalar:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpMatrixTimesScalar:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpVectorTimesMatrix:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpMatrixTimesVector:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpMatrixTimesMatrix:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpOuterProduct:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpDot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIAddCarry:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpISubBorrow:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUMulExtended:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSMulExtended:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpAny:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpAll:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpIsNan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpIsInf:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpIsFinite:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpIsNormal:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSignBitSet:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpLessOrGreater:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpOrdered:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUnordered:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpLogicalEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpLogicalNotEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpLogicalOr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpLogicalAnd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpLogicalNot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSelect:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpIEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpINotEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUGreaterThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSGreaterThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUGreaterThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSGreaterThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpULessThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSLessThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpULessThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSLessThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFOrdEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFUnordEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFOrdNotEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFUnordNotEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFOrdLessThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFUnordLessThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFOrdGreaterThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFUnordGreaterThan:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFOrdLessThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFUnordLessThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFOrdGreaterThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFUnordGreaterThanEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpShiftRightLogical:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpShiftRightArithmetic:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpShiftLeftLogical:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpBitwiseOr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpBitwiseXor:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpBitwiseAnd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpNot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpBitFieldInsert:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpBitFieldSExtract:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpBitFieldUExtract:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpBitReverse:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpBitCount:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpDPdx:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpDPdy:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpFwidth:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpDPdxFine:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpDPdyFine:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpFwidthFine:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpDPdxCoarse:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpDPdyCoarse:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpFwidthCoarse:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpEmitVertex:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpEndPrimitive:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpEmitStreamVertex:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpEndStreamPrimitive:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpControlBarrier:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpMemoryBarrier:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpAtomicLoad:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpAtomicStore:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 5, 5};
            return true;
        case SpvOpAtomicExchange:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicCompareExchange:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpAtomicCompareExchangeWeak:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpAtomicIIncrement:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpAtomicIDecrement:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpAtomicIAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicISub:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicSMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicUMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicSMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicUMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicAnd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicOr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicXor:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpPhi:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 0xffff};
            return true;
        case SpvOpLoopMerge:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpSelectionMerge:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpLabel:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpBranch:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpBranchConditional:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 0xffff};
            return true;
        case SpvOpSwitch:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 0xffff};
            return true;
        case SpvOpKill:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpReturn:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpReturnValue:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpUnreachable:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpLifetimeStart:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpLifetimeStop:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpGroupAsyncCopy:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpGroupWaitEvents:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpGroupAll:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupAny:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupBroadcast:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupIAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupUMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupSMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupUMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupSMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpReadPipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpWritePipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpReservedReadPipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpReservedWritePipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpReserveReadPipePackets:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpReserveWritePipePackets:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpCommitReadPipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 5, 5};
            return true;
        case SpvOpCommitWritePipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 5, 5};
            return true;
        case SpvOpIsValidReserveId:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpGetNumPipePackets:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGetMaxPipePackets:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupReserveReadPipePackets:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpGroupReserveWritePipePackets:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpGroupCommitReadPipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 6, 6};
            return true;
        case SpvOpGroupCommitWritePipe:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 6, 6};
            return true;
        case SpvOpEnqueueMarker:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpEnqueueKernel:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 13, 0xffff};
            return true;
        case SpvOpGetKernelNDrangeSubGroupCount:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpGetKernelNDrangeMaxSubGroupSize:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpGetKernelWorkGroupSize:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpGetKernelPreferredWorkGroupSizeMultiple:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpRetainEvent:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpReleaseEvent:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpCreateUserEvent:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpIsValidEvent:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSetUserEventStatus:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpCaptureEventProfilingInfo:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpGetDefaultQueue:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpBuildNDRange:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageSparseSampleImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageSparseSampleExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageSparseSampleDrefImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageSparseSampleDrefExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpImageSparseSampleProjImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageSparseSampleProjExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageSparseSampleProjDrefImplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageSparseSampleProjDrefExplicitLod:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpImageSparseFetch:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpImageSparseGather:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageSparseDrefGather:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpImageSparseTexelsResident:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpNoLine:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpAtomicFlagTestAndSet:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpAtomicFlagClear:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpImageSparseRead:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpSizeOf:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpTypePipeStorage:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpConstantPipeStorage:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpCreatePipeFromPipeStorage:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpGetKernelLocalSizeForSubgroupCount:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpGetKernelMaxNumSubgroups:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpTypeNamedBarrier:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 2, 2};
            return true;
        case SpvOpNamedBarrierInitialize:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpMemoryNamedBarrier:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpModuleProcessed:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpExecutionModeId:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpDecorateId:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpGroupNonUniformElect:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpGroupNonUniformAll:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformAny:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformAllEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformBroadcast:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformBroadcastFirst:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformBallot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformInverseBallot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformBallotBitExtract:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformBallotBitCount:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformBallotFindLSB:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformBallotFindMSB:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpGroupNonUniformShuffle:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformShuffleXor:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformShuffleUp:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformShuffleDown:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformIAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformFAdd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformIMul:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformFMul:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformSMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformUMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformFMin:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformSMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformUMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformFMax:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformBitwiseAnd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformBitwiseOr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformBitwiseXor:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformLogicalAnd:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformLogicalOr:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformLogicalXor:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpGroupNonUniformQuadBroadcast:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupNonUniformQuadSwap:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpCopyLogical:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpPtrEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpPtrNotEqual:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpPtrDiff:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpColorAttachmentReadEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 5};
            return true;
        case SpvOpDepthAttachmentReadEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 4};
            return true;
        case SpvOpStencilAttachmentReadEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 4};
            return true;
        case SpvOpTerminateInvocation:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpSubgroupBallotKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupFirstInvocationKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAllKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAnyKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAllEqualKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpGroupNonUniformRotateKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpSubgroupReadInvocationKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpTraceRayKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 12, 12};
            return true;
        case SpvOpExecuteCallableKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpConvertUToAccelerationStructureKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpIgnoreIntersectionKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpTerminateRayKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpSDot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpUDot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpSUDot:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 6};
            return true;
        case SpvOpSDotAccSat:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpUDotAccSat:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpSUDotAccSat:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpTypeCooperativeMatrixKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 7, 7};
            return true;
        case SpvOpCooperativeMatrixLoadKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 7};
            return true;
        case SpvOpCooperativeMatrixStoreKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 6};
            return true;
        case SpvOpCooperativeMatrixMulAddKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpCooperativeMatrixLengthKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpTypeRayQueryKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpRayQueryInitializeKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 9, 9};
            return true;
        case SpvOpRayQueryTerminateKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpRayQueryGenerateIntersectionKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpRayQueryConfirmIntersectionKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpRayQueryProceedKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpRayQueryGetIntersectionTypeKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpImageSampleWeightedQCOM:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageBoxFilterQCOM:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpImageBlockMatchSSDQCOM:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpImageBlockMatchSADQCOM:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpGroupIAddNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFAddNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFMinNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupUMinNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupSMinNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFMaxNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupUMaxNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupSMaxNonUniformAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpFragmentMaskFetchAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFragmentFetchAMD:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpReadClockKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectRecordHitMotionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 15, 15};
            return true;
        case SpvOpHitObjectRecordHitWithIndexMotionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 14, 14};
            return true;
        case SpvOpHitObjectRecordMissMotionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 8, 8};
            return true;
        case SpvOpHitObjectGetWorldToObjectNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetObjectToWorldNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetObjectRayDirectionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetObjectRayOriginNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectTraceRayMotionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 14, 14};
            return true;
        case SpvOpHitObjectGetShaderRecordBufferHandleNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetShaderBindingTableRecordIndexNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectRecordEmptyNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpHitObjectTraceRayNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 13, 13};
            return true;
        case SpvOpHitObjectRecordHitNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 14, 14};
            return true;
        case SpvOpHitObjectRecordHitWithIndexNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 13, 13};
            return true;
        case SpvOpHitObjectRecordMissNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 7, 7};
            return true;
        case SpvOpHitObjectExecuteShaderNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpHitObjectGetCurrentTimeNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetAttributesNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpHitObjectGetHitKindNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetPrimitiveIndexNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetGeometryIndexNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetInstanceIdNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetInstanceCustomIndexNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetWorldRayDirectionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetWorldRayOriginNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetRayTMaxNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectGetRayTMinNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectIsEmptyNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectIsHitNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpHitObjectIsMissNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpReorderThreadWithHitObjectNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 4};
            return true;
        case SpvOpReorderThreadWithHintNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpTypeHitObjectNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpImageSampleFootprintNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 8};
            return true;
        case SpvOpEmitMeshTasksEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 5};
            return true;
        case SpvOpSetMeshOutputsEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpGroupNonUniformPartitionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpWritePackedPrimitiveIndices4x8NV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpReportIntersectionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIgnoreIntersectionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpTerminateRayNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpTraceNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 12, 12};
            return true;
        case SpvOpTraceMotionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 13, 13};
            return true;
        case SpvOpTraceRayMotionNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 13, 13};
            return true;
        case SpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpTypeAccelerationStructureNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpExecuteCallableNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpTypeCooperativeMatrixNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 6, 6};
            return true;
        case SpvOpCooperativeMatrixLoadNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 7};
            return true;
        case SpvOpCooperativeMatrixStoreNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 5, 6};
            return true;
        case SpvOpCooperativeMatrixMulAddNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpCooperativeMatrixLengthNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpBeginInvocationInterlockEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpEndInvocationInterlockEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpDemoteToHelperInvocation:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 1};
            return true;
        case SpvOpIsHelperInvocationEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpConvertUToImageNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertUToSamplerNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertImageToUNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertSamplerToUNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertUToSampledImageNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertSampledImageToUNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSamplerImageAddressingModeNV:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpSubgroupShuffleINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupShuffleDownINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupShuffleUpINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupShuffleXorINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupBlockReadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupBlockWriteINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpSubgroupImageBlockReadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupImageBlockWriteINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpSubgroupImageMediaBlockReadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupImageMediaBlockWriteINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 6, 6};
            return true;
        case SpvOpUCountLeadingZerosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpUCountTrailingZerosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpAbsISubINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpAbsUSubINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIAddSatINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUAddSatINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIAverageINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUAverageINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIAverageRoundedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUAverageRoundedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpISubSatINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUSubSatINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpIMul32x16INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpUMul32x16INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpConstantFunctionPointerINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpFunctionPointerCallINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 0xffff};
            return true;
        case SpvOpAsmTargetINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpAsmINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAsmCallINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 0xffff};
            return true;
        case SpvOpAtomicFMinEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAtomicFMaxEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpAssumeTrueKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpExpectKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpDecorateString:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 3, 3};
            return true;
        case SpvOpMemberDecorateString:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpVmeImageINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpTypeVmeImageINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 3, 3};
            return true;
        case SpvOpTypeAvcImePayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcRefPayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcSicPayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcMcePayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcMceResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcImeResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcImeSingleReferenceStreaminINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcImeDualReferenceStreaminINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcRefResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpTypeAvcSicResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 2};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcMceConvertToImePayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceConvertToImeResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceConvertToRefPayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceConvertToRefResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceConvertToSicPayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceConvertToSicResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetMotionVectorsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterDistortionsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterMajorShapeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterMinorShapeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterDirectionsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeInitializeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeSetSingleReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeSetDualReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcImeRefWindowSizeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeAdjustRefOffsetINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcImeConvertToMcePayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeSetWeightedSadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpSubgroupAvcImeConvertToMceResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcImeGetBorderReachedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcFmeInitializeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpSubgroupAvcBmeInitializeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpSubgroupAvcRefConvertToMcePayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcRefConvertToMceResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicInitializeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicConfigureSkcINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpSubgroupAvcSicConfigureIpeLumaINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 14, 14};
            return true;
        case SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcSicConvertToMcePayloadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcSicEvaluateIpeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpSubgroupAvcSicConvertToMceResultINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetIpeChromaModeINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSubgroupAvcSicGetInterRawSadsINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpVariableLengthArrayINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpSaveMemoryINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 3, 3};
            return true;
        case SpvOpRestoreMemoryINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 2, 2};
            return true;
        case SpvOpArbitraryFloatSinCosPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpArbitraryFloatCastINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatCastFromIntINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatCastToIntINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 8, 8};
            return true;
        case SpvOpArbitraryFloatAddINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatSubINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatMulINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatDivINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatGTINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpArbitraryFloatGEINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpArbitraryFloatLTINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpArbitraryFloatLEINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpArbitraryFloatEQINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpArbitraryFloatRecipINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatRSqrtINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatCbrtINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatHypotINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatSqrtINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatLogINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatLog2INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatLog10INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatLog1pINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatExpINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatExp2INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatExp10INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatExpm1INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatSinINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatCosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatSinCosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatSinPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatCosPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatASinINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatASinPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatACosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatACosPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatATanINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatATanPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 9, 9};
            return true;
        case SpvOpArbitraryFloatATan2INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatPowINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatPowRINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 11, 11};
            return true;
        case SpvOpArbitraryFloatPowNINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpLoopControlINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 1, 0xffff};
            return true;
        case SpvOpAliasDomainDeclINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 3};
            return true;
        case SpvOpAliasScopeDeclINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 3, 4};
            return true;
        case SpvOpAliasScopeListDeclINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, 0, 2, 0xffff};
            return true;
        case SpvOpFixedSqrtINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedRecipINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedRsqrtINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedSinINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedCosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedSinCosINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedSinPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedCosPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedSinCosPiINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedLogINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpFixedExpINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 10, 10};
            return true;
        case SpvOpPtrCastToCrossWorkgroupINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpCrossWorkgroupCastToPtrINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpReadPipeBlockingINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpWritePipeBlockingINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpFPGARegINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetRayTMinKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpRayQueryGetRayFlagsKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpRayQueryGetIntersectionTKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionInstanceIdKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionGeometryIndexKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionPrimitiveIndexKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionBarycentricsKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionFrontFaceKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpRayQueryGetIntersectionObjectRayDirectionKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionObjectRayOriginKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetWorldRayDirectionKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpRayQueryGetWorldRayOriginKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpRayQueryGetIntersectionObjectToWorldKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpRayQueryGetIntersectionWorldToObjectKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 5, 5};
            return true;
        case SpvOpAtomicFAddEXT:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 7, 7};
            return true;
        case SpvOpTypeBufferSurfaceINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, 0, 3, 3};
            return true;
        case SpvOpTypeStructContinuedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::TypeDeclaration, -1, -1, 1, 0xffff};
            return true;
        case SpvOpConstantCompositeContinuedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, -1, -1, 1, 0xffff};
            return true;
        case SpvOpSpecConstantCompositeContinuedINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::ConstantCreation, -1, -1, 1, 0xffff};
            return true;
        case SpvOpConvertFToBF16INTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpConvertBF16ToFINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 4, 4};
            return true;
        case SpvOpControlBarrierArriveINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpControlBarrierWaitINTEL:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, -1, -1, 4, 4};
            return true;
        case SpvOpGroupIMulKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupFMulKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupBitwiseAndKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupBitwiseOrKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupBitwiseXorKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupLogicalAndKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupLogicalOrKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        case SpvOpGroupLogicalXorKHR:
            v = {SPIRVCoreGrammarInfo::OpInfo::Other, 0, 1, 6, 6};
            return true;
        default: return false;
    }
}

static bool getOpName(const SpvOp& k, UnownedStringSlice& v)
{
    switch(k)
    {
        case SpvOpNop:
            v = UnownedStringSlice{"OpNop"};
            return true;
        case SpvOpUndef:
            v = UnownedStringSlice{"OpUndef"};
            return true;
        case SpvOpSourceContinued:
            v = UnownedStringSlice{"OpSourceContinued"};
            return true;
        case SpvOpSource:
            v = UnownedStringSlice{"OpSource"};
            return true;
        case SpvOpSourceExtension:
            v = UnownedStringSlice{"OpSourceExtension"};
            return true;
        case SpvOpName:
            v = UnownedStringSlice{"OpName"};
            return true;
        case SpvOpMemberName:
            v = UnownedStringSlice{"OpMemberName"};
            return true;
        case SpvOpString:
            v = UnownedStringSlice{"OpString"};
            return true;
        case SpvOpLine:
            v = UnownedStringSlice{"OpLine"};
            return true;
        case SpvOpExtension:
            v = UnownedStringSlice{"OpExtension"};
            return true;
        case SpvOpExtInstImport:
            v = UnownedStringSlice{"OpExtInstImport"};
            return true;
        case SpvOpExtInst:
            v = UnownedStringSlice{"OpExtInst"};
            return true;
        case SpvOpMemoryModel:
            v = UnownedStringSlice{"OpMemoryModel"};
            return true;
        case SpvOpEntryPoint:
            v = UnownedStringSlice{"OpEntryPoint"};
            return true;
        case SpvOpExecutionMode:
            v = UnownedStringSlice{"OpExecutionMode"};
            return true;
        case SpvOpCapability:
            v = UnownedStringSlice{"OpCapability"};
            return true;
        case SpvOpTypeVoid:
            v = UnownedStringSlice{"OpTypeVoid"};
            return true;
        case SpvOpTypeBool:
            v = UnownedStringSlice{"OpTypeBool"};
            return true;
        case SpvOpTypeInt:
            v = UnownedStringSlice{"OpTypeInt"};
            return true;
        case SpvOpTypeFloat:
            v = UnownedStringSlice{"OpTypeFloat"};
            return true;
        case SpvOpTypeVector:
            v = UnownedStringSlice{"OpTypeVector"};
            return true;
        case SpvOpTypeMatrix:
            v = UnownedStringSlice{"OpTypeMatrix"};
            return true;
        case SpvOpTypeImage:
            v = UnownedStringSlice{"OpTypeImage"};
            return true;
        case SpvOpTypeSampler:
            v = UnownedStringSlice{"OpTypeSampler"};
            return true;
        case SpvOpTypeSampledImage:
            v = UnownedStringSlice{"OpTypeSampledImage"};
            return true;
        case SpvOpTypeArray:
            v = UnownedStringSlice{"OpTypeArray"};
            return true;
        case SpvOpTypeRuntimeArray:
            v = UnownedStringSlice{"OpTypeRuntimeArray"};
            return true;
        case SpvOpTypeStruct:
            v = UnownedStringSlice{"OpTypeStruct"};
            return true;
        case SpvOpTypeOpaque:
            v = UnownedStringSlice{"OpTypeOpaque"};
            return true;
        case SpvOpTypePointer:
            v = UnownedStringSlice{"OpTypePointer"};
            return true;
        case SpvOpTypeFunction:
            v = UnownedStringSlice{"OpTypeFunction"};
            return true;
        case SpvOpTypeEvent:
            v = UnownedStringSlice{"OpTypeEvent"};
            return true;
        case SpvOpTypeDeviceEvent:
            v = UnownedStringSlice{"OpTypeDeviceEvent"};
            return true;
        case SpvOpTypeReserveId:
            v = UnownedStringSlice{"OpTypeReserveId"};
            return true;
        case SpvOpTypeQueue:
            v = UnownedStringSlice{"OpTypeQueue"};
            return true;
        case SpvOpTypePipe:
            v = UnownedStringSlice{"OpTypePipe"};
            return true;
        case SpvOpTypeForwardPointer:
            v = UnownedStringSlice{"OpTypeForwardPointer"};
            return true;
        case SpvOpConstantTrue:
            v = UnownedStringSlice{"OpConstantTrue"};
            return true;
        case SpvOpConstantFalse:
            v = UnownedStringSlice{"OpConstantFalse"};
            return true;
        case SpvOpConstant:
            v = UnownedStringSlice{"OpConstant"};
            return true;
        case SpvOpConstantComposite:
            v = UnownedStringSlice{"OpConstantComposite"};
            return true;
        case SpvOpConstantSampler:
            v = UnownedStringSlice{"OpConstantSampler"};
            return true;
        case SpvOpConstantNull:
            v = UnownedStringSlice{"OpConstantNull"};
            return true;
        case SpvOpSpecConstantTrue:
            v = UnownedStringSlice{"OpSpecConstantTrue"};
            return true;
        case SpvOpSpecConstantFalse:
            v = UnownedStringSlice{"OpSpecConstantFalse"};
            return true;
        case SpvOpSpecConstant:
            v = UnownedStringSlice{"OpSpecConstant"};
            return true;
        case SpvOpSpecConstantComposite:
            v = UnownedStringSlice{"OpSpecConstantComposite"};
            return true;
        case SpvOpSpecConstantOp:
            v = UnownedStringSlice{"OpSpecConstantOp"};
            return true;
        case SpvOpFunction:
            v = UnownedStringSlice{"OpFunction"};
            return true;
        case SpvOpFunctionParameter:
            v = UnownedStringSlice{"OpFunctionParameter"};
            return true;
        case SpvOpFunctionEnd:
            v = UnownedStringSlice{"OpFunctionEnd"};
            return true;
        case SpvOpFunctionCall:
            v = UnownedStringSlice{"OpFunctionCall"};
            return true;
        case SpvOpVariable:
            v = UnownedStringSlice{"OpVariable"};
            return true;
        case SpvOpImageTexelPointer:
            v = UnownedStringSlice{"OpImageTexelPointer"};
            return true;
        case SpvOpLoad:
            v = UnownedStringSlice{"OpLoad"};
            return true;
        case SpvOpStore:
            v = UnownedStringSlice{"OpStore"};
            return true;
        case SpvOpCopyMemory:
            v = UnownedStringSlice{"OpCopyMemory"};
            return true;
        case SpvOpCopyMemorySized:
            v = UnownedStringSlice{"OpCopyMemorySized"};
            return true;
        case SpvOpAccessChain:
            v = UnownedStringSlice{"OpAccessChain"};
            return true;
        case SpvOpInBoundsAccessChain:
            v = UnownedStringSlice{"OpInBoundsAccessChain"};
            return true;
        case SpvOpPtrAccessChain:
            v = UnownedStringSlice{"OpPtrAccessChain"};
            return true;
        case SpvOpArrayLength:
            v = UnownedStringSlice{"OpArrayLength"};
            return true;
        case SpvOpGenericPtrMemSemantics:
            v = UnownedStringSlice{"OpGenericPtrMemSemantics"};
            return true;
        case SpvOpInBoundsPtrAccessChain:
            v = UnownedStringSlice{"OpInBoundsPtrAccessChain"};
            return true;
        case SpvOpDecorate:
            v = UnownedStringSlice{"OpDecorate"};
            return true;
        case SpvOpMemberDecorate:
            v = UnownedStringSlice{"OpMemberDecorate"};
            return true;
        case SpvOpDecorationGroup:
            v = UnownedStringSlice{"OpDecorationGroup"};
            return true;
        case SpvOpGroupDecorate:
            v = UnownedStringSlice{"OpGroupDecorate"};
            return true;
        case SpvOpGroupMemberDecorate:
            v = UnownedStringSlice{"OpGroupMemberDecorate"};
            return true;
        case SpvOpVectorExtractDynamic:
            v = UnownedStringSlice{"OpVectorExtractDynamic"};
            return true;
        case SpvOpVectorInsertDynamic:
            v = UnownedStringSlice{"OpVectorInsertDynamic"};
            return true;
        case SpvOpVectorShuffle:
            v = UnownedStringSlice{"OpVectorShuffle"};
            return true;
        case SpvOpCompositeConstruct:
            v = UnownedStringSlice{"OpCompositeConstruct"};
            return true;
        case SpvOpCompositeExtract:
            v = UnownedStringSlice{"OpCompositeExtract"};
            return true;
        case SpvOpCompositeInsert:
            v = UnownedStringSlice{"OpCompositeInsert"};
            return true;
        case SpvOpCopyObject:
            v = UnownedStringSlice{"OpCopyObject"};
            return true;
        case SpvOpTranspose:
            v = UnownedStringSlice{"OpTranspose"};
            return true;
        case SpvOpSampledImage:
            v = UnownedStringSlice{"OpSampledImage"};
            return true;
        case SpvOpImageSampleImplicitLod:
            v = UnownedStringSlice{"OpImageSampleImplicitLod"};
            return true;
        case SpvOpImageSampleExplicitLod:
            v = UnownedStringSlice{"OpImageSampleExplicitLod"};
            return true;
        case SpvOpImageSampleDrefImplicitLod:
            v = UnownedStringSlice{"OpImageSampleDrefImplicitLod"};
            return true;
        case SpvOpImageSampleDrefExplicitLod:
            v = UnownedStringSlice{"OpImageSampleDrefExplicitLod"};
            return true;
        case SpvOpImageSampleProjImplicitLod:
            v = UnownedStringSlice{"OpImageSampleProjImplicitLod"};
            return true;
        case SpvOpImageSampleProjExplicitLod:
            v = UnownedStringSlice{"OpImageSampleProjExplicitLod"};
            return true;
        case SpvOpImageSampleProjDrefImplicitLod:
            v = UnownedStringSlice{"OpImageSampleProjDrefImplicitLod"};
            return true;
        case SpvOpImageSampleProjDrefExplicitLod:
            v = UnownedStringSlice{"OpImageSampleProjDrefExplicitLod"};
            return true;
        case SpvOpImageFetch:
            v = UnownedStringSlice{"OpImageFetch"};
            return true;
        case SpvOpImageGather:
            v = UnownedStringSlice{"OpImageGather"};
            return true;
        case SpvOpImageDrefGather:
            v = UnownedStringSlice{"OpImageDrefGather"};
            return true;
        case SpvOpImageRead:
            v = UnownedStringSlice{"OpImageRead"};
            return true;
        case SpvOpImageWrite:
            v = UnownedStringSlice{"OpImageWrite"};
            return true;
        case SpvOpImage:
            v = UnownedStringSlice{"OpImage"};
            return true;
        case SpvOpImageQueryFormat:
            v = UnownedStringSlice{"OpImageQueryFormat"};
            return true;
        case SpvOpImageQueryOrder:
            v = UnownedStringSlice{"OpImageQueryOrder"};
            return true;
        case SpvOpImageQuerySizeLod:
            v = UnownedStringSlice{"OpImageQuerySizeLod"};
            return true;
        case SpvOpImageQuerySize:
            v = UnownedStringSlice{"OpImageQuerySize"};
            return true;
        case SpvOpImageQueryLod:
            v = UnownedStringSlice{"OpImageQueryLod"};
            return true;
        case SpvOpImageQueryLevels:
            v = UnownedStringSlice{"OpImageQueryLevels"};
            return true;
        case SpvOpImageQuerySamples:
            v = UnownedStringSlice{"OpImageQuerySamples"};
            return true;
        case SpvOpConvertFToU:
            v = UnownedStringSlice{"OpConvertFToU"};
            return true;
        case SpvOpConvertFToS:
            v = UnownedStringSlice{"OpConvertFToS"};
            return true;
        case SpvOpConvertSToF:
            v = UnownedStringSlice{"OpConvertSToF"};
            return true;
        case SpvOpConvertUToF:
            v = UnownedStringSlice{"OpConvertUToF"};
            return true;
        case SpvOpUConvert:
            v = UnownedStringSlice{"OpUConvert"};
            return true;
        case SpvOpSConvert:
            v = UnownedStringSlice{"OpSConvert"};
            return true;
        case SpvOpFConvert:
            v = UnownedStringSlice{"OpFConvert"};
            return true;
        case SpvOpQuantizeToF16:
            v = UnownedStringSlice{"OpQuantizeToF16"};
            return true;
        case SpvOpConvertPtrToU:
            v = UnownedStringSlice{"OpConvertPtrToU"};
            return true;
        case SpvOpSatConvertSToU:
            v = UnownedStringSlice{"OpSatConvertSToU"};
            return true;
        case SpvOpSatConvertUToS:
            v = UnownedStringSlice{"OpSatConvertUToS"};
            return true;
        case SpvOpConvertUToPtr:
            v = UnownedStringSlice{"OpConvertUToPtr"};
            return true;
        case SpvOpPtrCastToGeneric:
            v = UnownedStringSlice{"OpPtrCastToGeneric"};
            return true;
        case SpvOpGenericCastToPtr:
            v = UnownedStringSlice{"OpGenericCastToPtr"};
            return true;
        case SpvOpGenericCastToPtrExplicit:
            v = UnownedStringSlice{"OpGenericCastToPtrExplicit"};
            return true;
        case SpvOpBitcast:
            v = UnownedStringSlice{"OpBitcast"};
            return true;
        case SpvOpSNegate:
            v = UnownedStringSlice{"OpSNegate"};
            return true;
        case SpvOpFNegate:
            v = UnownedStringSlice{"OpFNegate"};
            return true;
        case SpvOpIAdd:
            v = UnownedStringSlice{"OpIAdd"};
            return true;
        case SpvOpFAdd:
            v = UnownedStringSlice{"OpFAdd"};
            return true;
        case SpvOpISub:
            v = UnownedStringSlice{"OpISub"};
            return true;
        case SpvOpFSub:
            v = UnownedStringSlice{"OpFSub"};
            return true;
        case SpvOpIMul:
            v = UnownedStringSlice{"OpIMul"};
            return true;
        case SpvOpFMul:
            v = UnownedStringSlice{"OpFMul"};
            return true;
        case SpvOpUDiv:
            v = UnownedStringSlice{"OpUDiv"};
            return true;
        case SpvOpSDiv:
            v = UnownedStringSlice{"OpSDiv"};
            return true;
        case SpvOpFDiv:
            v = UnownedStringSlice{"OpFDiv"};
            return true;
        case SpvOpUMod:
            v = UnownedStringSlice{"OpUMod"};
            return true;
        case SpvOpSRem:
            v = UnownedStringSlice{"OpSRem"};
            return true;
        case SpvOpSMod:
            v = UnownedStringSlice{"OpSMod"};
            return true;
        case SpvOpFRem:
            v = UnownedStringSlice{"OpFRem"};
            return true;
        case SpvOpFMod:
            v = UnownedStringSlice{"OpFMod"};
            return true;
        case SpvOpVectorTimesScalar:
            v = UnownedStringSlice{"OpVectorTimesScalar"};
            return true;
        case SpvOpMatrixTimesScalar:
            v = UnownedStringSlice{"OpMatrixTimesScalar"};
            return true;
        case SpvOpVectorTimesMatrix:
            v = UnownedStringSlice{"OpVectorTimesMatrix"};
            return true;
        case SpvOpMatrixTimesVector:
            v = UnownedStringSlice{"OpMatrixTimesVector"};
            return true;
        case SpvOpMatrixTimesMatrix:
            v = UnownedStringSlice{"OpMatrixTimesMatrix"};
            return true;
        case SpvOpOuterProduct:
            v = UnownedStringSlice{"OpOuterProduct"};
            return true;
        case SpvOpDot:
            v = UnownedStringSlice{"OpDot"};
            return true;
        case SpvOpIAddCarry:
            v = UnownedStringSlice{"OpIAddCarry"};
            return true;
        case SpvOpISubBorrow:
            v = UnownedStringSlice{"OpISubBorrow"};
            return true;
        case SpvOpUMulExtended:
            v = UnownedStringSlice{"OpUMulExtended"};
            return true;
        case SpvOpSMulExtended:
            v = UnownedStringSlice{"OpSMulExtended"};
            return true;
        case SpvOpAny:
            v = UnownedStringSlice{"OpAny"};
            return true;
        case SpvOpAll:
            v = UnownedStringSlice{"OpAll"};
            return true;
        case SpvOpIsNan:
            v = UnownedStringSlice{"OpIsNan"};
            return true;
        case SpvOpIsInf:
            v = UnownedStringSlice{"OpIsInf"};
            return true;
        case SpvOpIsFinite:
            v = UnownedStringSlice{"OpIsFinite"};
            return true;
        case SpvOpIsNormal:
            v = UnownedStringSlice{"OpIsNormal"};
            return true;
        case SpvOpSignBitSet:
            v = UnownedStringSlice{"OpSignBitSet"};
            return true;
        case SpvOpLessOrGreater:
            v = UnownedStringSlice{"OpLessOrGreater"};
            return true;
        case SpvOpOrdered:
            v = UnownedStringSlice{"OpOrdered"};
            return true;
        case SpvOpUnordered:
            v = UnownedStringSlice{"OpUnordered"};
            return true;
        case SpvOpLogicalEqual:
            v = UnownedStringSlice{"OpLogicalEqual"};
            return true;
        case SpvOpLogicalNotEqual:
            v = UnownedStringSlice{"OpLogicalNotEqual"};
            return true;
        case SpvOpLogicalOr:
            v = UnownedStringSlice{"OpLogicalOr"};
            return true;
        case SpvOpLogicalAnd:
            v = UnownedStringSlice{"OpLogicalAnd"};
            return true;
        case SpvOpLogicalNot:
            v = UnownedStringSlice{"OpLogicalNot"};
            return true;
        case SpvOpSelect:
            v = UnownedStringSlice{"OpSelect"};
            return true;
        case SpvOpIEqual:
            v = UnownedStringSlice{"OpIEqual"};
            return true;
        case SpvOpINotEqual:
            v = UnownedStringSlice{"OpINotEqual"};
            return true;
        case SpvOpUGreaterThan:
            v = UnownedStringSlice{"OpUGreaterThan"};
            return true;
        case SpvOpSGreaterThan:
            v = UnownedStringSlice{"OpSGreaterThan"};
            return true;
        case SpvOpUGreaterThanEqual:
            v = UnownedStringSlice{"OpUGreaterThanEqual"};
            return true;
        case SpvOpSGreaterThanEqual:
            v = UnownedStringSlice{"OpSGreaterThanEqual"};
            return true;
        case SpvOpULessThan:
            v = UnownedStringSlice{"OpULessThan"};
            return true;
        case SpvOpSLessThan:
            v = UnownedStringSlice{"OpSLessThan"};
            return true;
        case SpvOpULessThanEqual:
            v = UnownedStringSlice{"OpULessThanEqual"};
            return true;
        case SpvOpSLessThanEqual:
            v = UnownedStringSlice{"OpSLessThanEqual"};
            return true;
        case SpvOpFOrdEqual:
            v = UnownedStringSlice{"OpFOrdEqual"};
            return true;
        case SpvOpFUnordEqual:
            v = UnownedStringSlice{"OpFUnordEqual"};
            return true;
        case SpvOpFOrdNotEqual:
            v = UnownedStringSlice{"OpFOrdNotEqual"};
            return true;
        case SpvOpFUnordNotEqual:
            v = UnownedStringSlice{"OpFUnordNotEqual"};
            return true;
        case SpvOpFOrdLessThan:
            v = UnownedStringSlice{"OpFOrdLessThan"};
            return true;
        case SpvOpFUnordLessThan:
            v = UnownedStringSlice{"OpFUnordLessThan"};
            return true;
        case SpvOpFOrdGreaterThan:
            v = UnownedStringSlice{"OpFOrdGreaterThan"};
            return true;
        case SpvOpFUnordGreaterThan:
            v = UnownedStringSlice{"OpFUnordGreaterThan"};
            return true;
        case SpvOpFOrdLessThanEqual:
            v = UnownedStringSlice{"OpFOrdLessThanEqual"};
            return true;
        case SpvOpFUnordLessThanEqual:
            v = UnownedStringSlice{"OpFUnordLessThanEqual"};
            return true;
        case SpvOpFOrdGreaterThanEqual:
            v = UnownedStringSlice{"OpFOrdGreaterThanEqual"};
            return true;
        case SpvOpFUnordGreaterThanEqual:
            v = UnownedStringSlice{"OpFUnordGreaterThanEqual"};
            return true;
        case SpvOpShiftRightLogical:
            v = UnownedStringSlice{"OpShiftRightLogical"};
            return true;
        case SpvOpShiftRightArithmetic:
            v = UnownedStringSlice{"OpShiftRightArithmetic"};
            return true;
        case SpvOpShiftLeftLogical:
            v = UnownedStringSlice{"OpShiftLeftLogical"};
            return true;
        case SpvOpBitwiseOr:
            v = UnownedStringSlice{"OpBitwiseOr"};
            return true;
        case SpvOpBitwiseXor:
            v = UnownedStringSlice{"OpBitwiseXor"};
            return true;
        case SpvOpBitwiseAnd:
            v = UnownedStringSlice{"OpBitwiseAnd"};
            return true;
        case SpvOpNot:
            v = UnownedStringSlice{"OpNot"};
            return true;
        case SpvOpBitFieldInsert:
            v = UnownedStringSlice{"OpBitFieldInsert"};
            return true;
        case SpvOpBitFieldSExtract:
            v = UnownedStringSlice{"OpBitFieldSExtract"};
            return true;
        case SpvOpBitFieldUExtract:
            v = UnownedStringSlice{"OpBitFieldUExtract"};
            return true;
        case SpvOpBitReverse:
            v = UnownedStringSlice{"OpBitReverse"};
            return true;
        case SpvOpBitCount:
            v = UnownedStringSlice{"OpBitCount"};
            return true;
        case SpvOpDPdx:
            v = UnownedStringSlice{"OpDPdx"};
            return true;
        case SpvOpDPdy:
            v = UnownedStringSlice{"OpDPdy"};
            return true;
        case SpvOpFwidth:
            v = UnownedStringSlice{"OpFwidth"};
            return true;
        case SpvOpDPdxFine:
            v = UnownedStringSlice{"OpDPdxFine"};
            return true;
        case SpvOpDPdyFine:
            v = UnownedStringSlice{"OpDPdyFine"};
            return true;
        case SpvOpFwidthFine:
            v = UnownedStringSlice{"OpFwidthFine"};
            return true;
        case SpvOpDPdxCoarse:
            v = UnownedStringSlice{"OpDPdxCoarse"};
            return true;
        case SpvOpDPdyCoarse:
            v = UnownedStringSlice{"OpDPdyCoarse"};
            return true;
        case SpvOpFwidthCoarse:
            v = UnownedStringSlice{"OpFwidthCoarse"};
            return true;
        case SpvOpEmitVertex:
            v = UnownedStringSlice{"OpEmitVertex"};
            return true;
        case SpvOpEndPrimitive:
            v = UnownedStringSlice{"OpEndPrimitive"};
            return true;
        case SpvOpEmitStreamVertex:
            v = UnownedStringSlice{"OpEmitStreamVertex"};
            return true;
        case SpvOpEndStreamPrimitive:
            v = UnownedStringSlice{"OpEndStreamPrimitive"};
            return true;
        case SpvOpControlBarrier:
            v = UnownedStringSlice{"OpControlBarrier"};
            return true;
        case SpvOpMemoryBarrier:
            v = UnownedStringSlice{"OpMemoryBarrier"};
            return true;
        case SpvOpAtomicLoad:
            v = UnownedStringSlice{"OpAtomicLoad"};
            return true;
        case SpvOpAtomicStore:
            v = UnownedStringSlice{"OpAtomicStore"};
            return true;
        case SpvOpAtomicExchange:
            v = UnownedStringSlice{"OpAtomicExchange"};
            return true;
        case SpvOpAtomicCompareExchange:
            v = UnownedStringSlice{"OpAtomicCompareExchange"};
            return true;
        case SpvOpAtomicCompareExchangeWeak:
            v = UnownedStringSlice{"OpAtomicCompareExchangeWeak"};
            return true;
        case SpvOpAtomicIIncrement:
            v = UnownedStringSlice{"OpAtomicIIncrement"};
            return true;
        case SpvOpAtomicIDecrement:
            v = UnownedStringSlice{"OpAtomicIDecrement"};
            return true;
        case SpvOpAtomicIAdd:
            v = UnownedStringSlice{"OpAtomicIAdd"};
            return true;
        case SpvOpAtomicISub:
            v = UnownedStringSlice{"OpAtomicISub"};
            return true;
        case SpvOpAtomicSMin:
            v = UnownedStringSlice{"OpAtomicSMin"};
            return true;
        case SpvOpAtomicUMin:
            v = UnownedStringSlice{"OpAtomicUMin"};
            return true;
        case SpvOpAtomicSMax:
            v = UnownedStringSlice{"OpAtomicSMax"};
            return true;
        case SpvOpAtomicUMax:
            v = UnownedStringSlice{"OpAtomicUMax"};
            return true;
        case SpvOpAtomicAnd:
            v = UnownedStringSlice{"OpAtomicAnd"};
            return true;
        case SpvOpAtomicOr:
            v = UnownedStringSlice{"OpAtomicOr"};
            return true;
        case SpvOpAtomicXor:
            v = UnownedStringSlice{"OpAtomicXor"};
            return true;
        case SpvOpPhi:
            v = UnownedStringSlice{"OpPhi"};
            return true;
        case SpvOpLoopMerge:
            v = UnownedStringSlice{"OpLoopMerge"};
            return true;
        case SpvOpSelectionMerge:
            v = UnownedStringSlice{"OpSelectionMerge"};
            return true;
        case SpvOpLabel:
            v = UnownedStringSlice{"OpLabel"};
            return true;
        case SpvOpBranch:
            v = UnownedStringSlice{"OpBranch"};
            return true;
        case SpvOpBranchConditional:
            v = UnownedStringSlice{"OpBranchConditional"};
            return true;
        case SpvOpSwitch:
            v = UnownedStringSlice{"OpSwitch"};
            return true;
        case SpvOpKill:
            v = UnownedStringSlice{"OpKill"};
            return true;
        case SpvOpReturn:
            v = UnownedStringSlice{"OpReturn"};
            return true;
        case SpvOpReturnValue:
            v = UnownedStringSlice{"OpReturnValue"};
            return true;
        case SpvOpUnreachable:
            v = UnownedStringSlice{"OpUnreachable"};
            return true;
        case SpvOpLifetimeStart:
            v = UnownedStringSlice{"OpLifetimeStart"};
            return true;
        case SpvOpLifetimeStop:
            v = UnownedStringSlice{"OpLifetimeStop"};
            return true;
        case SpvOpGroupAsyncCopy:
            v = UnownedStringSlice{"OpGroupAsyncCopy"};
            return true;
        case SpvOpGroupWaitEvents:
            v = UnownedStringSlice{"OpGroupWaitEvents"};
            return true;
        case SpvOpGroupAll:
            v = UnownedStringSlice{"OpGroupAll"};
            return true;
        case SpvOpGroupAny:
            v = UnownedStringSlice{"OpGroupAny"};
            return true;
        case SpvOpGroupBroadcast:
            v = UnownedStringSlice{"OpGroupBroadcast"};
            return true;
        case SpvOpGroupIAdd:
            v = UnownedStringSlice{"OpGroupIAdd"};
            return true;
        case SpvOpGroupFAdd:
            v = UnownedStringSlice{"OpGroupFAdd"};
            return true;
        case SpvOpGroupFMin:
            v = UnownedStringSlice{"OpGroupFMin"};
            return true;
        case SpvOpGroupUMin:
            v = UnownedStringSlice{"OpGroupUMin"};
            return true;
        case SpvOpGroupSMin:
            v = UnownedStringSlice{"OpGroupSMin"};
            return true;
        case SpvOpGroupFMax:
            v = UnownedStringSlice{"OpGroupFMax"};
            return true;
        case SpvOpGroupUMax:
            v = UnownedStringSlice{"OpGroupUMax"};
            return true;
        case SpvOpGroupSMax:
            v = UnownedStringSlice{"OpGroupSMax"};
            return true;
        case SpvOpReadPipe:
            v = UnownedStringSlice{"OpReadPipe"};
            return true;
        case SpvOpWritePipe:
            v = UnownedStringSlice{"OpWritePipe"};
            return true;
        case SpvOpReservedReadPipe:
            v = UnownedStringSlice{"OpReservedReadPipe"};
            return true;
        case SpvOpReservedWritePipe:
            v = UnownedStringSlice{"OpReservedWritePipe"};
            return true;
        case SpvOpReserveReadPipePackets:
            v = UnownedStringSlice{"OpReserveReadPipePackets"};
            return true;
        case SpvOpReserveWritePipePackets:
            v = UnownedStringSlice{"OpReserveWritePipePackets"};
            return true;
        case SpvOpCommitReadPipe:
            v = UnownedStringSlice{"OpCommitReadPipe"};
            return true;
        case SpvOpCommitWritePipe:
            v = UnownedStringSlice{"OpCommitWritePipe"};
            return true;
        case SpvOpIsValidReserveId:
            v = UnownedStringSlice{"OpIsValidReserveId"};
            return true;
        case SpvOpGetNumPipePackets:
            v = UnownedStringSlice{"OpGetNumPipePackets"};
            return true;
        case SpvOpGetMaxPipePackets:
            v = UnownedStringSlice{"OpGetMaxPipePackets"};
            return true;
        case SpvOpGroupReserveReadPipePackets:
            v = UnownedStringSlice{"OpGroupReserveReadPipePackets"};
            return true;
        case SpvOpGroupReserveWritePipePackets:
            v = UnownedStringSlice{"OpGroupReserveWritePipePackets"};
            return true;
        case SpvOpGroupCommitReadPipe:
            v = UnownedStringSlice{"OpGroupCommitReadPipe"};
            return true;
        case SpvOpGroupCommitWritePipe:
            v = UnownedStringSlice{"OpGroupCommitWritePipe"};
            return true;
        case SpvOpEnqueueMarker:
            v = UnownedStringSlice{"OpEnqueueMarker"};
            return true;
        case SpvOpEnqueueKernel:
            v = UnownedStringSlice{"OpEnqueueKernel"};
            return true;
        case SpvOpGetKernelNDrangeSubGroupCount:
            v = UnownedStringSlice{"OpGetKernelNDrangeSubGroupCount"};
            return true;
        case SpvOpGetKernelNDrangeMaxSubGroupSize:
            v = UnownedStringSlice{"OpGetKernelNDrangeMaxSubGroupSize"};
            return true;
        case SpvOpGetKernelWorkGroupSize:
            v = UnownedStringSlice{"OpGetKernelWorkGroupSize"};
            return true;
        case SpvOpGetKernelPreferredWorkGroupSizeMultiple:
            v = UnownedStringSlice{"OpGetKernelPreferredWorkGroupSizeMultiple"};
            return true;
        case SpvOpRetainEvent:
            v = UnownedStringSlice{"OpRetainEvent"};
            return true;
        case SpvOpReleaseEvent:
            v = UnownedStringSlice{"OpReleaseEvent"};
            return true;
        case SpvOpCreateUserEvent:
            v = UnownedStringSlice{"OpCreateUserEvent"};
            return true;
        case SpvOpIsValidEvent:
            v = UnownedStringSlice{"OpIsValidEvent"};
            return true;
        case SpvOpSetUserEventStatus:
            v = UnownedStringSlice{"OpSetUserEventStatus"};
            return true;
        case SpvOpCaptureEventProfilingInfo:
            v = UnownedStringSlice{"OpCaptureEventProfilingInfo"};
            return true;
        case SpvOpGetDefaultQueue:
            v = UnownedStringSlice{"OpGetDefaultQueue"};
            return true;
        case SpvOpBuildNDRange:
            v = UnownedStringSlice{"OpBuildNDRange"};
            return true;
        case SpvOpImageSparseSampleImplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleImplicitLod"};
            return true;
        case SpvOpImageSparseSampleExplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleExplicitLod"};
            return true;
        case SpvOpImageSparseSampleDrefImplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleDrefImplicitLod"};
            return true;
        case SpvOpImageSparseSampleDrefExplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleDrefExplicitLod"};
            return true;
        case SpvOpImageSparseSampleProjImplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleProjImplicitLod"};
            return true;
        case SpvOpImageSparseSampleProjExplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleProjExplicitLod"};
            return true;
        case SpvOpImageSparseSampleProjDrefImplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleProjDrefImplicitLod"};
            return true;
        case SpvOpImageSparseSampleProjDrefExplicitLod:
            v = UnownedStringSlice{"OpImageSparseSampleProjDrefExplicitLod"};
            return true;
        case SpvOpImageSparseFetch:
            v = UnownedStringSlice{"OpImageSparseFetch"};
            return true;
        case SpvOpImageSparseGather:
            v = UnownedStringSlice{"OpImageSparseGather"};
            return true;
        case SpvOpImageSparseDrefGather:
            v = UnownedStringSlice{"OpImageSparseDrefGather"};
            return true;
        case SpvOpImageSparseTexelsResident:
            v = UnownedStringSlice{"OpImageSparseTexelsResident"};
            return true;
        case SpvOpNoLine:
            v = UnownedStringSlice{"OpNoLine"};
            return true;
        case SpvOpAtomicFlagTestAndSet:
            v = UnownedStringSlice{"OpAtomicFlagTestAndSet"};
            return true;
        case SpvOpAtomicFlagClear:
            v = UnownedStringSlice{"OpAtomicFlagClear"};
            return true;
        case SpvOpImageSparseRead:
            v = UnownedStringSlice{"OpImageSparseRead"};
            return true;
        case SpvOpSizeOf:
            v = UnownedStringSlice{"OpSizeOf"};
            return true;
        case SpvOpTypePipeStorage:
            v = UnownedStringSlice{"OpTypePipeStorage"};
            return true;
        case SpvOpConstantPipeStorage:
            v = UnownedStringSlice{"OpConstantPipeStorage"};
            return true;
        case SpvOpCreatePipeFromPipeStorage:
            v = UnownedStringSlice{"OpCreatePipeFromPipeStorage"};
            return true;
        case SpvOpGetKernelLocalSizeForSubgroupCount:
            v = UnownedStringSlice{"OpGetKernelLocalSizeForSubgroupCount"};
            return true;
        case SpvOpGetKernelMaxNumSubgroups:
            v = UnownedStringSlice{"OpGetKernelMaxNumSubgroups"};
            return true;
        case SpvOpTypeNamedBarrier:
            v = UnownedStringSlice{"OpTypeNamedBarrier"};
            return true;
        case SpvOpNamedBarrierInitialize:
            v = UnownedStringSlice{"OpNamedBarrierInitialize"};
            return true;
        case SpvOpMemoryNamedBarrier:
            v = UnownedStringSlice{"OpMemoryNamedBarrier"};
            return true;
        case SpvOpModuleProcessed:
            v = UnownedStringSlice{"OpModuleProcessed"};
            return true;
        case SpvOpExecutionModeId:
            v = UnownedStringSlice{"OpExecutionModeId"};
            return true;
        case SpvOpDecorateId:
            v = UnownedStringSlice{"OpDecorateId"};
            return true;
        case SpvOpGroupNonUniformElect:
            v = UnownedStringSlice{"OpGroupNonUniformElect"};
            return true;
        case SpvOpGroupNonUniformAll:
            v = UnownedStringSlice{"OpGroupNonUniformAll"};
            return true;
        case SpvOpGroupNonUniformAny:
            v = UnownedStringSlice{"OpGroupNonUniformAny"};
            return true;
        case SpvOpGroupNonUniformAllEqual:
            v = UnownedStringSlice{"OpGroupNonUniformAllEqual"};
            return true;
        case SpvOpGroupNonUniformBroadcast:
            v = UnownedStringSlice{"OpGroupNonUniformBroadcast"};
            return true;
        case SpvOpGroupNonUniformBroadcastFirst:
            v = UnownedStringSlice{"OpGroupNonUniformBroadcastFirst"};
            return true;
        case SpvOpGroupNonUniformBallot:
            v = UnownedStringSlice{"OpGroupNonUniformBallot"};
            return true;
        case SpvOpGroupNonUniformInverseBallot:
            v = UnownedStringSlice{"OpGroupNonUniformInverseBallot"};
            return true;
        case SpvOpGroupNonUniformBallotBitExtract:
            v = UnownedStringSlice{"OpGroupNonUniformBallotBitExtract"};
            return true;
        case SpvOpGroupNonUniformBallotBitCount:
            v = UnownedStringSlice{"OpGroupNonUniformBallotBitCount"};
            return true;
        case SpvOpGroupNonUniformBallotFindLSB:
            v = UnownedStringSlice{"OpGroupNonUniformBallotFindLSB"};
            return true;
        case SpvOpGroupNonUniformBallotFindMSB:
            v = UnownedStringSlice{"OpGroupNonUniformBallotFindMSB"};
            return true;
        case SpvOpGroupNonUniformShuffle:
            v = UnownedStringSlice{"OpGroupNonUniformShuffle"};
            return true;
        case SpvOpGroupNonUniformShuffleXor:
            v = UnownedStringSlice{"OpGroupNonUniformShuffleXor"};
            return true;
        case SpvOpGroupNonUniformShuffleUp:
            v = UnownedStringSlice{"OpGroupNonUniformShuffleUp"};
            return true;
        case SpvOpGroupNonUniformShuffleDown:
            v = UnownedStringSlice{"OpGroupNonUniformShuffleDown"};
            return true;
        case SpvOpGroupNonUniformIAdd:
            v = UnownedStringSlice{"OpGroupNonUniformIAdd"};
            return true;
        case SpvOpGroupNonUniformFAdd:
            v = UnownedStringSlice{"OpGroupNonUniformFAdd"};
            return true;
        case SpvOpGroupNonUniformIMul:
            v = UnownedStringSlice{"OpGroupNonUniformIMul"};
            return true;
        case SpvOpGroupNonUniformFMul:
            v = UnownedStringSlice{"OpGroupNonUniformFMul"};
            return true;
        case SpvOpGroupNonUniformSMin:
            v = UnownedStringSlice{"OpGroupNonUniformSMin"};
            return true;
        case SpvOpGroupNonUniformUMin:
            v = UnownedStringSlice{"OpGroupNonUniformUMin"};
            return true;
        case SpvOpGroupNonUniformFMin:
            v = UnownedStringSlice{"OpGroupNonUniformFMin"};
            return true;
        case SpvOpGroupNonUniformSMax:
            v = UnownedStringSlice{"OpGroupNonUniformSMax"};
            return true;
        case SpvOpGroupNonUniformUMax:
            v = UnownedStringSlice{"OpGroupNonUniformUMax"};
            return true;
        case SpvOpGroupNonUniformFMax:
            v = UnownedStringSlice{"OpGroupNonUniformFMax"};
            return true;
        case SpvOpGroupNonUniformBitwiseAnd:
            v = UnownedStringSlice{"OpGroupNonUniformBitwiseAnd"};
            return true;
        case SpvOpGroupNonUniformBitwiseOr:
            v = UnownedStringSlice{"OpGroupNonUniformBitwiseOr"};
            return true;
        case SpvOpGroupNonUniformBitwiseXor:
            v = UnownedStringSlice{"OpGroupNonUniformBitwiseXor"};
            return true;
        case SpvOpGroupNonUniformLogicalAnd:
            v = UnownedStringSlice{"OpGroupNonUniformLogicalAnd"};
            return true;
        case SpvOpGroupNonUniformLogicalOr:
            v = UnownedStringSlice{"OpGroupNonUniformLogicalOr"};
            return true;
        case SpvOpGroupNonUniformLogicalXor:
            v = UnownedStringSlice{"OpGroupNonUniformLogicalXor"};
            return true;
        case SpvOpGroupNonUniformQuadBroadcast:
            v = UnownedStringSlice{"OpGroupNonUniformQuadBroadcast"};
            return true;
        case SpvOpGroupNonUniformQuadSwap:
            v = UnownedStringSlice{"OpGroupNonUniformQuadSwap"};
            return true;
        case SpvOpCopyLogical:
            v = UnownedStringSlice{"OpCopyLogical"};
            return true;
        case SpvOpPtrEqual:
            v = UnownedStringSlice{"OpPtrEqual"};
            return true;
        case SpvOpPtrNotEqual:
            v = UnownedStringSlice{"OpPtrNotEqual"};
            return true;
        case SpvOpPtrDiff:
            v = UnownedStringSlice{"OpPtrDiff"};
            return true;
        case SpvOpColorAttachmentReadEXT:
            v = UnownedStringSlice{"OpColorAttachmentReadEXT"};
            return true;
        case SpvOpDepthAttachmentReadEXT:
            v = UnownedStringSlice{"OpDepthAttachmentReadEXT"};
            return true;
        case SpvOpStencilAttachmentReadEXT:
            v = UnownedStringSlice{"OpStencilAttachmentReadEXT"};
            return true;
        case SpvOpTerminateInvocation:
            v = UnownedStringSlice{"OpTerminateInvocation"};
            return true;
        case SpvOpSubgroupBallotKHR:
            v = UnownedStringSlice{"OpSubgroupBallotKHR"};
            return true;
        case SpvOpSubgroupFirstInvocationKHR:
            v = UnownedStringSlice{"OpSubgroupFirstInvocationKHR"};
            return true;
        case SpvOpSubgroupAllKHR:
            v = UnownedStringSlice{"OpSubgroupAllKHR"};
            return true;
        case SpvOpSubgroupAnyKHR:
            v = UnownedStringSlice{"OpSubgroupAnyKHR"};
            return true;
        case SpvOpSubgroupAllEqualKHR:
            v = UnownedStringSlice{"OpSubgroupAllEqualKHR"};
            return true;
        case SpvOpGroupNonUniformRotateKHR:
            v = UnownedStringSlice{"OpGroupNonUniformRotateKHR"};
            return true;
        case SpvOpSubgroupReadInvocationKHR:
            v = UnownedStringSlice{"OpSubgroupReadInvocationKHR"};
            return true;
        case SpvOpTraceRayKHR:
            v = UnownedStringSlice{"OpTraceRayKHR"};
            return true;
        case SpvOpExecuteCallableKHR:
            v = UnownedStringSlice{"OpExecuteCallableKHR"};
            return true;
        case SpvOpConvertUToAccelerationStructureKHR:
            v = UnownedStringSlice{"OpConvertUToAccelerationStructureKHR"};
            return true;
        case SpvOpIgnoreIntersectionKHR:
            v = UnownedStringSlice{"OpIgnoreIntersectionKHR"};
            return true;
        case SpvOpTerminateRayKHR:
            v = UnownedStringSlice{"OpTerminateRayKHR"};
            return true;
        case SpvOpSDot:
            v = UnownedStringSlice{"OpSDot"};
            return true;
        case SpvOpUDot:
            v = UnownedStringSlice{"OpUDot"};
            return true;
        case SpvOpSUDot:
            v = UnownedStringSlice{"OpSUDot"};
            return true;
        case SpvOpSDotAccSat:
            v = UnownedStringSlice{"OpSDotAccSat"};
            return true;
        case SpvOpUDotAccSat:
            v = UnownedStringSlice{"OpUDotAccSat"};
            return true;
        case SpvOpSUDotAccSat:
            v = UnownedStringSlice{"OpSUDotAccSat"};
            return true;
        case SpvOpTypeCooperativeMatrixKHR:
            v = UnownedStringSlice{"OpTypeCooperativeMatrixKHR"};
            return true;
        case SpvOpCooperativeMatrixLoadKHR:
            v = UnownedStringSlice{"OpCooperativeMatrixLoadKHR"};
            return true;
        case SpvOpCooperativeMatrixStoreKHR:
            v = UnownedStringSlice{"OpCooperativeMatrixStoreKHR"};
            return true;
        case SpvOpCooperativeMatrixMulAddKHR:
            v = UnownedStringSlice{"OpCooperativeMatrixMulAddKHR"};
            return true;
        case SpvOpCooperativeMatrixLengthKHR:
            v = UnownedStringSlice{"OpCooperativeMatrixLengthKHR"};
            return true;
        case SpvOpTypeRayQueryKHR:
            v = UnownedStringSlice{"OpTypeRayQueryKHR"};
            return true;
        case SpvOpRayQueryInitializeKHR:
            v = UnownedStringSlice{"OpRayQueryInitializeKHR"};
            return true;
        case SpvOpRayQueryTerminateKHR:
            v = UnownedStringSlice{"OpRayQueryTerminateKHR"};
            return true;
        case SpvOpRayQueryGenerateIntersectionKHR:
            v = UnownedStringSlice{"OpRayQueryGenerateIntersectionKHR"};
            return true;
        case SpvOpRayQueryConfirmIntersectionKHR:
            v = UnownedStringSlice{"OpRayQueryConfirmIntersectionKHR"};
            return true;
        case SpvOpRayQueryProceedKHR:
            v = UnownedStringSlice{"OpRayQueryProceedKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionTypeKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionTypeKHR"};
            return true;
        case SpvOpImageSampleWeightedQCOM:
            v = UnownedStringSlice{"OpImageSampleWeightedQCOM"};
            return true;
        case SpvOpImageBoxFilterQCOM:
            v = UnownedStringSlice{"OpImageBoxFilterQCOM"};
            return true;
        case SpvOpImageBlockMatchSSDQCOM:
            v = UnownedStringSlice{"OpImageBlockMatchSSDQCOM"};
            return true;
        case SpvOpImageBlockMatchSADQCOM:
            v = UnownedStringSlice{"OpImageBlockMatchSADQCOM"};
            return true;
        case SpvOpGroupIAddNonUniformAMD:
            v = UnownedStringSlice{"OpGroupIAddNonUniformAMD"};
            return true;
        case SpvOpGroupFAddNonUniformAMD:
            v = UnownedStringSlice{"OpGroupFAddNonUniformAMD"};
            return true;
        case SpvOpGroupFMinNonUniformAMD:
            v = UnownedStringSlice{"OpGroupFMinNonUniformAMD"};
            return true;
        case SpvOpGroupUMinNonUniformAMD:
            v = UnownedStringSlice{"OpGroupUMinNonUniformAMD"};
            return true;
        case SpvOpGroupSMinNonUniformAMD:
            v = UnownedStringSlice{"OpGroupSMinNonUniformAMD"};
            return true;
        case SpvOpGroupFMaxNonUniformAMD:
            v = UnownedStringSlice{"OpGroupFMaxNonUniformAMD"};
            return true;
        case SpvOpGroupUMaxNonUniformAMD:
            v = UnownedStringSlice{"OpGroupUMaxNonUniformAMD"};
            return true;
        case SpvOpGroupSMaxNonUniformAMD:
            v = UnownedStringSlice{"OpGroupSMaxNonUniformAMD"};
            return true;
        case SpvOpFragmentMaskFetchAMD:
            v = UnownedStringSlice{"OpFragmentMaskFetchAMD"};
            return true;
        case SpvOpFragmentFetchAMD:
            v = UnownedStringSlice{"OpFragmentFetchAMD"};
            return true;
        case SpvOpReadClockKHR:
            v = UnownedStringSlice{"OpReadClockKHR"};
            return true;
        case SpvOpHitObjectRecordHitMotionNV:
            v = UnownedStringSlice{"OpHitObjectRecordHitMotionNV"};
            return true;
        case SpvOpHitObjectRecordHitWithIndexMotionNV:
            v = UnownedStringSlice{"OpHitObjectRecordHitWithIndexMotionNV"};
            return true;
        case SpvOpHitObjectRecordMissMotionNV:
            v = UnownedStringSlice{"OpHitObjectRecordMissMotionNV"};
            return true;
        case SpvOpHitObjectGetWorldToObjectNV:
            v = UnownedStringSlice{"OpHitObjectGetWorldToObjectNV"};
            return true;
        case SpvOpHitObjectGetObjectToWorldNV:
            v = UnownedStringSlice{"OpHitObjectGetObjectToWorldNV"};
            return true;
        case SpvOpHitObjectGetObjectRayDirectionNV:
            v = UnownedStringSlice{"OpHitObjectGetObjectRayDirectionNV"};
            return true;
        case SpvOpHitObjectGetObjectRayOriginNV:
            v = UnownedStringSlice{"OpHitObjectGetObjectRayOriginNV"};
            return true;
        case SpvOpHitObjectTraceRayMotionNV:
            v = UnownedStringSlice{"OpHitObjectTraceRayMotionNV"};
            return true;
        case SpvOpHitObjectGetShaderRecordBufferHandleNV:
            v = UnownedStringSlice{"OpHitObjectGetShaderRecordBufferHandleNV"};
            return true;
        case SpvOpHitObjectGetShaderBindingTableRecordIndexNV:
            v = UnownedStringSlice{"OpHitObjectGetShaderBindingTableRecordIndexNV"};
            return true;
        case SpvOpHitObjectRecordEmptyNV:
            v = UnownedStringSlice{"OpHitObjectRecordEmptyNV"};
            return true;
        case SpvOpHitObjectTraceRayNV:
            v = UnownedStringSlice{"OpHitObjectTraceRayNV"};
            return true;
        case SpvOpHitObjectRecordHitNV:
            v = UnownedStringSlice{"OpHitObjectRecordHitNV"};
            return true;
        case SpvOpHitObjectRecordHitWithIndexNV:
            v = UnownedStringSlice{"OpHitObjectRecordHitWithIndexNV"};
            return true;
        case SpvOpHitObjectRecordMissNV:
            v = UnownedStringSlice{"OpHitObjectRecordMissNV"};
            return true;
        case SpvOpHitObjectExecuteShaderNV:
            v = UnownedStringSlice{"OpHitObjectExecuteShaderNV"};
            return true;
        case SpvOpHitObjectGetCurrentTimeNV:
            v = UnownedStringSlice{"OpHitObjectGetCurrentTimeNV"};
            return true;
        case SpvOpHitObjectGetAttributesNV:
            v = UnownedStringSlice{"OpHitObjectGetAttributesNV"};
            return true;
        case SpvOpHitObjectGetHitKindNV:
            v = UnownedStringSlice{"OpHitObjectGetHitKindNV"};
            return true;
        case SpvOpHitObjectGetPrimitiveIndexNV:
            v = UnownedStringSlice{"OpHitObjectGetPrimitiveIndexNV"};
            return true;
        case SpvOpHitObjectGetGeometryIndexNV:
            v = UnownedStringSlice{"OpHitObjectGetGeometryIndexNV"};
            return true;
        case SpvOpHitObjectGetInstanceIdNV:
            v = UnownedStringSlice{"OpHitObjectGetInstanceIdNV"};
            return true;
        case SpvOpHitObjectGetInstanceCustomIndexNV:
            v = UnownedStringSlice{"OpHitObjectGetInstanceCustomIndexNV"};
            return true;
        case SpvOpHitObjectGetWorldRayDirectionNV:
            v = UnownedStringSlice{"OpHitObjectGetWorldRayDirectionNV"};
            return true;
        case SpvOpHitObjectGetWorldRayOriginNV:
            v = UnownedStringSlice{"OpHitObjectGetWorldRayOriginNV"};
            return true;
        case SpvOpHitObjectGetRayTMaxNV:
            v = UnownedStringSlice{"OpHitObjectGetRayTMaxNV"};
            return true;
        case SpvOpHitObjectGetRayTMinNV:
            v = UnownedStringSlice{"OpHitObjectGetRayTMinNV"};
            return true;
        case SpvOpHitObjectIsEmptyNV:
            v = UnownedStringSlice{"OpHitObjectIsEmptyNV"};
            return true;
        case SpvOpHitObjectIsHitNV:
            v = UnownedStringSlice{"OpHitObjectIsHitNV"};
            return true;
        case SpvOpHitObjectIsMissNV:
            v = UnownedStringSlice{"OpHitObjectIsMissNV"};
            return true;
        case SpvOpReorderThreadWithHitObjectNV:
            v = UnownedStringSlice{"OpReorderThreadWithHitObjectNV"};
            return true;
        case SpvOpReorderThreadWithHintNV:
            v = UnownedStringSlice{"OpReorderThreadWithHintNV"};
            return true;
        case SpvOpTypeHitObjectNV:
            v = UnownedStringSlice{"OpTypeHitObjectNV"};
            return true;
        case SpvOpImageSampleFootprintNV:
            v = UnownedStringSlice{"OpImageSampleFootprintNV"};
            return true;
        case SpvOpEmitMeshTasksEXT:
            v = UnownedStringSlice{"OpEmitMeshTasksEXT"};
            return true;
        case SpvOpSetMeshOutputsEXT:
            v = UnownedStringSlice{"OpSetMeshOutputsEXT"};
            return true;
        case SpvOpGroupNonUniformPartitionNV:
            v = UnownedStringSlice{"OpGroupNonUniformPartitionNV"};
            return true;
        case SpvOpWritePackedPrimitiveIndices4x8NV:
            v = UnownedStringSlice{"OpWritePackedPrimitiveIndices4x8NV"};
            return true;
        case SpvOpReportIntersectionNV:
            v = UnownedStringSlice{"OpReportIntersectionNV"};
            return true;
        case SpvOpIgnoreIntersectionNV:
            v = UnownedStringSlice{"OpIgnoreIntersectionNV"};
            return true;
        case SpvOpTerminateRayNV:
            v = UnownedStringSlice{"OpTerminateRayNV"};
            return true;
        case SpvOpTraceNV:
            v = UnownedStringSlice{"OpTraceNV"};
            return true;
        case SpvOpTraceMotionNV:
            v = UnownedStringSlice{"OpTraceMotionNV"};
            return true;
        case SpvOpTraceRayMotionNV:
            v = UnownedStringSlice{"OpTraceRayMotionNV"};
            return true;
        case SpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionTriangleVertexPositionsKHR"};
            return true;
        case SpvOpTypeAccelerationStructureNV:
            v = UnownedStringSlice{"OpTypeAccelerationStructureNV"};
            return true;
        case SpvOpExecuteCallableNV:
            v = UnownedStringSlice{"OpExecuteCallableNV"};
            return true;
        case SpvOpTypeCooperativeMatrixNV:
            v = UnownedStringSlice{"OpTypeCooperativeMatrixNV"};
            return true;
        case SpvOpCooperativeMatrixLoadNV:
            v = UnownedStringSlice{"OpCooperativeMatrixLoadNV"};
            return true;
        case SpvOpCooperativeMatrixStoreNV:
            v = UnownedStringSlice{"OpCooperativeMatrixStoreNV"};
            return true;
        case SpvOpCooperativeMatrixMulAddNV:
            v = UnownedStringSlice{"OpCooperativeMatrixMulAddNV"};
            return true;
        case SpvOpCooperativeMatrixLengthNV:
            v = UnownedStringSlice{"OpCooperativeMatrixLengthNV"};
            return true;
        case SpvOpBeginInvocationInterlockEXT:
            v = UnownedStringSlice{"OpBeginInvocationInterlockEXT"};
            return true;
        case SpvOpEndInvocationInterlockEXT:
            v = UnownedStringSlice{"OpEndInvocationInterlockEXT"};
            return true;
        case SpvOpDemoteToHelperInvocation:
            v = UnownedStringSlice{"OpDemoteToHelperInvocation"};
            return true;
        case SpvOpIsHelperInvocationEXT:
            v = UnownedStringSlice{"OpIsHelperInvocationEXT"};
            return true;
        case SpvOpConvertUToImageNV:
            v = UnownedStringSlice{"OpConvertUToImageNV"};
            return true;
        case SpvOpConvertUToSamplerNV:
            v = UnownedStringSlice{"OpConvertUToSamplerNV"};
            return true;
        case SpvOpConvertImageToUNV:
            v = UnownedStringSlice{"OpConvertImageToUNV"};
            return true;
        case SpvOpConvertSamplerToUNV:
            v = UnownedStringSlice{"OpConvertSamplerToUNV"};
            return true;
        case SpvOpConvertUToSampledImageNV:
            v = UnownedStringSlice{"OpConvertUToSampledImageNV"};
            return true;
        case SpvOpConvertSampledImageToUNV:
            v = UnownedStringSlice{"OpConvertSampledImageToUNV"};
            return true;
        case SpvOpSamplerImageAddressingModeNV:
            v = UnownedStringSlice{"OpSamplerImageAddressingModeNV"};
            return true;
        case SpvOpSubgroupShuffleINTEL:
            v = UnownedStringSlice{"OpSubgroupShuffleINTEL"};
            return true;
        case SpvOpSubgroupShuffleDownINTEL:
            v = UnownedStringSlice{"OpSubgroupShuffleDownINTEL"};
            return true;
        case SpvOpSubgroupShuffleUpINTEL:
            v = UnownedStringSlice{"OpSubgroupShuffleUpINTEL"};
            return true;
        case SpvOpSubgroupShuffleXorINTEL:
            v = UnownedStringSlice{"OpSubgroupShuffleXorINTEL"};
            return true;
        case SpvOpSubgroupBlockReadINTEL:
            v = UnownedStringSlice{"OpSubgroupBlockReadINTEL"};
            return true;
        case SpvOpSubgroupBlockWriteINTEL:
            v = UnownedStringSlice{"OpSubgroupBlockWriteINTEL"};
            return true;
        case SpvOpSubgroupImageBlockReadINTEL:
            v = UnownedStringSlice{"OpSubgroupImageBlockReadINTEL"};
            return true;
        case SpvOpSubgroupImageBlockWriteINTEL:
            v = UnownedStringSlice{"OpSubgroupImageBlockWriteINTEL"};
            return true;
        case SpvOpSubgroupImageMediaBlockReadINTEL:
            v = UnownedStringSlice{"OpSubgroupImageMediaBlockReadINTEL"};
            return true;
        case SpvOpSubgroupImageMediaBlockWriteINTEL:
            v = UnownedStringSlice{"OpSubgroupImageMediaBlockWriteINTEL"};
            return true;
        case SpvOpUCountLeadingZerosINTEL:
            v = UnownedStringSlice{"OpUCountLeadingZerosINTEL"};
            return true;
        case SpvOpUCountTrailingZerosINTEL:
            v = UnownedStringSlice{"OpUCountTrailingZerosINTEL"};
            return true;
        case SpvOpAbsISubINTEL:
            v = UnownedStringSlice{"OpAbsISubINTEL"};
            return true;
        case SpvOpAbsUSubINTEL:
            v = UnownedStringSlice{"OpAbsUSubINTEL"};
            return true;
        case SpvOpIAddSatINTEL:
            v = UnownedStringSlice{"OpIAddSatINTEL"};
            return true;
        case SpvOpUAddSatINTEL:
            v = UnownedStringSlice{"OpUAddSatINTEL"};
            return true;
        case SpvOpIAverageINTEL:
            v = UnownedStringSlice{"OpIAverageINTEL"};
            return true;
        case SpvOpUAverageINTEL:
            v = UnownedStringSlice{"OpUAverageINTEL"};
            return true;
        case SpvOpIAverageRoundedINTEL:
            v = UnownedStringSlice{"OpIAverageRoundedINTEL"};
            return true;
        case SpvOpUAverageRoundedINTEL:
            v = UnownedStringSlice{"OpUAverageRoundedINTEL"};
            return true;
        case SpvOpISubSatINTEL:
            v = UnownedStringSlice{"OpISubSatINTEL"};
            return true;
        case SpvOpUSubSatINTEL:
            v = UnownedStringSlice{"OpUSubSatINTEL"};
            return true;
        case SpvOpIMul32x16INTEL:
            v = UnownedStringSlice{"OpIMul32x16INTEL"};
            return true;
        case SpvOpUMul32x16INTEL:
            v = UnownedStringSlice{"OpUMul32x16INTEL"};
            return true;
        case SpvOpConstantFunctionPointerINTEL:
            v = UnownedStringSlice{"OpConstantFunctionPointerINTEL"};
            return true;
        case SpvOpFunctionPointerCallINTEL:
            v = UnownedStringSlice{"OpFunctionPointerCallINTEL"};
            return true;
        case SpvOpAsmTargetINTEL:
            v = UnownedStringSlice{"OpAsmTargetINTEL"};
            return true;
        case SpvOpAsmINTEL:
            v = UnownedStringSlice{"OpAsmINTEL"};
            return true;
        case SpvOpAsmCallINTEL:
            v = UnownedStringSlice{"OpAsmCallINTEL"};
            return true;
        case SpvOpAtomicFMinEXT:
            v = UnownedStringSlice{"OpAtomicFMinEXT"};
            return true;
        case SpvOpAtomicFMaxEXT:
            v = UnownedStringSlice{"OpAtomicFMaxEXT"};
            return true;
        case SpvOpAssumeTrueKHR:
            v = UnownedStringSlice{"OpAssumeTrueKHR"};
            return true;
        case SpvOpExpectKHR:
            v = UnownedStringSlice{"OpExpectKHR"};
            return true;
        case SpvOpDecorateString:
            v = UnownedStringSlice{"OpDecorateString"};
            return true;
        case SpvOpMemberDecorateString:
            v = UnownedStringSlice{"OpMemberDecorateString"};
            return true;
        case SpvOpVmeImageINTEL:
            v = UnownedStringSlice{"OpVmeImageINTEL"};
            return true;
        case SpvOpTypeVmeImageINTEL:
            v = UnownedStringSlice{"OpTypeVmeImageINTEL"};
            return true;
        case SpvOpTypeAvcImePayloadINTEL:
            v = UnownedStringSlice{"OpTypeAvcImePayloadINTEL"};
            return true;
        case SpvOpTypeAvcRefPayloadINTEL:
            v = UnownedStringSlice{"OpTypeAvcRefPayloadINTEL"};
            return true;
        case SpvOpTypeAvcSicPayloadINTEL:
            v = UnownedStringSlice{"OpTypeAvcSicPayloadINTEL"};
            return true;
        case SpvOpTypeAvcMcePayloadINTEL:
            v = UnownedStringSlice{"OpTypeAvcMcePayloadINTEL"};
            return true;
        case SpvOpTypeAvcMceResultINTEL:
            v = UnownedStringSlice{"OpTypeAvcMceResultINTEL"};
            return true;
        case SpvOpTypeAvcImeResultINTEL:
            v = UnownedStringSlice{"OpTypeAvcImeResultINTEL"};
            return true;
        case SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL:
            v = UnownedStringSlice{"OpTypeAvcImeResultSingleReferenceStreamoutINTEL"};
            return true;
        case SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL:
            v = UnownedStringSlice{"OpTypeAvcImeResultDualReferenceStreamoutINTEL"};
            return true;
        case SpvOpTypeAvcImeSingleReferenceStreaminINTEL:
            v = UnownedStringSlice{"OpTypeAvcImeSingleReferenceStreaminINTEL"};
            return true;
        case SpvOpTypeAvcImeDualReferenceStreaminINTEL:
            v = UnownedStringSlice{"OpTypeAvcImeDualReferenceStreaminINTEL"};
            return true;
        case SpvOpTypeAvcRefResultINTEL:
            v = UnownedStringSlice{"OpTypeAvcRefResultINTEL"};
            return true;
        case SpvOpTypeAvcSicResultINTEL:
            v = UnownedStringSlice{"OpTypeAvcSicResultINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetInterShapePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetInterDirectionPenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetAcOnlyHaarINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL"};
            return true;
        case SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL"};
            return true;
        case SpvOpSubgroupAvcMceConvertToImePayloadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceConvertToImePayloadINTEL"};
            return true;
        case SpvOpSubgroupAvcMceConvertToImeResultINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceConvertToImeResultINTEL"};
            return true;
        case SpvOpSubgroupAvcMceConvertToRefPayloadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceConvertToRefPayloadINTEL"};
            return true;
        case SpvOpSubgroupAvcMceConvertToRefResultINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceConvertToRefResultINTEL"};
            return true;
        case SpvOpSubgroupAvcMceConvertToSicPayloadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceConvertToSicPayloadINTEL"};
            return true;
        case SpvOpSubgroupAvcMceConvertToSicResultINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceConvertToSicResultINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetMotionVectorsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetMotionVectorsINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterDistortionsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterDistortionsINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetBestInterDistortionsINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterMajorShapeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterMajorShapeINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterMinorShapeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterMinorShapeINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterDirectionsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterDirectionsINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterMotionVectorCountINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterReferenceIdsINTEL"};
            return true;
        case SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL"};
            return true;
        case SpvOpSubgroupAvcImeInitializeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeInitializeINTEL"};
            return true;
        case SpvOpSubgroupAvcImeSetSingleReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeSetSingleReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcImeSetDualReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeSetDualReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcImeRefWindowSizeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeRefWindowSizeINTEL"};
            return true;
        case SpvOpSubgroupAvcImeAdjustRefOffsetINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeAdjustRefOffsetINTEL"};
            return true;
        case SpvOpSubgroupAvcImeConvertToMcePayloadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeConvertToMcePayloadINTEL"};
            return true;
        case SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeSetMaxMotionVectorCountINTEL"};
            return true;
        case SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL"};
            return true;
        case SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL"};
            return true;
        case SpvOpSubgroupAvcImeSetWeightedSadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeSetWeightedSadINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithDualReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL"};
            return true;
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL"};
            return true;
        case SpvOpSubgroupAvcImeConvertToMceResultINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeConvertToMceResultINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetSingleReferenceStreaminINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetDualReferenceStreaminINTEL"};
            return true;
        case SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL"};
            return true;
        case SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeStripDualReferenceStreamoutINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetBorderReachedINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetBorderReachedINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL"};
            return true;
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL"};
            return true;
        case SpvOpSubgroupAvcFmeInitializeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcFmeInitializeINTEL"};
            return true;
        case SpvOpSubgroupAvcBmeInitializeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcBmeInitializeINTEL"};
            return true;
        case SpvOpSubgroupAvcRefConvertToMcePayloadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefConvertToMcePayloadINTEL"};
            return true;
        case SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefSetBidirectionalMixDisableINTEL"};
            return true;
        case SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefSetBilinearFilterEnableINTEL"};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefEvaluateWithDualReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL"};
            return true;
        case SpvOpSubgroupAvcRefConvertToMceResultINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcRefConvertToMceResultINTEL"};
            return true;
        case SpvOpSubgroupAvcSicInitializeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicInitializeINTEL"};
            return true;
        case SpvOpSubgroupAvcSicConfigureSkcINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicConfigureSkcINTEL"};
            return true;
        case SpvOpSubgroupAvcSicConfigureIpeLumaINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicConfigureIpeLumaINTEL"};
            return true;
        case SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicConfigureIpeLumaChromaINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetMotionVectorMaskINTEL"};
            return true;
        case SpvOpSubgroupAvcSicConvertToMcePayloadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicConvertToMcePayloadINTEL"};
            return true;
        case SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL"};
            return true;
        case SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL"};
            return true;
        case SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL"};
            return true;
        case SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicSetBilinearFilterEnableINTEL"};
            return true;
        case SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL"};
            return true;
        case SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL"};
            return true;
        case SpvOpSubgroupAvcSicEvaluateIpeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicEvaluateIpeINTEL"};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicEvaluateWithDualReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL"};
            return true;
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL"};
            return true;
        case SpvOpSubgroupAvcSicConvertToMceResultINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicConvertToMceResultINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetIpeLumaShapeINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetPackedIpeLumaModesINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetIpeChromaModeINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetIpeChromaModeINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL"};
            return true;
        case SpvOpSubgroupAvcSicGetInterRawSadsINTEL:
            v = UnownedStringSlice{"OpSubgroupAvcSicGetInterRawSadsINTEL"};
            return true;
        case SpvOpVariableLengthArrayINTEL:
            v = UnownedStringSlice{"OpVariableLengthArrayINTEL"};
            return true;
        case SpvOpSaveMemoryINTEL:
            v = UnownedStringSlice{"OpSaveMemoryINTEL"};
            return true;
        case SpvOpRestoreMemoryINTEL:
            v = UnownedStringSlice{"OpRestoreMemoryINTEL"};
            return true;
        case SpvOpArbitraryFloatSinCosPiINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatSinCosPiINTEL"};
            return true;
        case SpvOpArbitraryFloatCastINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatCastINTEL"};
            return true;
        case SpvOpArbitraryFloatCastFromIntINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatCastFromIntINTEL"};
            return true;
        case SpvOpArbitraryFloatCastToIntINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatCastToIntINTEL"};
            return true;
        case SpvOpArbitraryFloatAddINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatAddINTEL"};
            return true;
        case SpvOpArbitraryFloatSubINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatSubINTEL"};
            return true;
        case SpvOpArbitraryFloatMulINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatMulINTEL"};
            return true;
        case SpvOpArbitraryFloatDivINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatDivINTEL"};
            return true;
        case SpvOpArbitraryFloatGTINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatGTINTEL"};
            return true;
        case SpvOpArbitraryFloatGEINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatGEINTEL"};
            return true;
        case SpvOpArbitraryFloatLTINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatLTINTEL"};
            return true;
        case SpvOpArbitraryFloatLEINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatLEINTEL"};
            return true;
        case SpvOpArbitraryFloatEQINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatEQINTEL"};
            return true;
        case SpvOpArbitraryFloatRecipINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatRecipINTEL"};
            return true;
        case SpvOpArbitraryFloatRSqrtINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatRSqrtINTEL"};
            return true;
        case SpvOpArbitraryFloatCbrtINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatCbrtINTEL"};
            return true;
        case SpvOpArbitraryFloatHypotINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatHypotINTEL"};
            return true;
        case SpvOpArbitraryFloatSqrtINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatSqrtINTEL"};
            return true;
        case SpvOpArbitraryFloatLogINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatLogINTEL"};
            return true;
        case SpvOpArbitraryFloatLog2INTEL:
            v = UnownedStringSlice{"OpArbitraryFloatLog2INTEL"};
            return true;
        case SpvOpArbitraryFloatLog10INTEL:
            v = UnownedStringSlice{"OpArbitraryFloatLog10INTEL"};
            return true;
        case SpvOpArbitraryFloatLog1pINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatLog1pINTEL"};
            return true;
        case SpvOpArbitraryFloatExpINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatExpINTEL"};
            return true;
        case SpvOpArbitraryFloatExp2INTEL:
            v = UnownedStringSlice{"OpArbitraryFloatExp2INTEL"};
            return true;
        case SpvOpArbitraryFloatExp10INTEL:
            v = UnownedStringSlice{"OpArbitraryFloatExp10INTEL"};
            return true;
        case SpvOpArbitraryFloatExpm1INTEL:
            v = UnownedStringSlice{"OpArbitraryFloatExpm1INTEL"};
            return true;
        case SpvOpArbitraryFloatSinINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatSinINTEL"};
            return true;
        case SpvOpArbitraryFloatCosINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatCosINTEL"};
            return true;
        case SpvOpArbitraryFloatSinCosINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatSinCosINTEL"};
            return true;
        case SpvOpArbitraryFloatSinPiINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatSinPiINTEL"};
            return true;
        case SpvOpArbitraryFloatCosPiINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatCosPiINTEL"};
            return true;
        case SpvOpArbitraryFloatASinINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatASinINTEL"};
            return true;
        case SpvOpArbitraryFloatASinPiINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatASinPiINTEL"};
            return true;
        case SpvOpArbitraryFloatACosINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatACosINTEL"};
            return true;
        case SpvOpArbitraryFloatACosPiINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatACosPiINTEL"};
            return true;
        case SpvOpArbitraryFloatATanINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatATanINTEL"};
            return true;
        case SpvOpArbitraryFloatATanPiINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatATanPiINTEL"};
            return true;
        case SpvOpArbitraryFloatATan2INTEL:
            v = UnownedStringSlice{"OpArbitraryFloatATan2INTEL"};
            return true;
        case SpvOpArbitraryFloatPowINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatPowINTEL"};
            return true;
        case SpvOpArbitraryFloatPowRINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatPowRINTEL"};
            return true;
        case SpvOpArbitraryFloatPowNINTEL:
            v = UnownedStringSlice{"OpArbitraryFloatPowNINTEL"};
            return true;
        case SpvOpLoopControlINTEL:
            v = UnownedStringSlice{"OpLoopControlINTEL"};
            return true;
        case SpvOpAliasDomainDeclINTEL:
            v = UnownedStringSlice{"OpAliasDomainDeclINTEL"};
            return true;
        case SpvOpAliasScopeDeclINTEL:
            v = UnownedStringSlice{"OpAliasScopeDeclINTEL"};
            return true;
        case SpvOpAliasScopeListDeclINTEL:
            v = UnownedStringSlice{"OpAliasScopeListDeclINTEL"};
            return true;
        case SpvOpFixedSqrtINTEL:
            v = UnownedStringSlice{"OpFixedSqrtINTEL"};
            return true;
        case SpvOpFixedRecipINTEL:
            v = UnownedStringSlice{"OpFixedRecipINTEL"};
            return true;
        case SpvOpFixedRsqrtINTEL:
            v = UnownedStringSlice{"OpFixedRsqrtINTEL"};
            return true;
        case SpvOpFixedSinINTEL:
            v = UnownedStringSlice{"OpFixedSinINTEL"};
            return true;
        case SpvOpFixedCosINTEL:
            v = UnownedStringSlice{"OpFixedCosINTEL"};
            return true;
        case SpvOpFixedSinCosINTEL:
            v = UnownedStringSlice{"OpFixedSinCosINTEL"};
            return true;
        case SpvOpFixedSinPiINTEL:
            v = UnownedStringSlice{"OpFixedSinPiINTEL"};
            return true;
        case SpvOpFixedCosPiINTEL:
            v = UnownedStringSlice{"OpFixedCosPiINTEL"};
            return true;
        case SpvOpFixedSinCosPiINTEL:
            v = UnownedStringSlice{"OpFixedSinCosPiINTEL"};
            return true;
        case SpvOpFixedLogINTEL:
            v = UnownedStringSlice{"OpFixedLogINTEL"};
            return true;
        case SpvOpFixedExpINTEL:
            v = UnownedStringSlice{"OpFixedExpINTEL"};
            return true;
        case SpvOpPtrCastToCrossWorkgroupINTEL:
            v = UnownedStringSlice{"OpPtrCastToCrossWorkgroupINTEL"};
            return true;
        case SpvOpCrossWorkgroupCastToPtrINTEL:
            v = UnownedStringSlice{"OpCrossWorkgroupCastToPtrINTEL"};
            return true;
        case SpvOpReadPipeBlockingINTEL:
            v = UnownedStringSlice{"OpReadPipeBlockingINTEL"};
            return true;
        case SpvOpWritePipeBlockingINTEL:
            v = UnownedStringSlice{"OpWritePipeBlockingINTEL"};
            return true;
        case SpvOpFPGARegINTEL:
            v = UnownedStringSlice{"OpFPGARegINTEL"};
            return true;
        case SpvOpRayQueryGetRayTMinKHR:
            v = UnownedStringSlice{"OpRayQueryGetRayTMinKHR"};
            return true;
        case SpvOpRayQueryGetRayFlagsKHR:
            v = UnownedStringSlice{"OpRayQueryGetRayFlagsKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionTKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionTKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionInstanceCustomIndexKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionInstanceIdKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionInstanceIdKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionGeometryIndexKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionGeometryIndexKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionPrimitiveIndexKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionPrimitiveIndexKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionBarycentricsKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionBarycentricsKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionFrontFaceKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionFrontFaceKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionCandidateAABBOpaqueKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionObjectRayDirectionKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionObjectRayDirectionKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionObjectRayOriginKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionObjectRayOriginKHR"};
            return true;
        case SpvOpRayQueryGetWorldRayDirectionKHR:
            v = UnownedStringSlice{"OpRayQueryGetWorldRayDirectionKHR"};
            return true;
        case SpvOpRayQueryGetWorldRayOriginKHR:
            v = UnownedStringSlice{"OpRayQueryGetWorldRayOriginKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionObjectToWorldKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionObjectToWorldKHR"};
            return true;
        case SpvOpRayQueryGetIntersectionWorldToObjectKHR:
            v = UnownedStringSlice{"OpRayQueryGetIntersectionWorldToObjectKHR"};
            return true;
        case SpvOpAtomicFAddEXT:
            v = UnownedStringSlice{"OpAtomicFAddEXT"};
            return true;
        case SpvOpTypeBufferSurfaceINTEL:
            v = UnownedStringSlice{"OpTypeBufferSurfaceINTEL"};
            return true;
        case SpvOpTypeStructContinuedINTEL:
            v = UnownedStringSlice{"OpTypeStructContinuedINTEL"};
            return true;
        case SpvOpConstantCompositeContinuedINTEL:
            v = UnownedStringSlice{"OpConstantCompositeContinuedINTEL"};
            return true;
        case SpvOpSpecConstantCompositeContinuedINTEL:
            v = UnownedStringSlice{"OpSpecConstantCompositeContinuedINTEL"};
            return true;
        case SpvOpConvertFToBF16INTEL:
            v = UnownedStringSlice{"OpConvertFToBF16INTEL"};
            return true;
        case SpvOpConvertBF16ToFINTEL:
            v = UnownedStringSlice{"OpConvertBF16ToFINTEL"};
            return true;
        case SpvOpControlBarrierArriveINTEL:
            v = UnownedStringSlice{"OpControlBarrierArriveINTEL"};
            return true;
        case SpvOpControlBarrierWaitINTEL:
            v = UnownedStringSlice{"OpControlBarrierWaitINTEL"};
            return true;
        case SpvOpGroupIMulKHR:
            v = UnownedStringSlice{"OpGroupIMulKHR"};
            return true;
        case SpvOpGroupFMulKHR:
            v = UnownedStringSlice{"OpGroupFMulKHR"};
            return true;
        case SpvOpGroupBitwiseAndKHR:
            v = UnownedStringSlice{"OpGroupBitwiseAndKHR"};
            return true;
        case SpvOpGroupBitwiseOrKHR:
            v = UnownedStringSlice{"OpGroupBitwiseOrKHR"};
            return true;
        case SpvOpGroupBitwiseXorKHR:
            v = UnownedStringSlice{"OpGroupBitwiseXorKHR"};
            return true;
        case SpvOpGroupLogicalAndKHR:
            v = UnownedStringSlice{"OpGroupLogicalAndKHR"};
            return true;
        case SpvOpGroupLogicalOrKHR:
            v = UnownedStringSlice{"OpGroupLogicalOrKHR"};
            return true;
        case SpvOpGroupLogicalXorKHR:
            v = UnownedStringSlice{"OpGroupLogicalXorKHR"};
            return true;
        default: return false;
    }
}

using EnumCategory = SPIRVCoreGrammarInfo::EnumCategory;
static bool lookupEnumCategory(const UnownedStringSlice& str, EnumCategory& value)
{
    static const unsigned tableSalt[56] = {
        1, 0, 1, 1, 0, 1, 1, 2, 8, 1, 0, 2, 0, 0, 1, 1,
        3, 2, 2, 0, 0, 4, 0, 2, 0, 4, 2, 1, 1, 0, 0, 10,
        0, 4, 2, 0, 4, 6, 0, 0, 0, 1, 0, 3, 5, 2, 0, 3,
        1, 13, 0, 14, 0, 103, 16, 128
    };

    using KV = std::pair<const char*, EnumCategory>;

    static const KV words[56] =
    {
        {"CooperativeMatrixLayout", EnumCategory{41}},
        {"StorageClass", EnumCategory{15}},
        {"LiteralExtInstInteger", EnumCategory{51}},
        {"PairIdRefLiteralInteger", EnumCategory{54}},
        {"SelectionControl", EnumCategory{2}},
        {"RayQueryCandidateIntersectionType", EnumCategory{38}},
        {"Capability", EnumCategory{35}},
        {"SamplerAddressingMode", EnumCategory{17}},
        {"FragmentShadingRate", EnumCategory{9}},
        {"IdRef", EnumCategory{47}},
        {"Dim", EnumCategory{16}},
        {"PairIdRefIdRef", EnumCategory{55}},
        {"PairLiteralIntegerIdRef", EnumCategory{53}},
        {"BuiltIn", EnumCategory{31}},
        {"ImageChannelDataType", EnumCategory{21}},
        {"CooperativeMatrixOperands", EnumCategory{40}},
        {"FPOperationMode", EnumCategory{25}},
        {"FunctionParameterAttribute", EnumCategory{29}},
        {"ExecutionMode", EnumCategory{14}},
        {"SourceLanguage", EnumCategory{10}},
        {"IdScope", EnumCategory{46}},
        {"QuantizationModes", EnumCategory{24}},
        {"PackedVectorFormat", EnumCategory{39}},
        {"IdMemorySemantics", EnumCategory{45}},
        {"LinkageType", EnumCategory{27}},
        {"ImageOperands", EnumCategory{0}},
        {"OverflowModes", EnumCategory{26}},
        {"MemorySemantics", EnumCategory{5}},
        {"Scope", EnumCategory{32}},
        {"IdResultType", EnumCategory{43}},
        {"ImageFormat", EnumCategory{19}},
        {"FPRoundingMode", EnumCategory{22}},
        {"MemoryModel", EnumCategory{13}},
        {"LiteralSpecConstantOpInteger", EnumCategory{52}},
        {"RayQueryCommittedIntersectionType", EnumCategory{37}},
        {"LiteralString", EnumCategory{49}},
        {"IdResult", EnumCategory{44}},
        {"Decoration", EnumCategory{30}},
        {"LiteralContextDependentNumber", EnumCategory{50}},
        {"GroupOperation", EnumCategory{33}},
        {"KernelProfilingInfo", EnumCategory{7}},
        {"AddressingModel", EnumCategory{12}},
        {"AccessQualifier", EnumCategory{28}},
        {"KernelEnqueueFlags", EnumCategory{34}},
        {"RayFlags", EnumCategory{8}},
        {"LoopControl", EnumCategory{3}},
        {"FunctionControl", EnumCategory{4}},
        {"RayQueryIntersection", EnumCategory{36}},
        {"SamplerFilterMode", EnumCategory{18}},
        {"FPFastMathMode", EnumCategory{1}},
        {"CooperativeMatrixUse", EnumCategory{42}},
        {"ExecutionModel", EnumCategory{11}},
        {"ImageChannelOrder", EnumCategory{20}},
        {"MemoryAccess", EnumCategory{6}},
        {"LiteralInteger", EnumCategory{48}},
        {"FPDenormMode", EnumCategory{23}},
    };

    static const auto hash = [](const UnownedStringSlice& str, UInt32 salt){
        return combineHash(getHashCode(str), getHashCode(salt)) % 56;
    };

    const auto i = hash(str, tableSalt[hash(str, 0)]);
    if(str == words[i].first)
    {
        value = words[i].second;
        return true;
    }
    else
    {
        return false;
    }
}

RefPtr<SPIRVCoreGrammarInfo> SPIRVCoreGrammarInfo::getEmbeddedVersion()
{
    static SPIRVCoreGrammarInfo embedded = [](){
        SPIRVCoreGrammarInfo info;
        info.spvOps.embedded = &lookupSpvOp;
        info.spvCapabilities.embedded = &lookupSpvCapability;
        info.anyEnum.embedded = &lookupSpvWord;
        info.opInfo.embedded = &getOpInfo;
        info.opNames.embedded = &getOpName;
        info.enumCategories.embedded = &lookupEnumCategory;
        info.addReference();
        return info;
    }();
    return &embedded;
}
}
